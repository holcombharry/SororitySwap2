{"ast":null,"code":"import config from '../config';\n\nconst ensureOpenGraphLocale = locale => {\n  switch (locale) {\n    case 'en':\n      return 'en_US';\n\n    default:\n      return locale;\n  }\n};\n/**\n * These will be used with Helmet <meta {...openGraphMetaProps} />\n */\n\n\nexport const openGraphMetaProps = data => {\n  const {\n    canonicalRootURL,\n    contentType,\n    description,\n    facebookAppId,\n    facebookImages,\n    locale,\n    published,\n    siteTitle,\n    tags,\n    title,\n    updated,\n    url\n  } = data;\n\n  if (!(title && description && contentType && url && facebookImages && canonicalRootURL)) {\n    /* eslint-disable no-console */\n    if (console && console.warn) {\n      console.warn(`Can't create Open Graph meta tags:\n        title, description, contentType, url, facebookImages, and canonicalRootURL are needed.`);\n    }\n    /* eslint-enable no-console */\n\n\n    return [];\n  }\n\n  const openGraphMeta = [{\n    property: 'og:description',\n    content: description\n  }, {\n    property: 'og:title',\n    content: title\n  }, {\n    property: 'og:type',\n    content: contentType\n  }, {\n    property: 'og:url',\n    content: url\n  }, {\n    property: 'og:locale',\n    content: ensureOpenGraphLocale(locale)\n  }];\n\n  if (facebookImages && facebookImages.length > 0) {\n    facebookImages.forEach(i => {\n      openGraphMeta.push({\n        property: 'og:image',\n        content: i.url\n      });\n\n      if (i.width && i.height) {\n        openGraphMeta.push({\n          property: 'og:image:width',\n          content: i.width\n        });\n        openGraphMeta.push({\n          property: 'og:image:height',\n          content: i.height\n        });\n      }\n    });\n  }\n\n  if (siteTitle) {\n    openGraphMeta.push({\n      property: 'og:site_name',\n      content: siteTitle\n    });\n  }\n\n  if (facebookAppId) {\n    openGraphMeta.push({\n      property: 'fb:app_id',\n      content: facebookAppId\n    });\n  }\n\n  if (published) {\n    openGraphMeta.push({\n      property: 'article:published_time',\n      content: published\n    });\n  }\n\n  if (updated) {\n    openGraphMeta.push({\n      property: 'article:modified_time',\n      content: updated\n    });\n  }\n\n  if (tags) {\n    openGraphMeta.push({\n      property: 'article:tag',\n      content: tags\n    });\n  }\n\n  return openGraphMeta;\n};\n/**\n * These will be used with Helmet <meta {...twitterMetaProps} />\n */\n\nexport const twitterMetaProps = data => {\n  const {\n    canonicalRootURL,\n    description,\n    siteTwitterHandle,\n    title,\n    twitterHandle,\n    twitterImages,\n    url\n  } = data;\n\n  if (!(title && description && siteTwitterHandle && url)) {\n    /* eslint-disable no-console */\n    if (console && console.warn) {\n      console.warn(`Can't create twitter card meta tags:\n        title, description, siteTwitterHandle, and url are needed.`);\n    }\n    /* eslint-enable no-console */\n\n\n    return [];\n  }\n\n  const twitterMeta = [{\n    name: 'twitter:card',\n    content: 'summary_large_image'\n  }, {\n    name: 'twitter:title',\n    content: title\n  }, {\n    name: 'twitter:description',\n    content: description\n  }, {\n    name: 'twitter:site',\n    content: siteTwitterHandle\n  }, {\n    name: 'twitter:url',\n    content: url\n  }];\n\n  if (canonicalRootURL && twitterImages && twitterImages.length > 0) {\n    twitterImages.forEach(i => {\n      twitterMeta.push({\n        name: 'twitter:image',\n        content: i.url\n      });\n    });\n  }\n\n  if (twitterHandle) {\n    // TODO: If we want to connect providers twitter account on ListingPage\n    // we needs to get this info among listing data (API support needed)\n    twitterMeta.push({\n      name: 'twitter:creator',\n      content: twitterHandle\n    });\n  }\n\n  if (canonicalRootURL) {\n    twitterMeta.push({\n      name: 'twitter:domain',\n      content: canonicalRootURL\n    });\n  }\n\n  return twitterMeta;\n};\n/**\n * These will be used with Helmet <meta {...metaTagProps} />\n * Creates data for Open Graph and Twitter meta tags.\n */\n\nexport const metaTagProps = tagData => {\n  const {\n    canonicalRootURL,\n    facebookAppId,\n    siteTitle,\n    siteTwitterHandle\n  } = config;\n  const author = tagData.author || siteTitle;\n  const defaultMeta = [{\n    name: 'description',\n    content: tagData.description\n  }, {\n    name: 'author',\n    content: author\n  }];\n  const openGraphMeta = openGraphMetaProps({ ...tagData,\n    canonicalRootURL,\n    facebookAppId,\n    siteTitle\n  });\n  const twitterMeta = twitterMetaProps({ ...tagData,\n    canonicalRootURL,\n    siteTwitterHandle\n  });\n  return [...defaultMeta, ...openGraphMeta, ...twitterMeta];\n};","map":{"version":3,"sources":["/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/util/seo.js"],"names":["config","ensureOpenGraphLocale","locale","openGraphMetaProps","data","canonicalRootURL","contentType","description","facebookAppId","facebookImages","published","siteTitle","tags","title","updated","url","console","warn","openGraphMeta","property","content","length","forEach","i","push","width","height","twitterMetaProps","siteTwitterHandle","twitterHandle","twitterImages","twitterMeta","name","metaTagProps","tagData","author","defaultMeta"],"mappings":"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","sourcesContent":["import config from '../config';\n\nconst ensureOpenGraphLocale = locale => {\n  switch (locale) {\n    case 'en':\n      return 'en_US';\n    default:\n      return locale;\n  }\n};\n\n/**\n * These will be used with Helmet <meta {...openGraphMetaProps} />\n */\nexport const openGraphMetaProps = data => {\n  const {\n    canonicalRootURL,\n    contentType,\n    description,\n    facebookAppId,\n    facebookImages,\n    locale,\n    published,\n    siteTitle,\n    tags,\n    title,\n    updated,\n    url,\n  } = data;\n\n  if (!(title && description && contentType && url && facebookImages && canonicalRootURL)) {\n    /* eslint-disable no-console */\n    if (console && console.warn) {\n      console.warn(\n        `Can't create Open Graph meta tags:\n        title, description, contentType, url, facebookImages, and canonicalRootURL are needed.`\n      );\n    }\n    /* eslint-enable no-console */\n    return [];\n  }\n\n  const openGraphMeta = [\n    { property: 'og:description', content: description },\n    { property: 'og:title', content: title },\n    { property: 'og:type', content: contentType },\n    { property: 'og:url', content: url },\n    { property: 'og:locale', content: ensureOpenGraphLocale(locale) },\n  ];\n\n  if (facebookImages && facebookImages.length > 0) {\n    facebookImages.forEach(i => {\n      openGraphMeta.push({\n        property: 'og:image',\n        content: i.url,\n      });\n\n      if (i.width && i.height) {\n        openGraphMeta.push({ property: 'og:image:width', content: i.width });\n        openGraphMeta.push({ property: 'og:image:height', content: i.height });\n      }\n    });\n  }\n\n  if (siteTitle) {\n    openGraphMeta.push({ property: 'og:site_name', content: siteTitle });\n  }\n\n  if (facebookAppId) {\n    openGraphMeta.push({ property: 'fb:app_id', content: facebookAppId });\n  }\n\n  if (published) {\n    openGraphMeta.push({ property: 'article:published_time', content: published });\n  }\n\n  if (updated) {\n    openGraphMeta.push({ property: 'article:modified_time', content: updated });\n  }\n\n  if (tags) {\n    openGraphMeta.push({ property: 'article:tag', content: tags });\n  }\n\n  return openGraphMeta;\n};\n\n/**\n * These will be used with Helmet <meta {...twitterMetaProps} />\n */\nexport const twitterMetaProps = data => {\n  const {\n    canonicalRootURL,\n    description,\n    siteTwitterHandle,\n    title,\n    twitterHandle,\n    twitterImages,\n    url,\n  } = data;\n\n  if (!(title && description && siteTwitterHandle && url)) {\n    /* eslint-disable no-console */\n    if (console && console.warn) {\n      console.warn(\n        `Can't create twitter card meta tags:\n        title, description, siteTwitterHandle, and url are needed.`\n      );\n    }\n    /* eslint-enable no-console */\n    return [];\n  }\n\n  const twitterMeta = [\n    { name: 'twitter:card', content: 'summary_large_image' },\n    { name: 'twitter:title', content: title },\n    { name: 'twitter:description', content: description },\n    { name: 'twitter:site', content: siteTwitterHandle },\n    { name: 'twitter:url', content: url },\n  ];\n\n  if (canonicalRootURL && twitterImages && twitterImages.length > 0) {\n    twitterImages.forEach(i => {\n      twitterMeta.push({\n        name: 'twitter:image',\n        content: i.url,\n      });\n    });\n  }\n\n  if (twitterHandle) {\n    // TODO: If we want to connect providers twitter account on ListingPage\n    // we needs to get this info among listing data (API support needed)\n    twitterMeta.push({ name: 'twitter:creator', content: twitterHandle });\n  }\n\n  if (canonicalRootURL) {\n    twitterMeta.push({ name: 'twitter:domain', content: canonicalRootURL });\n  }\n\n  return twitterMeta;\n};\n\n/**\n * These will be used with Helmet <meta {...metaTagProps} />\n * Creates data for Open Graph and Twitter meta tags.\n */\nexport const metaTagProps = tagData => {\n  const { canonicalRootURL, facebookAppId, siteTitle, siteTwitterHandle } = config;\n\n  const author = tagData.author || siteTitle;\n  const defaultMeta = [\n    { name: 'description', content: tagData.description },\n    { name: 'author', content: author },\n  ];\n\n  const openGraphMeta = openGraphMetaProps({\n    ...tagData,\n    canonicalRootURL,\n    facebookAppId,\n    siteTitle,\n  });\n\n  const twitterMeta = twitterMetaProps({\n    ...tagData,\n    canonicalRootURL,\n    siteTwitterHandle,\n  });\n\n  return [...defaultMeta, ...openGraphMeta, ...twitterMeta];\n};\n"]},"metadata":{},"sourceType":"module"}