{"ast":null,"code":"var _jsxFileName = \"/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/components/FieldSelect/FieldSelect.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Field } from 'react-final-form';\nimport classNames from 'classnames';\nimport { ValidationError } from '../../components';\nimport css from './FieldSelect.module.css';\n\nconst FieldSelectComponent = props => {\n  const {\n    rootClassName,\n    className,\n    id,\n    label,\n    input,\n    meta,\n    children,\n    ...rest\n  } = props;\n\n  if (label && !id) {\n    throw new Error('id required when a label is given');\n  }\n\n  const {\n    valid,\n    invalid,\n    touched,\n    error\n  } = meta; // Error message and input error styles are only shown if the\n  // field has been touched and the validation has failed.\n\n  const hasError = touched && invalid && error;\n  const selectClasses = classNames(css.select, {\n    [css.selectSuccess]: valid,\n    [css.selectError]: hasError\n  });\n  const selectProps = {\n    className: selectClasses,\n    id,\n    ...input,\n    ...rest\n  };\n  const classes = classNames(rootClassName || css.root, className);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, label ? /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 16\n    }\n  }, label) : null, /*#__PURE__*/React.createElement(\"select\", Object.assign({}, selectProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }), children), /*#__PURE__*/React.createElement(ValidationError, {\n    fieldMeta: meta,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }));\n};\n\n_c = FieldSelectComponent;\nFieldSelectComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  id: null,\n  label: null,\n  children: null\n};\nconst {\n  string,\n  object,\n  node\n} = PropTypes;\nFieldSelectComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  // Label is optional, but if it is given, an id is also required so\n  // the label can reference the input in the `for` attribute\n  id: string,\n  label: string,\n  // Generated by final-form's Field component\n  input: object.isRequired,\n  meta: object.isRequired,\n  children: node\n};\n\nconst FieldSelect = props => {\n  return /*#__PURE__*/React.createElement(Field, Object.assign({\n    component: FieldSelectComponent\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 10\n    }\n  }));\n};\n\n_c2 = FieldSelect;\nexport default FieldSelect;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FieldSelectComponent\");\n$RefreshReg$(_c2, \"FieldSelect\");","map":{"version":3,"sources":["/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/components/FieldSelect/FieldSelect.js"],"names":["React","PropTypes","Field","classNames","ValidationError","css","FieldSelectComponent","props","rootClassName","className","id","label","input","meta","children","rest","Error","valid","invalid","touched","error","hasError","selectClasses","select","selectSuccess","selectError","selectProps","classes","root","defaultProps","string","object","node","propTypes","isRequired","FieldSelect"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Field } from 'react-final-form';\nimport classNames from 'classnames';\nimport { ValidationError } from '../../components';\n\nimport css from './FieldSelect.module.css';\n\nconst FieldSelectComponent = props => {\n  const { rootClassName, className, id, label, input, meta, children, ...rest } = props;\n\n  if (label && !id) {\n    throw new Error('id required when a label is given');\n  }\n\n  const { valid, invalid, touched, error } = meta;\n\n  // Error message and input error styles are only shown if the\n  // field has been touched and the validation has failed.\n  const hasError = touched && invalid && error;\n\n  const selectClasses = classNames(css.select, {\n    [css.selectSuccess]: valid,\n    [css.selectError]: hasError,\n  });\n  const selectProps = { className: selectClasses, id, ...input, ...rest };\n\n  const classes = classNames(rootClassName || css.root, className);\n  return (\n    <div className={classes}>\n      {label ? <label htmlFor={id}>{label}</label> : null}\n      <select {...selectProps}>{children}</select>\n      <ValidationError fieldMeta={meta} />\n    </div>\n  );\n};\n\nFieldSelectComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  id: null,\n  label: null,\n  children: null,\n};\n\nconst { string, object, node } = PropTypes;\n\nFieldSelectComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n\n  // Label is optional, but if it is given, an id is also required so\n  // the label can reference the input in the `for` attribute\n  id: string,\n  label: string,\n\n  // Generated by final-form's Field component\n  input: object.isRequired,\n  meta: object.isRequired,\n\n  children: node,\n};\n\nconst FieldSelect = props => {\n  return <Field component={FieldSelectComponent} {...props} />;\n};\n\nexport default FieldSelect;\n"]},"metadata":{},"sourceType":"module"}