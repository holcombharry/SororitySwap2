{"ast":null,"code":"var _jsxFileName = \"/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/components/ResponsiveImage/ResponsiveImage.js\";\n\n/**\n * Usage without sizes:\n *   <ResponsiveImage\n *     alt=\"ListingX\"\n *     image={imageDataFromSDK}\n *     variants={['landscape-crop', 'landscape-crop2x']}\n *   />\n *   // produces:\n *   <img\n *     alt=\"ListingX\"\n *     src=\"url/to/landscape-crop.jpg\"\n *     srcSet=\"url/to/landscape-crop.jpg 400w, url/to/landscape-crop2x.jpg 800w\" />\n *\n * Usage with sizes:\n *   <ResponsiveImage\n *     alt=\"ListingX\"\n *     image={imageDataFromSDK}\n *     variants={['landscape-crop', 'landscape-crop2x']}\n *     sizes=\"(max-width: 600px) 100vw, 50vw\"\n *   />\n *   // produces:\n *   <img\n *     alt=\"ListingX\"\n *     src=\"url/to/landscape-crop.jpg\"\n *     srcSet=\"url/to/landscape-crop.jpg 400w, url/to/landscape-crop2x.jpg 800w\"\n *     sizes=\"(max-width: 600px) 100vw, 50vw\" />\n *\n *   // This means that below 600px image will take as many pixels there are available on current\n *   // viewport width (100vw) - and above that image will only take 50% of the page width.\n *   // Browser decides which image it will fetch based on current screen size.\n *\n * NOTE: for all the possible image variant names and their respective\n * sizes, see the API documentation.\n */\nimport React from 'react';\nimport { arrayOf, string } from 'prop-types';\nimport classNames from 'classnames';\nimport { FormattedMessage } from '../../util/reactIntl';\nimport { propTypes } from '../../util/types';\nimport NoImageIcon from './NoImageIcon';\nimport css from './ResponsiveImage.module.css';\n\nconst ResponsiveImage = props => {\n  const {\n    className,\n    rootClassName,\n    alt,\n    noImageMessage,\n    image,\n    variants,\n    dimensions,\n    ...rest\n  } = props;\n  const classes = classNames(rootClassName || css.root, className);\n\n  if (image == null || variants.length === 0) {\n    const noImageClasses = classNames(rootClassName || css.root, css.noImageContainer, className);\n    const noImageMessageText = noImageMessage || /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"ResponsiveImage.noImage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 50\n      }\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: noImageClasses,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: css.noImageWrapper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(NoImageIcon, {\n      className: css.noImageIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: css.noImageText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, noImageMessageText)));\n  }\n\n  const imageVariants = image.attributes.variants;\n  const srcSet = variants.map(variantName => {\n    const variant = imageVariants[variantName];\n\n    if (!variant) {\n      // Variant not available (most like just not loaded yet)\n      return null;\n    }\n\n    return `${variant.url} ${variant.width}w`;\n  }).filter(v => v != null).join(', ');\n  const imgProps = {\n    className: classes,\n    srcSet,\n    ...rest\n  };\n  return /*#__PURE__*/React.createElement(\"img\", Object.assign({\n    alt: alt\n  }, imgProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 10\n    }\n  }));\n};\n\n_c = ResponsiveImage;\nResponsiveImage.defaultProps = {\n  className: null,\n  rootClassName: null,\n  image: null,\n  noImageMessage: null\n};\nResponsiveImage.propTypes = {\n  className: string,\n  rootClassName: string,\n  alt: string.isRequired,\n  image: propTypes.image,\n  variants: arrayOf(string).isRequired,\n  noImageMessage: string\n};\nexport default ResponsiveImage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResponsiveImage\");","map":{"version":3,"sources":["/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/components/ResponsiveImage/ResponsiveImage.js"],"names":["React","arrayOf","string","classNames","FormattedMessage","propTypes","NoImageIcon","css","ResponsiveImage","props","className","rootClassName","alt","noImageMessage","image","variants","dimensions","rest","classes","root","length","noImageClasses","noImageContainer","noImageMessageText","noImageWrapper","noImageIcon","noImageText","imageVariants","attributes","srcSet","map","variantName","variant","url","width","filter","v","join","imgProps","defaultProps","isRequired"],"mappings":"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","sourcesContent":["/**\n * Usage without sizes:\n *   <ResponsiveImage\n *     alt=\"ListingX\"\n *     image={imageDataFromSDK}\n *     variants={['landscape-crop', 'landscape-crop2x']}\n *   />\n *   // produces:\n *   <img\n *     alt=\"ListingX\"\n *     src=\"url/to/landscape-crop.jpg\"\n *     srcSet=\"url/to/landscape-crop.jpg 400w, url/to/landscape-crop2x.jpg 800w\" />\n *\n * Usage with sizes:\n *   <ResponsiveImage\n *     alt=\"ListingX\"\n *     image={imageDataFromSDK}\n *     variants={['landscape-crop', 'landscape-crop2x']}\n *     sizes=\"(max-width: 600px) 100vw, 50vw\"\n *   />\n *   // produces:\n *   <img\n *     alt=\"ListingX\"\n *     src=\"url/to/landscape-crop.jpg\"\n *     srcSet=\"url/to/landscape-crop.jpg 400w, url/to/landscape-crop2x.jpg 800w\"\n *     sizes=\"(max-width: 600px) 100vw, 50vw\" />\n *\n *   // This means that below 600px image will take as many pixels there are available on current\n *   // viewport width (100vw) - and above that image will only take 50% of the page width.\n *   // Browser decides which image it will fetch based on current screen size.\n *\n * NOTE: for all the possible image variant names and their respective\n * sizes, see the API documentation.\n */\n\nimport React from 'react';\nimport { arrayOf, string } from 'prop-types';\nimport classNames from 'classnames';\nimport { FormattedMessage } from '../../util/reactIntl';\nimport { propTypes } from '../../util/types';\n\nimport NoImageIcon from './NoImageIcon';\nimport css from './ResponsiveImage.module.css';\n\nconst ResponsiveImage = props => {\n  const {\n    className,\n    rootClassName,\n    alt,\n    noImageMessage,\n    image,\n    variants,\n    dimensions,\n    ...rest\n  } = props;\n  const classes = classNames(rootClassName || css.root, className);\n\n  if (image == null || variants.length === 0) {\n    const noImageClasses = classNames(rootClassName || css.root, css.noImageContainer, className);\n\n    const noImageMessageText = noImageMessage || <FormattedMessage id=\"ResponsiveImage.noImage\" />;\n    return (\n      <div className={noImageClasses}>\n        <div className={css.noImageWrapper}>\n          <NoImageIcon className={css.noImageIcon} />\n          <div className={css.noImageText}>{noImageMessageText}</div>\n        </div>\n      </div>\n    );\n  }\n\n  const imageVariants = image.attributes.variants;\n\n  const srcSet = variants\n    .map(variantName => {\n      const variant = imageVariants[variantName];\n\n      if (!variant) {\n        // Variant not available (most like just not loaded yet)\n        return null;\n      }\n      return `${variant.url} ${variant.width}w`;\n    })\n    .filter(v => v != null)\n    .join(', ');\n\n  const imgProps = {\n    className: classes,\n    srcSet,\n    ...rest,\n  };\n\n  return <img alt={alt} {...imgProps} />;\n};\n\nResponsiveImage.defaultProps = {\n  className: null,\n  rootClassName: null,\n  image: null,\n  noImageMessage: null,\n};\n\nResponsiveImage.propTypes = {\n  className: string,\n  rootClassName: string,\n  alt: string.isRequired,\n  image: propTypes.image,\n  variants: arrayOf(string).isRequired,\n  noImageMessage: string,\n};\n\nexport default ResponsiveImage;\n"]},"metadata":{},"sourceType":"module"}