{"ast":null,"code":"var _jsxFileName = \"/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/components/LocationAutocompleteInput/GeocoderGoogleMaps.js\";\nimport React from 'react';\nimport classNames from 'classnames';\nimport { getPlacePredictions, getPlaceDetails, locationBounds } from '../../util/googleMaps';\nimport { userLocation } from '../../util/maps';\nimport config from '../../config';\nimport css from './LocationAutocompleteInput.module.css';\nexport const CURRENT_LOCATION_ID = 'current-location'; // When displaying data from the Google Maps Places API, and\n// attribution is required next to the results.\n// See: https://developers.google.com/places/web-service/policies#powered\n\nexport const GeocoderAttribution = props => {\n  const {\n    rootClassName,\n    className\n  } = props;\n  const classes = classNames(rootClassName || css.poweredByGoogle, className);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 10\n    }\n  });\n};\n/**\n * A forward geocoding (place name -> coordinates) implementation\n * using the Google Maps Places API.\n */\n\n_c = GeocoderAttribution;\n\nclass GeocoderGoogleMaps {\n  constructor() {\n    this.sessionToken = null;\n  }\n\n  getSessionToken() {\n    this.sessionToken = this.sessionToken || new window.google.maps.places.AutocompleteSessionToken();\n    return this.sessionToken;\n  } // Public API\n  //\n\n  /**\n   * Search places with the given name.\n   *\n   * @param {String} search query for place names\n   *\n   * @return {Promise<{ search: String, predictions: Array<Object>}>}\n   * results of the geocoding, should have the original search query\n   * and an array of predictions. The format of the predictions is\n   * only relevant for the `getPlaceDetails` function below.\n   */\n\n\n  getPlacePredictions(search) {\n    const limitCountriesMaybe = config.maps.search.countryLimit ? {\n      componentRestrictions: {\n        country: config.maps.search.countryLimit\n      }\n    } : {};\n    return getPlacePredictions(search, this.getSessionToken(), limitCountriesMaybe).then(results => {\n      return {\n        search,\n        predictions: results.predictions\n      };\n    });\n  }\n  /**\n   * Get the ID of the given prediction.\n   */\n\n\n  getPredictionId(prediction) {\n    if (prediction.predictionPlace) {\n      // default prediction defined above\n      return prediction.id;\n    } // prediction from Google Maps Places API\n\n\n    return prediction.place_id;\n  }\n  /**\n   * Get the address text of the given prediction.\n   */\n\n\n  getPredictionAddress(prediction) {\n    if (prediction.predictionPlace) {\n      // default prediction defined above\n      return prediction.predictionPlace.address;\n    } // prediction from Google Maps Places API\n\n\n    return prediction.description;\n  }\n  /**\n   * Fetch or read place details from the selected prediction.\n   *\n   * @param {Object} prediction selected prediction object\n   *\n   * @return {Promise<util.propTypes.place>} a place object\n   */\n\n\n  getPlaceDetails(prediction) {\n    if (this.getPredictionId(prediction) === CURRENT_LOCATION_ID) {\n      return userLocation().then(latlng => {\n        return {\n          address: '',\n          origin: latlng,\n          bounds: locationBounds(latlng, config.maps.search.currentLocationBoundsDistance)\n        };\n      });\n    }\n\n    if (prediction.predictionPlace) {\n      return Promise.resolve(prediction.predictionPlace);\n    }\n\n    return getPlaceDetails(prediction.place_id, this.getSessionToken()).then(place => {\n      this.sessionToken = null;\n      return place;\n    });\n  }\n\n}\n\nexport default GeocoderGoogleMaps;\n\nvar _c;\n\n$RefreshReg$(_c, \"GeocoderAttribution\");","map":{"version":3,"sources":["/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/components/LocationAutocompleteInput/GeocoderGoogleMaps.js"],"names":["React","classNames","getPlacePredictions","getPlaceDetails","locationBounds","userLocation","config","css","CURRENT_LOCATION_ID","GeocoderAttribution","props","rootClassName","className","classes","poweredByGoogle","GeocoderGoogleMaps","constructor","sessionToken","getSessionToken","window","google","maps","places","AutocompleteSessionToken","search","limitCountriesMaybe","countryLimit","componentRestrictions","country","then","results","predictions","getPredictionId","prediction","predictionPlace","id","place_id","getPredictionAddress","address","description","latlng","origin","bounds","currentLocationBoundsDistance","Promise","resolve","place"],"mappings":"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","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { getPlacePredictions, getPlaceDetails, locationBounds } from '../../util/googleMaps';\nimport { userLocation } from '../../util/maps';\nimport config from '../../config';\n\nimport css from './LocationAutocompleteInput.module.css';\n\nexport const CURRENT_LOCATION_ID = 'current-location';\n\n// When displaying data from the Google Maps Places API, and\n// attribution is required next to the results.\n// See: https://developers.google.com/places/web-service/policies#powered\nexport const GeocoderAttribution = props => {\n  const { rootClassName, className } = props;\n  const classes = classNames(rootClassName || css.poweredByGoogle, className);\n  return <div className={classes} />;\n};\n\n/**\n * A forward geocoding (place name -> coordinates) implementation\n * using the Google Maps Places API.\n */\nclass GeocoderGoogleMaps {\n  constructor() {\n    this.sessionToken = null;\n  }\n  getSessionToken() {\n    this.sessionToken =\n      this.sessionToken || new window.google.maps.places.AutocompleteSessionToken();\n    return this.sessionToken;\n  }\n\n  // Public API\n  //\n\n  /**\n   * Search places with the given name.\n   *\n   * @param {String} search query for place names\n   *\n   * @return {Promise<{ search: String, predictions: Array<Object>}>}\n   * results of the geocoding, should have the original search query\n   * and an array of predictions. The format of the predictions is\n   * only relevant for the `getPlaceDetails` function below.\n   */\n  getPlacePredictions(search) {\n    const limitCountriesMaybe = config.maps.search.countryLimit\n      ? {\n          componentRestrictions: {\n            country: config.maps.search.countryLimit,\n          },\n        }\n      : {};\n\n    return getPlacePredictions(search, this.getSessionToken(), limitCountriesMaybe).then(\n      results => {\n        return {\n          search,\n          predictions: results.predictions,\n        };\n      }\n    );\n  }\n\n  /**\n   * Get the ID of the given prediction.\n   */\n  getPredictionId(prediction) {\n    if (prediction.predictionPlace) {\n      // default prediction defined above\n      return prediction.id;\n    }\n    // prediction from Google Maps Places API\n    return prediction.place_id;\n  }\n\n  /**\n   * Get the address text of the given prediction.\n   */\n  getPredictionAddress(prediction) {\n    if (prediction.predictionPlace) {\n      // default prediction defined above\n      return prediction.predictionPlace.address;\n    }\n    // prediction from Google Maps Places API\n    return prediction.description;\n  }\n\n  /**\n   * Fetch or read place details from the selected prediction.\n   *\n   * @param {Object} prediction selected prediction object\n   *\n   * @return {Promise<util.propTypes.place>} a place object\n   */\n  getPlaceDetails(prediction) {\n    if (this.getPredictionId(prediction) === CURRENT_LOCATION_ID) {\n      return userLocation().then(latlng => {\n        return {\n          address: '',\n          origin: latlng,\n          bounds: locationBounds(latlng, config.maps.search.currentLocationBoundsDistance),\n        };\n      });\n    }\n\n    if (prediction.predictionPlace) {\n      return Promise.resolve(prediction.predictionPlace);\n    }\n\n    return getPlaceDetails(prediction.place_id, this.getSessionToken()).then(place => {\n      this.sessionToken = null;\n      return place;\n    });\n  }\n}\n\nexport default GeocoderGoogleMaps;\n"]},"metadata":{},"sourceType":"module"}