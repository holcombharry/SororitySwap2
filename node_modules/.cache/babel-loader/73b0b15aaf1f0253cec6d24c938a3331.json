{"ast":null,"code":"import { updatedEntities, denormalisedEntities } from '../util/data'; // ================ Action types ================ //\n\nexport const ADD_MARKETPLACE_ENTITIES = 'app/marketplaceData/ADD_MARKETPLACE_ENTITIES'; // ================ Reducer ================ //\n\nconst initialState = {\n  // Database of all the fetched entities.\n  entities: {}\n};\n\nconst merge = (state, sdkResponse) => {\n  const apiResponse = sdkResponse.data;\n  return { ...state,\n    entities: updatedEntities({ ...state.entities\n    }, apiResponse)\n  };\n};\n\nexport default function marketplaceDataReducer(state = initialState, action = {}) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case ADD_MARKETPLACE_ENTITIES:\n      return merge(state, payload);\n\n    default:\n      return state;\n  }\n} // ================ Selectors ================ //\n\n/**\n * Get the denormalised listing entities with the given IDs\n *\n * @param {Object} state the full Redux store\n * @param {Array<UUID>} listingIds listing IDs to select from the store\n */\n\nexport const getListingsById = (state, listingIds) => {\n  const {\n    entities\n  } = state.marketplaceData;\n  const resources = listingIds.map(id => ({\n    id,\n    type: 'listing'\n  }));\n  const throwIfNotFound = false;\n  return denormalisedEntities(entities, resources, throwIfNotFound);\n};\n/**\n * Get the denormalised entities from the given entity references.\n *\n * @param {Object} state the full Redux store\n *\n * @param {Array<{ id, type }} entityRefs References to entities that\n * we want to query from the data. Currently we expect that all the\n * entities have the same type.\n *\n * @return {Array<Object>} denormalised entities\n */\n\nexport const getMarketplaceEntities = (state, entityRefs) => {\n  const {\n    entities\n  } = state.marketplaceData;\n  const throwIfNotFound = false;\n  return denormalisedEntities(entities, entityRefs, throwIfNotFound);\n}; // ================ Action creators ================ //\n\nexport const addMarketplaceEntities = sdkResponse => ({\n  type: ADD_MARKETPLACE_ENTITIES,\n  payload: sdkResponse\n});","map":{"version":3,"sources":["/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/ducks/marketplaceData.duck.js"],"names":["updatedEntities","denormalisedEntities","ADD_MARKETPLACE_ENTITIES","initialState","entities","merge","state","sdkResponse","apiResponse","data","marketplaceDataReducer","action","type","payload","getListingsById","listingIds","marketplaceData","resources","map","id","throwIfNotFound","getMarketplaceEntities","entityRefs","addMarketplaceEntities"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,oBAA1B,QAAsD,cAAtD,C,CAEA;;AAEA,OAAO,MAAMC,wBAAwB,GAAG,8CAAjC,C,CAEP;;AAEA,MAAMC,YAAY,GAAG;AACnB;AACAC,EAAAA,QAAQ,EAAE;AAFS,CAArB;;AAKA,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,WAAR,KAAwB;AACpC,QAAMC,WAAW,GAAGD,WAAW,CAACE,IAAhC;AACA,SAAO,EACL,GAAGH,KADE;AAELF,IAAAA,QAAQ,EAAEJ,eAAe,CAAC,EAAE,GAAGM,KAAK,CAACF;AAAX,KAAD,EAAwBI,WAAxB;AAFpB,GAAP;AAID,CAND;;AAQA,eAAe,SAASE,sBAAT,CAAgCJ,KAAK,GAAGH,YAAxC,EAAsDQ,MAAM,GAAG,EAA/D,EAAmE;AAChF,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AACA,UAAQC,IAAR;AACE,SAAKV,wBAAL;AACE,aAAOG,KAAK,CAACC,KAAD,EAAQO,OAAR,CAAZ;;AAEF;AACE,aAAOP,KAAP;AALJ;AAOD,C,CAED;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMQ,eAAe,GAAG,CAACR,KAAD,EAAQS,UAAR,KAAuB;AACpD,QAAM;AAAEX,IAAAA;AAAF,MAAeE,KAAK,CAACU,eAA3B;AACA,QAAMC,SAAS,GAAGF,UAAU,CAACG,GAAX,CAAeC,EAAE,KAAK;AACtCA,IAAAA,EADsC;AAEtCP,IAAAA,IAAI,EAAE;AAFgC,GAAL,CAAjB,CAAlB;AAIA,QAAMQ,eAAe,GAAG,KAAxB;AACA,SAAOnB,oBAAoB,CAACG,QAAD,EAAWa,SAAX,EAAsBG,eAAtB,CAA3B;AACD,CARM;AAUP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,sBAAsB,GAAG,CAACf,KAAD,EAAQgB,UAAR,KAAuB;AAC3D,QAAM;AAAElB,IAAAA;AAAF,MAAeE,KAAK,CAACU,eAA3B;AACA,QAAMI,eAAe,GAAG,KAAxB;AACA,SAAOnB,oBAAoB,CAACG,QAAD,EAAWkB,UAAX,EAAuBF,eAAvB,CAA3B;AACD,CAJM,C,CAMP;;AAEA,OAAO,MAAMG,sBAAsB,GAAGhB,WAAW,KAAK;AACpDK,EAAAA,IAAI,EAAEV,wBAD8C;AAEpDW,EAAAA,OAAO,EAAEN;AAF2C,CAAL,CAA1C","sourcesContent":["import { updatedEntities, denormalisedEntities } from '../util/data';\n\n// ================ Action types ================ //\n\nexport const ADD_MARKETPLACE_ENTITIES = 'app/marketplaceData/ADD_MARKETPLACE_ENTITIES';\n\n// ================ Reducer ================ //\n\nconst initialState = {\n  // Database of all the fetched entities.\n  entities: {},\n};\n\nconst merge = (state, sdkResponse) => {\n  const apiResponse = sdkResponse.data;\n  return {\n    ...state,\n    entities: updatedEntities({ ...state.entities }, apiResponse),\n  };\n};\n\nexport default function marketplaceDataReducer(state = initialState, action = {}) {\n  const { type, payload } = action;\n  switch (type) {\n    case ADD_MARKETPLACE_ENTITIES:\n      return merge(state, payload);\n\n    default:\n      return state;\n  }\n}\n\n// ================ Selectors ================ //\n\n/**\n * Get the denormalised listing entities with the given IDs\n *\n * @param {Object} state the full Redux store\n * @param {Array<UUID>} listingIds listing IDs to select from the store\n */\nexport const getListingsById = (state, listingIds) => {\n  const { entities } = state.marketplaceData;\n  const resources = listingIds.map(id => ({\n    id,\n    type: 'listing',\n  }));\n  const throwIfNotFound = false;\n  return denormalisedEntities(entities, resources, throwIfNotFound);\n};\n\n/**\n * Get the denormalised entities from the given entity references.\n *\n * @param {Object} state the full Redux store\n *\n * @param {Array<{ id, type }} entityRefs References to entities that\n * we want to query from the data. Currently we expect that all the\n * entities have the same type.\n *\n * @return {Array<Object>} denormalised entities\n */\nexport const getMarketplaceEntities = (state, entityRefs) => {\n  const { entities } = state.marketplaceData;\n  const throwIfNotFound = false;\n  return denormalisedEntities(entities, entityRefs, throwIfNotFound);\n};\n\n// ================ Action creators ================ //\n\nexport const addMarketplaceEntities = sdkResponse => ({\n  type: ADD_MARKETPLACE_ENTITIES,\n  payload: sdkResponse,\n});\n"]},"metadata":{},"sourceType":"module"}