{"ast":null,"code":"var _jsxFileName = \"/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/containers/SearchPage/SearchPageWithMap.js\";\nimport React, { Component } from 'react';\nimport { array, bool, func, oneOf, object, shape, string } from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport debounce from 'lodash/debounce';\nimport unionWith from 'lodash/unionWith';\nimport omit from 'lodash/omit';\nimport classNames from 'classnames';\nimport config from '../../config';\nimport { injectIntl, intlShape, FormattedMessage } from '../../util/reactIntl';\nimport routeConfiguration from '../../routing/routeConfiguration';\nimport { createResourceLocatorString, pathByRouteName } from '../../util/routes';\nimport { isAnyFilterActive, isMainSearchTypeKeywords, isOriginInUse } from '../../util/search';\nimport { parse, stringify } from '../../util/urlHelpers';\nimport { propTypes } from '../../util/types';\nimport { getListingsById } from '../../ducks/marketplaceData.duck';\nimport { manageDisableScrolling, isScrollingDisabled } from '../../ducks/UI.duck';\nimport { ModalInMobile, Page } from '../../components';\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\nimport { searchMapListings, setActiveListing } from './SearchPage.duck';\nimport { pickSearchParamsOnly, validURLParamsForExtendedData, validFilterParams, createSearchResultSchema } from './SearchPage.helpers';\nimport FilterComponent from './FilterComponent';\nimport SearchMap from './SearchMap/SearchMap';\nimport MainPanelHeader from './MainPanelHeader/MainPanelHeader';\nimport SearchFiltersSecondary from './SearchFiltersSecondary/SearchFiltersSecondary';\nimport SearchFiltersPrimary from './SearchFiltersPrimary/SearchFiltersPrimary';\nimport SearchFiltersMobile from './SearchFiltersMobile/SearchFiltersMobile';\nimport SortBy from './SortBy/SortBy';\nimport SearchResultsPanel from './SearchResultsPanel/SearchResultsPanel';\nimport css from './SearchPage.module.css';\nconst MODAL_BREAKPOINT = 768; // Search is in modal on mobile layout\n\nconst SEARCH_WITH_MAP_DEBOUNCE = 300; // Little bit of debounce before search is initiated.\n// Primary filters have their content in dropdown-popup.\n// With this offset we move the dropdown to the left a few pixels on desktop layout.\n\nconst FILTER_DROPDOWN_OFFSET = -14;\n\nconst validUrlQueryParamsFromProps = props => {\n  const {\n    location,\n    filterConfig\n  } = props; // eslint-disable-next-line no-unused-vars\n\n  const {\n    mapSearch,\n    page,\n    ...searchInURL\n  } = parse(location.search, {\n    latlng: ['origin'],\n    latlngBounds: ['bounds']\n  }); // urlQueryParams doesn't contain page specific url params\n  // like mapSearch, page or origin (origin depends on config.sortSearchByDistance)\n\n  return validURLParamsForExtendedData(searchInURL, filterConfig);\n};\n\nconst cleanSearchFromConflictingParams = (searchParams, sortConfig, filterConfig) => {\n  // Single out filters that should disable SortBy when an active\n  // keyword search sorts the listings according to relevance.\n  // In those cases, sort parameter should be removed.\n  const sortingFiltersActive = isAnyFilterActive(sortConfig.conflictingFilters, searchParams, filterConfig);\n  return sortingFiltersActive ? { ...searchParams,\n    [sortConfig.queryParamName]: null\n  } : searchParams;\n};\n\nexport class SearchPageComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isSearchMapOpenOnMobile: props.tab === 'map',\n      isMobileModalOpen: false,\n      currentQueryParams: validUrlQueryParamsFromProps(props),\n      isSecondaryFiltersOpen: false\n    };\n    this.searchMapListingsInProgress = false;\n    this.onMapMoveEnd = debounce(this.onMapMoveEnd.bind(this), SEARCH_WITH_MAP_DEBOUNCE);\n    this.onOpenMobileModal = this.onOpenMobileModal.bind(this);\n    this.onCloseMobileModal = this.onCloseMobileModal.bind(this); // Filter functions\n\n    this.applyFilters = this.applyFilters.bind(this);\n    this.cancelFilters = this.cancelFilters.bind(this);\n    this.resetAll = this.resetAll.bind(this);\n    this.initialValues = this.initialValues.bind(this);\n    this.getHandleChangedValueFn = this.getHandleChangedValueFn.bind(this); // SortBy\n\n    this.handleSortBy = this.handleSortBy.bind(this);\n  } // Callback to determine if new search is needed\n  // when map is moved by user or viewport has changed\n\n\n  onMapMoveEnd(viewportBoundsChanged, data) {\n    const {\n      viewportBounds,\n      viewportCenter\n    } = data;\n    const routes = routeConfiguration();\n    const searchPagePath = pathByRouteName('SearchPage', routes);\n    const currentPath = typeof window !== 'undefined' && window.location && window.location.pathname; // When using the ReusableMapContainer onMapMoveEnd can fire from other pages than SearchPage too\n\n    const isSearchPage = currentPath === searchPagePath; // If mapSearch url param is given\n    // or original location search is rendered once,\n    // we start to react to \"mapmoveend\" events by generating new searches\n    // (i.e. 'moveend' event in Mapbox and 'bounds_changed' in Google Maps)\n\n    if (viewportBoundsChanged && isSearchPage) {\n      const {\n        history,\n        location,\n        filterConfig\n      } = this.props; // parse query parameters, including a custom attribute named category\n\n      const {\n        address,\n        bounds,\n        mapSearch,\n        ...rest\n      } = parse(location.search, {\n        latlng: ['origin'],\n        latlngBounds: ['bounds']\n      }); //const viewportMapCenter = SearchMap.getMapCenter(map);\n\n      const originMaybe = isOriginInUse(config) ? {\n        origin: viewportCenter\n      } : {};\n      const searchParams = {\n        address,\n        ...originMaybe,\n        bounds: viewportBounds,\n        mapSearch: true,\n        ...validFilterParams(rest, filterConfig)\n      };\n      history.push(createResourceLocatorString('SearchPage', routes, {}, searchParams));\n    }\n  } // Invoked when a modal is opened from a child component,\n  // for example when a filter modal is opened in mobile view\n\n\n  onOpenMobileModal() {\n    this.setState({\n      isMobileModalOpen: true\n    });\n  } // Invoked when a modal is closed from a child component,\n  // for example when a filter modal is opened in mobile view\n\n\n  onCloseMobileModal() {\n    this.setState({\n      isMobileModalOpen: false\n    });\n  } // Apply the filters by redirecting to SearchPage with new filters.\n\n\n  applyFilters() {\n    const {\n      history,\n      sortConfig,\n      filterConfig\n    } = this.props;\n    const urlQueryParams = validUrlQueryParamsFromProps(this.props);\n    const searchParams = { ...urlQueryParams,\n      ...this.state.currentQueryParams\n    };\n    const search = cleanSearchFromConflictingParams(searchParams, sortConfig, filterConfig);\n    history.push(createResourceLocatorString('SearchPage', routeConfiguration(), {}, search));\n  } // Close the filters by clicking cancel, revert to the initial params\n\n\n  cancelFilters() {\n    this.setState({\n      currentQueryParams: {}\n    });\n  } // Reset all filter query parameters\n\n\n  resetAll(e) {\n    const {\n      history,\n      filterConfig\n    } = this.props;\n    const urlQueryParams = validUrlQueryParamsFromProps(this.props);\n    const filterQueryParamNames = filterConfig.map(f => f.queryParamNames); // Reset state\n\n    this.setState({\n      currentQueryParams: {}\n    }); // Reset routing params\n\n    const queryParams = omit(urlQueryParams, filterQueryParamNames);\n    history.push(createResourceLocatorString('SearchPage', routeConfiguration(), {}, queryParams));\n  }\n\n  initialValues(queryParamNames, isLiveEdit) {\n    const urlQueryParams = validUrlQueryParamsFromProps(this.props); // Query parameters that are in state (user might have not yet clicked \"Apply\")\n\n    const currentQueryParams = this.state.currentQueryParams; // Get initial value for a given parameter from state if its there.\n\n    const getInitialValue = paramName => {\n      const currentQueryParam = currentQueryParams[paramName];\n      const hasQueryParamInState = typeof currentQueryParam !== 'undefined';\n      return hasQueryParamInState && !isLiveEdit ? currentQueryParam : urlQueryParams[paramName];\n    }; // Return all the initial values related to given queryParamNames\n    // InitialValues for \"amenities\" filter could be\n    // { amenities: \"has_any:towel,jacuzzi\" }\n\n\n    const isArray = Array.isArray(queryParamNames);\n    return isArray ? queryParamNames.reduce((acc, paramName) => {\n      return { ...acc,\n        [paramName]: getInitialValue(paramName)\n      };\n    }, {}) : {};\n  }\n\n  getHandleChangedValueFn(useHistoryPush) {\n    const {\n      history,\n      sortConfig,\n      filterConfig\n    } = this.props;\n    const urlQueryParams = validUrlQueryParamsFromProps(this.props);\n    return updatedURLParams => {\n      const updater = prevState => {\n        const {\n          address,\n          bounds,\n          keywords\n        } = urlQueryParams;\n        const mergedQueryParams = { ...urlQueryParams,\n          ...prevState.currentQueryParams\n        }; // Address and bounds are handled outside of MainPanel.\n        // I.e. TopbarSearchForm && search by moving the map.\n        // We should always trust urlQueryParams with those.\n        // The same applies to keywords, if the main search type is keyword search.\n\n        const keywordsMaybe = isMainSearchTypeKeywords(config) ? {\n          keywords\n        } : {};\n        return {\n          currentQueryParams: { ...mergedQueryParams,\n            ...updatedURLParams,\n            ...keywordsMaybe,\n            address,\n            bounds\n          }\n        };\n      };\n\n      const callback = () => {\n        if (useHistoryPush) {\n          const searchParams = this.state.currentQueryParams;\n          const search = cleanSearchFromConflictingParams(searchParams, sortConfig, filterConfig);\n          history.push(createResourceLocatorString('SearchPage', routeConfiguration(), {}, search));\n        }\n      };\n\n      this.setState(updater, callback);\n    };\n  }\n\n  handleSortBy(urlParam, values) {\n    const {\n      history\n    } = this.props;\n    const urlQueryParams = validUrlQueryParamsFromProps(this.props);\n    const queryParams = values ? { ...urlQueryParams,\n      [urlParam]: values\n    } : omit(urlQueryParams, urlParam);\n    history.push(createResourceLocatorString('SearchPage', routeConfiguration(), {}, queryParams));\n  }\n\n  render() {\n    var _location$search;\n\n    const {\n      intl,\n      listings,\n      filterConfig,\n      sortConfig,\n      location,\n      mapListings,\n      onManageDisableScrolling,\n      pagination,\n      scrollingDisabled,\n      searchInProgress,\n      searchListingsError,\n      searchParams,\n      activeListingId,\n      onActivateListing\n    } = this.props; // eslint-disable-next-line no-unused-vars\n\n    const {\n      mapSearch,\n      page,\n      ...searchInURL\n    } = parse(location.search, {\n      latlng: ['origin'],\n      latlngBounds: ['bounds']\n    }); // urlQueryParams doesn't contain page specific url params\n    // like mapSearch, page or origin (origin depends on config.sortSearchByDistance)\n\n    const urlQueryParams = pickSearchParamsOnly(searchInURL, filterConfig, sortConfig); // Page transition might initially use values from previous search\n\n    const urlQueryString = stringify(urlQueryParams);\n    const paramsQueryString = stringify(pickSearchParamsOnly(searchParams, filterConfig, sortConfig));\n    const searchParamsAreInSync = urlQueryString === paramsQueryString;\n    const validQueryParams = validURLParamsForExtendedData(searchInURL, filterConfig);\n    const isWindowDefined = typeof window !== 'undefined';\n    const isMobileLayout = isWindowDefined && window.innerWidth < MODAL_BREAKPOINT;\n    const shouldShowSearchMap = !isMobileLayout || isMobileLayout && this.state.isSearchMapOpenOnMobile;\n    const isKeywordSearch = isMainSearchTypeKeywords(config);\n    const availableFilters = isKeywordSearch ? filterConfig.filter(f => f.type !== 'KeywordFilter') : filterConfig;\n    const primaryFilters = availableFilters.filter(f => f.group === 'primary');\n    const secondaryFilters = availableFilters.filter(f => f.group !== 'primary');\n    const hasSecondaryFilters = !!(secondaryFilters && secondaryFilters.length > 0); // Selected aka active filters\n\n    const selectedFilters = validFilterParams(validQueryParams, filterConfig);\n    const keysOfSelectedFilters = Object.keys(selectedFilters);\n    const selectedFiltersCountForMobile = isKeywordSearch ? keysOfSelectedFilters.filter(f => f !== 'keywords').length : keysOfSelectedFilters.length; // Selected aka active secondary filters\n\n    const selectedSecondaryFilters = hasSecondaryFilters ? validFilterParams(validQueryParams, secondaryFilters) : {};\n    const selectedSecondaryFiltersCount = Object.keys(selectedSecondaryFilters).length;\n    const isSecondaryFiltersOpen = !!hasSecondaryFilters && this.state.isSecondaryFiltersOpen;\n    const propsForSecondaryFiltersToggle = hasSecondaryFilters ? {\n      isSecondaryFiltersOpen: this.state.isSecondaryFiltersOpen,\n      toggleSecondaryFiltersOpen: isOpen => {\n        this.setState({\n          isSecondaryFiltersOpen: isOpen,\n          currentQueryParams: {}\n        });\n      },\n      selectedSecondaryFiltersCount\n    } : {};\n    const hasPaginationInfo = !!pagination && pagination.totalItems != null;\n    const totalItems = searchParamsAreInSync && hasPaginationInfo ? pagination.totalItems : 0;\n    const listingsAreLoaded = !searchInProgress && searchParamsAreInSync && hasPaginationInfo;\n\n    const sortBy = mode => {\n      var _sortConfig$conflicti;\n\n      const conflictingFilterActive = isAnyFilterActive(sortConfig.conflictingFilters, validQueryParams, filterConfig);\n      const mobileClassesMaybe = mode === 'mobile' ? {\n        rootClassName: css.sortBy,\n        menuLabelRootClassName: css.sortByMenuLabel\n      } : {\n        className: css.sortByDesktop\n      };\n      return sortConfig.active ? /*#__PURE__*/React.createElement(SortBy, Object.assign({}, mobileClassesMaybe, {\n        sort: validQueryParams[sortConfig.queryParamName],\n        isConflictingFilterActive: !!conflictingFilterActive,\n        hasConflictingFilters: !!(((_sortConfig$conflicti = sortConfig.conflictingFilters) === null || _sortConfig$conflicti === void 0 ? void 0 : _sortConfig$conflicti.length) > 0),\n        selectedFilters: selectedFilters,\n        onSelect: this.handleSortBy,\n        showAsPopup: true,\n        contentPlacementOffset: FILTER_DROPDOWN_OFFSET,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 9\n        }\n      })) : null;\n    };\n\n    const onMapIconClick = () => {\n      this.useLocationSearchBounds = true;\n      this.setState({\n        isSearchMapOpenOnMobile: true\n      });\n    };\n\n    const {\n      bounds,\n      origin\n    } = searchInURL || {};\n    const {\n      title,\n      description,\n      schema\n    } = createSearchResultSchema(listings, searchInURL || {}, intl);\n    const hasNoResult = listingsAreLoaded && totalItems === 0;\n    const hasSearchParams = ((_location$search = location.search) === null || _location$search === void 0 ? void 0 : _location$search.length) > 0;\n    const noResultsInfo = hasNoResult ? /*#__PURE__*/React.createElement(\"div\", {\n      className: css.noSearchResults,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"SearchPage.noResults\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 9\n      }\n    }), hasSearchParams ? /*#__PURE__*/React.createElement(\"button\", {\n      className: css.resetAllFiltersButton,\n      onClick: e => this.resetAll(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: 'SearchPage.resetAllFilters',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 13\n      }\n    })) : null) : null; // Set topbar class based on if a modal is open in\n    // a child component\n\n    const topbarClasses = this.state.isMobileModalOpen ? classNames(css.topbarBehindModal, css.topbar) : css.topbar; // N.B. openMobileMap button is sticky.\n    // For some reason, stickyness doesn't work on Safari, if the element is <button>\n\n    return /*#__PURE__*/React.createElement(Page, {\n      scrollingDisabled: scrollingDisabled,\n      description: description,\n      title: title,\n      schema: schema,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(TopbarContainer, {\n      className: topbarClasses,\n      currentPage: \"SearchPage\",\n      currentSearchParams: urlQueryParams,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: css.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: css.searchResultContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(SearchFiltersMobile, {\n      className: css.searchFiltersMobileMap,\n      urlQueryParams: validQueryParams,\n      sortByComponent: sortBy('mobile'),\n      listingsAreLoaded: listingsAreLoaded,\n      resultsCount: totalItems,\n      searchInProgress: searchInProgress,\n      searchListingsError: searchListingsError,\n      showAsModalMaxWidth: MODAL_BREAKPOINT,\n      onMapIconClick: onMapIconClick,\n      onManageDisableScrolling: onManageDisableScrolling,\n      onOpenModal: this.onOpenMobileModal,\n      onCloseModal: this.onCloseMobileModal,\n      resetAll: this.resetAll,\n      selectedFiltersCount: selectedFiltersCountForMobile,\n      noResultsInfo: noResultsInfo,\n      isMapVariant: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 13\n      }\n    }, availableFilters.map(config => {\n      return /*#__PURE__*/React.createElement(FilterComponent, {\n        key: `SearchFiltersMobile.${config.id}`,\n        idPrefix: \"SearchFiltersMobile\",\n        filterConfig: config,\n        urlQueryParams: validQueryParams,\n        initialValues: this.initialValues,\n        getHandleChangedValueFn: this.getHandleChangedValueFn,\n        liveEdit: true,\n        showAsPopup: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 19\n        }\n      });\n    })), /*#__PURE__*/React.createElement(MainPanelHeader, {\n      className: css.mainPanelMapVariant,\n      sortByComponent: sortBy('desktop'),\n      listingsAreLoaded: listingsAreLoaded,\n      resultsCount: totalItems,\n      searchInProgress: searchInProgress,\n      searchListingsError: searchListingsError,\n      noResultsInfo: noResultsInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(SearchFiltersPrimary, Object.assign({}, propsForSecondaryFiltersToggle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 15\n      }\n    }), primaryFilters.map(config => {\n      return /*#__PURE__*/React.createElement(FilterComponent, {\n        key: `SearchFiltersPrimary.${config.id}`,\n        idPrefix: \"SearchFiltersPrimary\",\n        filterConfig: config,\n        urlQueryParams: validQueryParams,\n        initialValues: this.initialValues,\n        getHandleChangedValueFn: this.getHandleChangedValueFn,\n        showAsPopup: true,\n        contentPlacementOffset: FILTER_DROPDOWN_OFFSET,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 21\n        }\n      });\n    }))), isSecondaryFiltersOpen ? /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames(css.searchFiltersPanel),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(SearchFiltersSecondary, {\n      urlQueryParams: validQueryParams,\n      listingsAreLoaded: listingsAreLoaded,\n      applyFilters: this.applyFilters,\n      cancelFilters: this.cancelFilters,\n      resetAll: this.resetAll,\n      onClosePanel: () => this.setState({\n        isSecondaryFiltersOpen: false\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 17\n      }\n    }, secondaryFilters.map(config => {\n      return /*#__PURE__*/React.createElement(FilterComponent, {\n        key: `SearchFiltersSecondary.${config.id}`,\n        idPrefix: \"SearchFiltersSecondary\",\n        filterConfig: config,\n        urlQueryParams: validQueryParams,\n        initialValues: this.initialValues,\n        getHandleChangedValueFn: this.getHandleChangedValueFn,\n        showAsPopup: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 23\n        }\n      });\n    }))) : /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames(css.listingsForMapVariant, {\n        [css.newSearchInProgress]: !listingsAreLoaded\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 15\n      }\n    }, searchListingsError ? /*#__PURE__*/React.createElement(\"h2\", {\n      className: css.error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"SearchPage.searchError\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 21\n      }\n    })) : null, /*#__PURE__*/React.createElement(SearchResultsPanel, {\n      className: css.searchListingsPanel,\n      listings: listings,\n      pagination: listingsAreLoaded ? pagination : null,\n      search: parse(location.search),\n      setActiveListing: onActivateListing,\n      isMapVariant: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 17\n      }\n    }))), /*#__PURE__*/React.createElement(ModalInMobile, {\n      className: css.mapPanel,\n      id: \"SearchPage.map\",\n      isModalOpenOnMobile: this.state.isSearchMapOpenOnMobile,\n      onClose: () => this.setState({\n        isSearchMapOpenOnMobile: false\n      }),\n      showAsModalMaxWidth: MODAL_BREAKPOINT,\n      onManageDisableScrolling: onManageDisableScrolling,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: css.mapWrapper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 13\n      }\n    }, shouldShowSearchMap ? /*#__PURE__*/React.createElement(SearchMap, {\n      reusableContainerClassName: css.map,\n      activeListingId: activeListingId,\n      bounds: bounds,\n      center: origin,\n      isSearchMapOpenOnMobile: this.state.isSearchMapOpenOnMobile,\n      location: location,\n      listings: mapListings || [],\n      onMapMoveEnd: this.onMapMoveEnd,\n      onCloseAsModal: () => {\n        onManageDisableScrolling('SearchPage.map', false);\n      },\n      messages: intl.messages,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 17\n      }\n    }) : null))));\n  }\n\n}\nSearchPageComponent.defaultProps = {\n  listings: [],\n  mapListings: [],\n  pagination: null,\n  searchListingsError: null,\n  searchParams: {},\n  tab: 'listings',\n  filterConfig: config.custom.filters,\n  sortConfig: config.custom.sortConfig,\n  activeListingId: null\n};\nSearchPageComponent.propTypes = {\n  listings: array,\n  mapListings: array,\n  onActivateListing: func.isRequired,\n  onManageDisableScrolling: func.isRequired,\n  onSearchMapListings: func.isRequired,\n  pagination: propTypes.pagination,\n  scrollingDisabled: bool.isRequired,\n  searchInProgress: bool.isRequired,\n  searchListingsError: propTypes.error,\n  searchParams: object,\n  tab: oneOf(['filters', 'listings', 'map']).isRequired,\n  filterConfig: propTypes.filterConfig,\n  sortConfig: propTypes.sortConfig,\n  // from withRouter\n  history: shape({\n    push: func.isRequired\n  }).isRequired,\n  location: shape({\n    search: string.isRequired\n  }).isRequired,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\n\nconst mapStateToProps = state => {\n  const {\n    currentPageResultIds,\n    pagination,\n    searchInProgress,\n    searchListingsError,\n    searchParams,\n    searchMapListingIds,\n    activeListingId\n  } = state.SearchPage;\n  const pageListings = getListingsById(state, currentPageResultIds);\n  const mapListings = getListingsById(state, unionWith(currentPageResultIds, searchMapListingIds, (id1, id2) => id1.uuid === id2.uuid));\n  return {\n    listings: pageListings,\n    mapListings,\n    pagination,\n    scrollingDisabled: isScrollingDisabled(state),\n    searchInProgress,\n    searchListingsError,\n    searchParams,\n    activeListingId\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onManageDisableScrolling: (componentId, disableScrolling) => dispatch(manageDisableScrolling(componentId, disableScrolling)),\n  onSearchMapListings: searchParams => dispatch(searchMapListings(searchParams)),\n  onActivateListing: listingId => dispatch(setActiveListing(listingId))\n}); // Note: it is important that the withRouter HOC is **outside** the\n// connect HOC, otherwise React Router won't rerender any Route\n// components since connect implements a shouldComponentUpdate\n// lifecycle hook.\n//\n// See: https://github.com/ReactTraining/react-router/issues/4671\n\n\nconst SearchPage = compose(withRouter, connect(mapStateToProps, mapDispatchToProps), injectIntl)(SearchPageComponent);\nexport default SearchPage;","map":{"version":3,"sources":["/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/containers/SearchPage/SearchPageWithMap.js"],"names":["React","Component","array","bool","func","oneOf","object","shape","string","connect","compose","withRouter","debounce","unionWith","omit","classNames","config","injectIntl","intlShape","FormattedMessage","routeConfiguration","createResourceLocatorString","pathByRouteName","isAnyFilterActive","isMainSearchTypeKeywords","isOriginInUse","parse","stringify","propTypes","getListingsById","manageDisableScrolling","isScrollingDisabled","ModalInMobile","Page","TopbarContainer","searchMapListings","setActiveListing","pickSearchParamsOnly","validURLParamsForExtendedData","validFilterParams","createSearchResultSchema","FilterComponent","SearchMap","MainPanelHeader","SearchFiltersSecondary","SearchFiltersPrimary","SearchFiltersMobile","SortBy","SearchResultsPanel","css","MODAL_BREAKPOINT","SEARCH_WITH_MAP_DEBOUNCE","FILTER_DROPDOWN_OFFSET","validUrlQueryParamsFromProps","props","location","filterConfig","mapSearch","page","searchInURL","search","latlng","latlngBounds","cleanSearchFromConflictingParams","searchParams","sortConfig","sortingFiltersActive","conflictingFilters","queryParamName","SearchPageComponent","constructor","state","isSearchMapOpenOnMobile","tab","isMobileModalOpen","currentQueryParams","isSecondaryFiltersOpen","searchMapListingsInProgress","onMapMoveEnd","bind","onOpenMobileModal","onCloseMobileModal","applyFilters","cancelFilters","resetAll","initialValues","getHandleChangedValueFn","handleSortBy","viewportBoundsChanged","data","viewportBounds","viewportCenter","routes","searchPagePath","currentPath","window","pathname","isSearchPage","history","address","bounds","rest","originMaybe","origin","push","setState","urlQueryParams","e","filterQueryParamNames","map","f","queryParamNames","queryParams","isLiveEdit","getInitialValue","paramName","currentQueryParam","hasQueryParamInState","isArray","Array","reduce","acc","useHistoryPush","updatedURLParams","updater","prevState","keywords","mergedQueryParams","keywordsMaybe","callback","urlParam","values","render","intl","listings","mapListings","onManageDisableScrolling","pagination","scrollingDisabled","searchInProgress","searchListingsError","activeListingId","onActivateListing","urlQueryString","paramsQueryString","searchParamsAreInSync","validQueryParams","isWindowDefined","isMobileLayout","innerWidth","shouldShowSearchMap","isKeywordSearch","availableFilters","filter","type","primaryFilters","group","secondaryFilters","hasSecondaryFilters","length","selectedFilters","keysOfSelectedFilters","Object","keys","selectedFiltersCountForMobile","selectedSecondaryFilters","selectedSecondaryFiltersCount","propsForSecondaryFiltersToggle","toggleSecondaryFiltersOpen","isOpen","hasPaginationInfo","totalItems","listingsAreLoaded","sortBy","mode","conflictingFilterActive","mobileClassesMaybe","rootClassName","menuLabelRootClassName","sortByMenuLabel","className","sortByDesktop","active","onMapIconClick","useLocationSearchBounds","title","description","schema","hasNoResult","hasSearchParams","noResultsInfo","noSearchResults","resetAllFiltersButton","topbarClasses","topbarBehindModal","topbar","container","searchResultContainer","searchFiltersMobileMap","id","mainPanelMapVariant","searchFiltersPanel","listingsForMapVariant","newSearchInProgress","error","searchListingsPanel","mapPanel","mapWrapper","messages","defaultProps","custom","filters","isRequired","onSearchMapListings","mapStateToProps","currentPageResultIds","searchMapListingIds","SearchPage","pageListings","id1","id2","uuid","mapDispatchToProps","dispatch","componentId","disableScrolling","listingId"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { array, bool, func, oneOf, object, shape, string } from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport debounce from 'lodash/debounce';\nimport unionWith from 'lodash/unionWith';\nimport omit from 'lodash/omit';\nimport classNames from 'classnames';\n\nimport config from '../../config';\nimport { injectIntl, intlShape, FormattedMessage } from '../../util/reactIntl';\nimport routeConfiguration from '../../routing/routeConfiguration';\nimport { createResourceLocatorString, pathByRouteName } from '../../util/routes';\nimport { isAnyFilterActive, isMainSearchTypeKeywords, isOriginInUse } from '../../util/search';\nimport { parse, stringify } from '../../util/urlHelpers';\nimport { propTypes } from '../../util/types';\nimport { getListingsById } from '../../ducks/marketplaceData.duck';\nimport { manageDisableScrolling, isScrollingDisabled } from '../../ducks/UI.duck';\n\nimport { ModalInMobile, Page } from '../../components';\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\n\nimport { searchMapListings, setActiveListing } from './SearchPage.duck';\nimport {\n  pickSearchParamsOnly,\n  validURLParamsForExtendedData,\n  validFilterParams,\n  createSearchResultSchema,\n} from './SearchPage.helpers';\n\nimport FilterComponent from './FilterComponent';\nimport SearchMap from './SearchMap/SearchMap';\nimport MainPanelHeader from './MainPanelHeader/MainPanelHeader';\nimport SearchFiltersSecondary from './SearchFiltersSecondary/SearchFiltersSecondary';\nimport SearchFiltersPrimary from './SearchFiltersPrimary/SearchFiltersPrimary';\nimport SearchFiltersMobile from './SearchFiltersMobile/SearchFiltersMobile';\nimport SortBy from './SortBy/SortBy';\nimport SearchResultsPanel from './SearchResultsPanel/SearchResultsPanel';\n\nimport css from './SearchPage.module.css';\n\nconst MODAL_BREAKPOINT = 768; // Search is in modal on mobile layout\nconst SEARCH_WITH_MAP_DEBOUNCE = 300; // Little bit of debounce before search is initiated.\n\n// Primary filters have their content in dropdown-popup.\n// With this offset we move the dropdown to the left a few pixels on desktop layout.\nconst FILTER_DROPDOWN_OFFSET = -14;\n\nconst validUrlQueryParamsFromProps = props => {\n  const { location, filterConfig } = props;\n  // eslint-disable-next-line no-unused-vars\n  const { mapSearch, page, ...searchInURL } = parse(location.search, {\n    latlng: ['origin'],\n    latlngBounds: ['bounds'],\n  });\n  // urlQueryParams doesn't contain page specific url params\n  // like mapSearch, page or origin (origin depends on config.sortSearchByDistance)\n  return validURLParamsForExtendedData(searchInURL, filterConfig);\n};\n\nconst cleanSearchFromConflictingParams = (searchParams, sortConfig, filterConfig) => {\n  // Single out filters that should disable SortBy when an active\n  // keyword search sorts the listings according to relevance.\n  // In those cases, sort parameter should be removed.\n  const sortingFiltersActive = isAnyFilterActive(\n    sortConfig.conflictingFilters,\n    searchParams,\n    filterConfig\n  );\n  return sortingFiltersActive\n    ? { ...searchParams, [sortConfig.queryParamName]: null }\n    : searchParams;\n};\n\nexport class SearchPageComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isSearchMapOpenOnMobile: props.tab === 'map',\n      isMobileModalOpen: false,\n      currentQueryParams: validUrlQueryParamsFromProps(props),\n      isSecondaryFiltersOpen: false,\n    };\n\n    this.searchMapListingsInProgress = false;\n\n    this.onMapMoveEnd = debounce(this.onMapMoveEnd.bind(this), SEARCH_WITH_MAP_DEBOUNCE);\n    this.onOpenMobileModal = this.onOpenMobileModal.bind(this);\n    this.onCloseMobileModal = this.onCloseMobileModal.bind(this);\n\n    // Filter functions\n    this.applyFilters = this.applyFilters.bind(this);\n    this.cancelFilters = this.cancelFilters.bind(this);\n    this.resetAll = this.resetAll.bind(this);\n    this.initialValues = this.initialValues.bind(this);\n    this.getHandleChangedValueFn = this.getHandleChangedValueFn.bind(this);\n\n    // SortBy\n    this.handleSortBy = this.handleSortBy.bind(this);\n  }\n\n  // Callback to determine if new search is needed\n  // when map is moved by user or viewport has changed\n  onMapMoveEnd(viewportBoundsChanged, data) {\n    const { viewportBounds, viewportCenter } = data;\n\n    const routes = routeConfiguration();\n    const searchPagePath = pathByRouteName('SearchPage', routes);\n    const currentPath =\n      typeof window !== 'undefined' && window.location && window.location.pathname;\n\n    // When using the ReusableMapContainer onMapMoveEnd can fire from other pages than SearchPage too\n    const isSearchPage = currentPath === searchPagePath;\n\n    // If mapSearch url param is given\n    // or original location search is rendered once,\n    // we start to react to \"mapmoveend\" events by generating new searches\n    // (i.e. 'moveend' event in Mapbox and 'bounds_changed' in Google Maps)\n    if (viewportBoundsChanged && isSearchPage) {\n      const { history, location, filterConfig } = this.props;\n\n      // parse query parameters, including a custom attribute named category\n      const { address, bounds, mapSearch, ...rest } = parse(location.search, {\n        latlng: ['origin'],\n        latlngBounds: ['bounds'],\n      });\n\n      //const viewportMapCenter = SearchMap.getMapCenter(map);\n      const originMaybe = isOriginInUse(config) ? { origin: viewportCenter } : {};\n\n      const searchParams = {\n        address,\n        ...originMaybe,\n        bounds: viewportBounds,\n        mapSearch: true,\n        ...validFilterParams(rest, filterConfig),\n      };\n\n      history.push(createResourceLocatorString('SearchPage', routes, {}, searchParams));\n    }\n  }\n\n  // Invoked when a modal is opened from a child component,\n  // for example when a filter modal is opened in mobile view\n  onOpenMobileModal() {\n    this.setState({ isMobileModalOpen: true });\n  }\n\n  // Invoked when a modal is closed from a child component,\n  // for example when a filter modal is opened in mobile view\n  onCloseMobileModal() {\n    this.setState({ isMobileModalOpen: false });\n  }\n\n  // Apply the filters by redirecting to SearchPage with new filters.\n  applyFilters() {\n    const { history, sortConfig, filterConfig } = this.props;\n    const urlQueryParams = validUrlQueryParamsFromProps(this.props);\n    const searchParams = { ...urlQueryParams, ...this.state.currentQueryParams };\n    const search = cleanSearchFromConflictingParams(searchParams, sortConfig, filterConfig);\n\n    history.push(createResourceLocatorString('SearchPage', routeConfiguration(), {}, search));\n  }\n\n  // Close the filters by clicking cancel, revert to the initial params\n  cancelFilters() {\n    this.setState({ currentQueryParams: {} });\n  }\n\n  // Reset all filter query parameters\n  resetAll(e) {\n    const { history, filterConfig } = this.props;\n    const urlQueryParams = validUrlQueryParamsFromProps(this.props);\n    const filterQueryParamNames = filterConfig.map(f => f.queryParamNames);\n\n    // Reset state\n    this.setState({ currentQueryParams: {} });\n\n    // Reset routing params\n    const queryParams = omit(urlQueryParams, filterQueryParamNames);\n    history.push(createResourceLocatorString('SearchPage', routeConfiguration(), {}, queryParams));\n  }\n\n  initialValues(queryParamNames, isLiveEdit) {\n    const urlQueryParams = validUrlQueryParamsFromProps(this.props);\n\n    // Query parameters that are in state (user might have not yet clicked \"Apply\")\n    const currentQueryParams = this.state.currentQueryParams;\n\n    // Get initial value for a given parameter from state if its there.\n    const getInitialValue = paramName => {\n      const currentQueryParam = currentQueryParams[paramName];\n      const hasQueryParamInState = typeof currentQueryParam !== 'undefined';\n      return hasQueryParamInState && !isLiveEdit ? currentQueryParam : urlQueryParams[paramName];\n    };\n\n    // Return all the initial values related to given queryParamNames\n    // InitialValues for \"amenities\" filter could be\n    // { amenities: \"has_any:towel,jacuzzi\" }\n    const isArray = Array.isArray(queryParamNames);\n    return isArray\n      ? queryParamNames.reduce((acc, paramName) => {\n          return { ...acc, [paramName]: getInitialValue(paramName) };\n        }, {})\n      : {};\n  }\n\n  getHandleChangedValueFn(useHistoryPush) {\n    const { history, sortConfig, filterConfig } = this.props;\n    const urlQueryParams = validUrlQueryParamsFromProps(this.props);\n\n    return updatedURLParams => {\n      const updater = prevState => {\n        const { address, bounds, keywords } = urlQueryParams;\n        const mergedQueryParams = { ...urlQueryParams, ...prevState.currentQueryParams };\n\n        // Address and bounds are handled outside of MainPanel.\n        // I.e. TopbarSearchForm && search by moving the map.\n        // We should always trust urlQueryParams with those.\n        // The same applies to keywords, if the main search type is keyword search.\n        const keywordsMaybe = isMainSearchTypeKeywords(config) ? { keywords } : {};\n        return {\n          currentQueryParams: {\n            ...mergedQueryParams,\n            ...updatedURLParams,\n            ...keywordsMaybe,\n            address,\n            bounds,\n          },\n        };\n      };\n\n      const callback = () => {\n        if (useHistoryPush) {\n          const searchParams = this.state.currentQueryParams;\n          const search = cleanSearchFromConflictingParams(searchParams, sortConfig, filterConfig);\n          history.push(createResourceLocatorString('SearchPage', routeConfiguration(), {}, search));\n        }\n      };\n\n      this.setState(updater, callback);\n    };\n  }\n\n  handleSortBy(urlParam, values) {\n    const { history } = this.props;\n    const urlQueryParams = validUrlQueryParamsFromProps(this.props);\n\n    const queryParams = values\n      ? { ...urlQueryParams, [urlParam]: values }\n      : omit(urlQueryParams, urlParam);\n\n    history.push(createResourceLocatorString('SearchPage', routeConfiguration(), {}, queryParams));\n  }\n\n  render() {\n    const {\n      intl,\n      listings,\n      filterConfig,\n      sortConfig,\n      location,\n      mapListings,\n      onManageDisableScrolling,\n      pagination,\n      scrollingDisabled,\n      searchInProgress,\n      searchListingsError,\n      searchParams,\n      activeListingId,\n      onActivateListing,\n    } = this.props;\n    // eslint-disable-next-line no-unused-vars\n    const { mapSearch, page, ...searchInURL } = parse(location.search, {\n      latlng: ['origin'],\n      latlngBounds: ['bounds'],\n    });\n\n    // urlQueryParams doesn't contain page specific url params\n    // like mapSearch, page or origin (origin depends on config.sortSearchByDistance)\n    const urlQueryParams = pickSearchParamsOnly(searchInURL, filterConfig, sortConfig);\n\n    // Page transition might initially use values from previous search\n    const urlQueryString = stringify(urlQueryParams);\n    const paramsQueryString = stringify(\n      pickSearchParamsOnly(searchParams, filterConfig, sortConfig)\n    );\n    const searchParamsAreInSync = urlQueryString === paramsQueryString;\n\n    const validQueryParams = validURLParamsForExtendedData(searchInURL, filterConfig);\n\n    const isWindowDefined = typeof window !== 'undefined';\n    const isMobileLayout = isWindowDefined && window.innerWidth < MODAL_BREAKPOINT;\n    const shouldShowSearchMap =\n      !isMobileLayout || (isMobileLayout && this.state.isSearchMapOpenOnMobile);\n\n    const isKeywordSearch = isMainSearchTypeKeywords(config);\n    const availableFilters = isKeywordSearch\n      ? filterConfig.filter(f => f.type !== 'KeywordFilter')\n      : filterConfig;\n\n    const primaryFilters = availableFilters.filter(f => f.group === 'primary');\n    const secondaryFilters = availableFilters.filter(f => f.group !== 'primary');\n    const hasSecondaryFilters = !!(secondaryFilters && secondaryFilters.length > 0);\n\n    // Selected aka active filters\n    const selectedFilters = validFilterParams(validQueryParams, filterConfig);\n    const keysOfSelectedFilters = Object.keys(selectedFilters);\n    const selectedFiltersCountForMobile = isKeywordSearch\n      ? keysOfSelectedFilters.filter(f => f !== 'keywords').length\n      : keysOfSelectedFilters.length;\n\n    // Selected aka active secondary filters\n    const selectedSecondaryFilters = hasSecondaryFilters\n      ? validFilterParams(validQueryParams, secondaryFilters)\n      : {};\n    const selectedSecondaryFiltersCount = Object.keys(selectedSecondaryFilters).length;\n\n    const isSecondaryFiltersOpen = !!hasSecondaryFilters && this.state.isSecondaryFiltersOpen;\n    const propsForSecondaryFiltersToggle = hasSecondaryFilters\n      ? {\n          isSecondaryFiltersOpen: this.state.isSecondaryFiltersOpen,\n          toggleSecondaryFiltersOpen: isOpen => {\n            this.setState({ isSecondaryFiltersOpen: isOpen, currentQueryParams: {} });\n          },\n          selectedSecondaryFiltersCount,\n        }\n      : {};\n\n    const hasPaginationInfo = !!pagination && pagination.totalItems != null;\n    const totalItems = searchParamsAreInSync && hasPaginationInfo ? pagination.totalItems : 0;\n    const listingsAreLoaded = !searchInProgress && searchParamsAreInSync && hasPaginationInfo;\n\n    const sortBy = mode => {\n      const conflictingFilterActive = isAnyFilterActive(\n        sortConfig.conflictingFilters,\n        validQueryParams,\n        filterConfig\n      );\n\n      const mobileClassesMaybe =\n        mode === 'mobile'\n          ? {\n              rootClassName: css.sortBy,\n              menuLabelRootClassName: css.sortByMenuLabel,\n            }\n          : { className: css.sortByDesktop };\n      return sortConfig.active ? (\n        <SortBy\n          {...mobileClassesMaybe}\n          sort={validQueryParams[sortConfig.queryParamName]}\n          isConflictingFilterActive={!!conflictingFilterActive}\n          hasConflictingFilters={!!(sortConfig.conflictingFilters?.length > 0)}\n          selectedFilters={selectedFilters}\n          onSelect={this.handleSortBy}\n          showAsPopup\n          contentPlacementOffset={FILTER_DROPDOWN_OFFSET}\n        />\n      ) : null;\n    };\n\n    const onMapIconClick = () => {\n      this.useLocationSearchBounds = true;\n      this.setState({ isSearchMapOpenOnMobile: true });\n    };\n\n    const { bounds, origin } = searchInURL || {};\n    const { title, description, schema } = createSearchResultSchema(\n      listings,\n      searchInURL || {},\n      intl\n    );\n\n    const hasNoResult = listingsAreLoaded && totalItems === 0;\n    const hasSearchParams = location.search?.length > 0;\n    const noResultsInfo = hasNoResult ? (\n      <div className={css.noSearchResults}>\n        <FormattedMessage id=\"SearchPage.noResults\" />\n        <br />\n        {hasSearchParams ? (\n          <button className={css.resetAllFiltersButton} onClick={e => this.resetAll(e)}>\n            <FormattedMessage id={'SearchPage.resetAllFilters'} />\n          </button>\n        ) : null}\n      </div>\n    ) : null;\n\n    // Set topbar class based on if a modal is open in\n    // a child component\n    const topbarClasses = this.state.isMobileModalOpen\n      ? classNames(css.topbarBehindModal, css.topbar)\n      : css.topbar;\n\n    // N.B. openMobileMap button is sticky.\n    // For some reason, stickyness doesn't work on Safari, if the element is <button>\n    return (\n      <Page\n        scrollingDisabled={scrollingDisabled}\n        description={description}\n        title={title}\n        schema={schema}\n      >\n        <TopbarContainer\n          className={topbarClasses}\n          currentPage=\"SearchPage\"\n          currentSearchParams={urlQueryParams}\n        />\n        <div className={css.container}>\n          <div className={css.searchResultContainer}>\n            <SearchFiltersMobile\n              className={css.searchFiltersMobileMap}\n              urlQueryParams={validQueryParams}\n              sortByComponent={sortBy('mobile')}\n              listingsAreLoaded={listingsAreLoaded}\n              resultsCount={totalItems}\n              searchInProgress={searchInProgress}\n              searchListingsError={searchListingsError}\n              showAsModalMaxWidth={MODAL_BREAKPOINT}\n              onMapIconClick={onMapIconClick}\n              onManageDisableScrolling={onManageDisableScrolling}\n              onOpenModal={this.onOpenMobileModal}\n              onCloseModal={this.onCloseMobileModal}\n              resetAll={this.resetAll}\n              selectedFiltersCount={selectedFiltersCountForMobile}\n              noResultsInfo={noResultsInfo}\n              isMapVariant\n            >\n              {availableFilters.map(config => {\n                return (\n                  <FilterComponent\n                    key={`SearchFiltersMobile.${config.id}`}\n                    idPrefix=\"SearchFiltersMobile\"\n                    filterConfig={config}\n                    urlQueryParams={validQueryParams}\n                    initialValues={this.initialValues}\n                    getHandleChangedValueFn={this.getHandleChangedValueFn}\n                    liveEdit\n                    showAsPopup={false}\n                  />\n                );\n              })}\n            </SearchFiltersMobile>\n            <MainPanelHeader\n              className={css.mainPanelMapVariant}\n              sortByComponent={sortBy('desktop')}\n              listingsAreLoaded={listingsAreLoaded}\n              resultsCount={totalItems}\n              searchInProgress={searchInProgress}\n              searchListingsError={searchListingsError}\n              noResultsInfo={noResultsInfo}\n            >\n              <SearchFiltersPrimary {...propsForSecondaryFiltersToggle}>\n                {primaryFilters.map(config => {\n                  return (\n                    <FilterComponent\n                      key={`SearchFiltersPrimary.${config.id}`}\n                      idPrefix=\"SearchFiltersPrimary\"\n                      filterConfig={config}\n                      urlQueryParams={validQueryParams}\n                      initialValues={this.initialValues}\n                      getHandleChangedValueFn={this.getHandleChangedValueFn}\n                      showAsPopup\n                      contentPlacementOffset={FILTER_DROPDOWN_OFFSET}\n                    />\n                  );\n                })}\n              </SearchFiltersPrimary>\n            </MainPanelHeader>\n            {isSecondaryFiltersOpen ? (\n              <div className={classNames(css.searchFiltersPanel)}>\n                <SearchFiltersSecondary\n                  urlQueryParams={validQueryParams}\n                  listingsAreLoaded={listingsAreLoaded}\n                  applyFilters={this.applyFilters}\n                  cancelFilters={this.cancelFilters}\n                  resetAll={this.resetAll}\n                  onClosePanel={() => this.setState({ isSecondaryFiltersOpen: false })}\n                >\n                  {secondaryFilters.map(config => {\n                    return (\n                      <FilterComponent\n                        key={`SearchFiltersSecondary.${config.id}`}\n                        idPrefix=\"SearchFiltersSecondary\"\n                        filterConfig={config}\n                        urlQueryParams={validQueryParams}\n                        initialValues={this.initialValues}\n                        getHandleChangedValueFn={this.getHandleChangedValueFn}\n                        showAsPopup={false}\n                      />\n                    );\n                  })}\n                </SearchFiltersSecondary>\n              </div>\n            ) : (\n              <div\n                className={classNames(css.listingsForMapVariant, {\n                  [css.newSearchInProgress]: !listingsAreLoaded,\n                })}\n              >\n                {searchListingsError ? (\n                  <h2 className={css.error}>\n                    <FormattedMessage id=\"SearchPage.searchError\" />\n                  </h2>\n                ) : null}\n                <SearchResultsPanel\n                  className={css.searchListingsPanel}\n                  listings={listings}\n                  pagination={listingsAreLoaded ? pagination : null}\n                  search={parse(location.search)}\n                  setActiveListing={onActivateListing}\n                  isMapVariant\n                />\n              </div>\n            )}\n          </div>\n          <ModalInMobile\n            className={css.mapPanel}\n            id=\"SearchPage.map\"\n            isModalOpenOnMobile={this.state.isSearchMapOpenOnMobile}\n            onClose={() => this.setState({ isSearchMapOpenOnMobile: false })}\n            showAsModalMaxWidth={MODAL_BREAKPOINT}\n            onManageDisableScrolling={onManageDisableScrolling}\n          >\n            <div className={css.mapWrapper}>\n              {shouldShowSearchMap ? (\n                <SearchMap\n                  reusableContainerClassName={css.map}\n                  activeListingId={activeListingId}\n                  bounds={bounds}\n                  center={origin}\n                  isSearchMapOpenOnMobile={this.state.isSearchMapOpenOnMobile}\n                  location={location}\n                  listings={mapListings || []}\n                  onMapMoveEnd={this.onMapMoveEnd}\n                  onCloseAsModal={() => {\n                    onManageDisableScrolling('SearchPage.map', false);\n                  }}\n                  messages={intl.messages}\n                />\n              ) : null}\n            </div>\n          </ModalInMobile>\n        </div>\n      </Page>\n    );\n  }\n}\n\nSearchPageComponent.defaultProps = {\n  listings: [],\n  mapListings: [],\n  pagination: null,\n  searchListingsError: null,\n  searchParams: {},\n  tab: 'listings',\n  filterConfig: config.custom.filters,\n  sortConfig: config.custom.sortConfig,\n  activeListingId: null,\n};\n\nSearchPageComponent.propTypes = {\n  listings: array,\n  mapListings: array,\n  onActivateListing: func.isRequired,\n  onManageDisableScrolling: func.isRequired,\n  onSearchMapListings: func.isRequired,\n  pagination: propTypes.pagination,\n  scrollingDisabled: bool.isRequired,\n  searchInProgress: bool.isRequired,\n  searchListingsError: propTypes.error,\n  searchParams: object,\n  tab: oneOf(['filters', 'listings', 'map']).isRequired,\n  filterConfig: propTypes.filterConfig,\n  sortConfig: propTypes.sortConfig,\n\n  // from withRouter\n  history: shape({\n    push: func.isRequired,\n  }).isRequired,\n  location: shape({\n    search: string.isRequired,\n  }).isRequired,\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst mapStateToProps = state => {\n  const {\n    currentPageResultIds,\n    pagination,\n    searchInProgress,\n    searchListingsError,\n    searchParams,\n    searchMapListingIds,\n    activeListingId,\n  } = state.SearchPage;\n  const pageListings = getListingsById(state, currentPageResultIds);\n  const mapListings = getListingsById(\n    state,\n    unionWith(currentPageResultIds, searchMapListingIds, (id1, id2) => id1.uuid === id2.uuid)\n  );\n\n  return {\n    listings: pageListings,\n    mapListings,\n    pagination,\n    scrollingDisabled: isScrollingDisabled(state),\n    searchInProgress,\n    searchListingsError,\n    searchParams,\n    activeListingId,\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onManageDisableScrolling: (componentId, disableScrolling) =>\n    dispatch(manageDisableScrolling(componentId, disableScrolling)),\n  onSearchMapListings: searchParams => dispatch(searchMapListings(searchParams)),\n  onActivateListing: listingId => dispatch(setActiveListing(listingId)),\n});\n\n// Note: it is important that the withRouter HOC is **outside** the\n// connect HOC, otherwise React Router won't rerender any Route\n// components since connect implements a shouldComponentUpdate\n// lifecycle hook.\n//\n// See: https://github.com/ReactTraining/react-router/issues/4671\nconst SearchPage = compose(\n  withRouter,\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  ),\n  injectIntl\n)(SearchPageComponent);\n\nexport default SearchPage;\n"]},"metadata":{},"sourceType":"module"}