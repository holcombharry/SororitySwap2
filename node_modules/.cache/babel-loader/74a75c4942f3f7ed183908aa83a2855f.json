{"ast":null,"code":"var _jsxFileName = \"/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/containers/SearchPage/SelectMultipleFilter/SelectMultipleFilter.js\";\nimport React, { Component } from 'react';\nimport { array, arrayOf, func, node, number, object, string } from 'prop-types';\nimport classNames from 'classnames';\nimport { injectIntl, intlShape } from '../../../util/reactIntl';\nimport { parseSelectFilterOptions } from '../../../util/search';\nimport { FieldCheckbox } from '../../../components';\nimport FilterPlain from '../FilterPlain/FilterPlain';\nimport FilterPopup from '../FilterPopup/FilterPopup';\nimport css from './SelectMultipleFilter.module.css'; // SelectMultipleFilter doesn't need array mutators since it doesn't require validation.\n// TODO: Live edit didn't work with FieldCheckboxGroup\n//       There's a mutation problem: formstate.dirty is not reliable with it.\n\nconst GroupOfFieldCheckboxes = props => {\n  const {\n    id,\n    className,\n    name,\n    options\n  } = props;\n  return /*#__PURE__*/React.createElement(\"fieldset\", {\n    className: className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: css.list,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, options.map((option, index) => {\n    const fieldId = `${id}.${option.key}`;\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: fieldId,\n      className: css.item,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FieldCheckbox, {\n      id: fieldId,\n      name: name,\n      label: option.label,\n      value: option.key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 15\n      }\n    }));\n  })));\n};\n\n_c = GroupOfFieldCheckboxes;\n\nconst getQueryParamName = queryParamNames => {\n  return Array.isArray(queryParamNames) ? queryParamNames[0] : queryParamNames;\n}; // Format URI component's query param: { pub_key: 'has_all:a,b,c' }\n\n\nconst format = (selectedOptions, queryParamName, schemaType, searchMode) => {\n  const hasOptionsSelected = selectedOptions && selectedOptions.length > 0;\n  const mode = schemaType === 'multi-enum' && searchMode ? `${searchMode}:` : '';\n  const value = hasOptionsSelected ? `${mode}${selectedOptions.join(',')}` : null;\n  return {\n    [queryParamName]: value\n  };\n};\n\nclass SelectMultipleFilter extends Component {\n  constructor(props) {\n    super(props);\n    this.filter = null;\n    this.filterContent = null;\n    this.positionStyleForContent = this.positionStyleForContent.bind(this);\n  }\n\n  positionStyleForContent() {\n    if (this.filter && this.filterContent) {\n      // Render the filter content to the right from the menu\n      // unless there's no space in which case it is rendered\n      // to the left\n      const distanceToRight = window.innerWidth - this.filter.getBoundingClientRect().right;\n      const labelWidth = this.filter.offsetWidth;\n      const contentWidth = this.filterContent.offsetWidth;\n      const contentWidthBiggerThanLabel = contentWidth - labelWidth;\n      const renderToRight = distanceToRight > contentWidthBiggerThanLabel;\n      const contentPlacementOffset = this.props.contentPlacementOffset;\n      const offset = renderToRight ? {\n        left: contentPlacementOffset\n      } : {\n        right: contentPlacementOffset\n      }; // set a min-width if the content is narrower than the label\n\n      const minWidth = contentWidth < labelWidth ? {\n        minWidth: labelWidth\n      } : null;\n      return { ...offset,\n        ...minWidth\n      };\n    }\n\n    return {};\n  }\n\n  render() {\n    const {\n      rootClassName,\n      className,\n      id,\n      name,\n      label,\n      options,\n      initialValues,\n      contentPlacementOffset,\n      onSubmit,\n      queryParamNames,\n      schemaType,\n      searchMode,\n      intl,\n      showAsPopup,\n      ...rest\n    } = this.props;\n    const classes = classNames(rootClassName || css.root, className);\n    const queryParamName = getQueryParamName(queryParamNames);\n    const hasInitialValues = !!initialValues && !!initialValues[queryParamName]; // Parse options from param strings like \"has_all:a,b,c\" or \"a,b,c\"\n\n    const selectedOptions = hasInitialValues ? parseSelectFilterOptions(initialValues[queryParamName]) : [];\n    const labelForPopup = hasInitialValues ? intl.formatMessage({\n      id: 'SelectMultipleFilter.labelSelected'\n    }, {\n      labelText: label,\n      count: selectedOptions.length\n    }) : label;\n    const labelSelectionForPlain = hasInitialValues ? intl.formatMessage({\n      id: 'SelectMultipleFilterPlainForm.labelSelected'\n    }, {\n      count: selectedOptions.length\n    }) : '';\n    const contentStyle = this.positionStyleForContent(); // pass the initial values with the name key so that\n    // they can be passed to the correct field\n\n    const namedInitialValues = {\n      [name]: selectedOptions\n    };\n\n    const handleSubmit = values => {\n      const usedValue = values ? values[name] : values;\n      onSubmit(format(usedValue, queryParamName, schemaType, searchMode));\n    };\n\n    return showAsPopup ? /*#__PURE__*/React.createElement(FilterPopup, Object.assign({\n      className: classes,\n      rootClassName: rootClassName,\n      popupClassName: css.popupSize,\n      name: name,\n      label: labelForPopup,\n      isSelected: hasInitialValues,\n      id: `${id}.popup`,\n      showAsPopup: true,\n      contentPlacementOffset: contentPlacementOffset,\n      onSubmit: handleSubmit,\n      initialValues: namedInitialValues,\n      keepDirtyOnReinitialize: true\n    }, rest, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(GroupOfFieldCheckboxes, {\n      className: css.fieldGroup,\n      name: name,\n      id: `${id}-checkbox-group`,\n      options: options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }\n    })) : /*#__PURE__*/React.createElement(FilterPlain, Object.assign({\n      className: className,\n      rootClassName: rootClassName,\n      label: label,\n      labelSelection: labelSelectionForPlain,\n      isSelected: hasInitialValues,\n      id: `${id}.plain`,\n      liveEdit: true,\n      contentPlacementOffset: contentStyle,\n      onSubmit: handleSubmit,\n      initialValues: namedInitialValues\n    }, rest, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(GroupOfFieldCheckboxes, {\n      className: css.fieldGroupPlain,\n      name: name,\n      id: `${id}-checkbox-group`,\n      options: options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nSelectMultipleFilter.defaultProps = {\n  rootClassName: null,\n  className: null,\n  initialValues: null,\n  contentPlacementOffset: 0\n};\nSelectMultipleFilter.propTypes = {\n  rootClassName: string,\n  className: string,\n  id: string.isRequired,\n  name: string.isRequired,\n  queryParamNames: arrayOf(string).isRequired,\n  label: node.isRequired,\n  onSubmit: func.isRequired,\n  options: array.isRequired,\n  initialValues: object,\n  contentPlacementOffset: number,\n  // form injectIntl\n  intl: intlShape.isRequired\n};\nexport default _c2 = injectIntl(SelectMultipleFilter);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GroupOfFieldCheckboxes\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/containers/SearchPage/SelectMultipleFilter/SelectMultipleFilter.js"],"names":["React","Component","array","arrayOf","func","node","number","object","string","classNames","injectIntl","intlShape","parseSelectFilterOptions","FieldCheckbox","FilterPlain","FilterPopup","css","GroupOfFieldCheckboxes","props","id","className","name","options","list","map","option","index","fieldId","key","item","label","getQueryParamName","queryParamNames","Array","isArray","format","selectedOptions","queryParamName","schemaType","searchMode","hasOptionsSelected","length","mode","value","join","SelectMultipleFilter","constructor","filter","filterContent","positionStyleForContent","bind","distanceToRight","window","innerWidth","getBoundingClientRect","right","labelWidth","offsetWidth","contentWidth","contentWidthBiggerThanLabel","renderToRight","contentPlacementOffset","offset","left","minWidth","render","rootClassName","initialValues","onSubmit","intl","showAsPopup","rest","classes","root","hasInitialValues","labelForPopup","formatMessage","labelText","count","labelSelectionForPlain","contentStyle","namedInitialValues","handleSubmit","values","usedValue","popupSize","fieldGroup","fieldGroupPlain","defaultProps","propTypes","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,EAAgBC,OAAhB,EAAyBC,IAAzB,EAA+BC,IAA/B,EAAqCC,MAArC,EAA6CC,MAA7C,EAAqDC,MAArD,QAAmE,YAAnE;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,yBAAtC;AACA,SAASC,wBAAT,QAAyC,sBAAzC;AAEA,SAASC,aAAT,QAA8B,qBAA9B;AAEA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AAEA,OAAOC,GAAP,MAAgB,mCAAhB,C,CAEA;AACA;AACA;;AACA,MAAMC,sBAAsB,GAAGC,KAAK,IAAI;AACtC,QAAM;AAAEC,IAAAA,EAAF;AAAMC,IAAAA,SAAN;AAAiBC,IAAAA,IAAjB;AAAuBC,IAAAA;AAAvB,MAAmCJ,KAAzC;AACA,sBACE;AAAU,IAAA,SAAS,EAAEE,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAEJ,GAAG,CAACO,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,OAAO,CAACE,GAAR,CAAY,CAACC,MAAD,EAASC,KAAT,KAAmB;AAC9B,UAAMC,OAAO,GAAI,GAAER,EAAG,IAAGM,MAAM,CAACG,GAAI,EAApC;AACA,wBACE;AAAI,MAAA,GAAG,EAAED,OAAT;AAAkB,MAAA,SAAS,EAAEX,GAAG,CAACa,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,aAAD;AAAe,MAAA,EAAE,EAAEF,OAAnB;AAA4B,MAAA,IAAI,EAAEN,IAAlC;AAAwC,MAAA,KAAK,EAAEI,MAAM,CAACK,KAAtD;AAA6D,MAAA,KAAK,EAAEL,MAAM,CAACG,GAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD,GAPA,CADH,CADF,CADF;AAcD,CAhBD;;KAAMX,sB;;AAkBN,MAAMc,iBAAiB,GAAGC,eAAe,IAAI;AAC3C,SAAOC,KAAK,CAACC,OAAN,CAAcF,eAAd,IAAiCA,eAAe,CAAC,CAAD,CAAhD,GAAsDA,eAA7D;AACD,CAFD,C,CAIA;;;AACA,MAAMG,MAAM,GAAG,CAACC,eAAD,EAAkBC,cAAlB,EAAkCC,UAAlC,EAA8CC,UAA9C,KAA6D;AAC1E,QAAMC,kBAAkB,GAAGJ,eAAe,IAAIA,eAAe,CAACK,MAAhB,GAAyB,CAAvE;AACA,QAAMC,IAAI,GAAGJ,UAAU,KAAK,YAAf,IAA+BC,UAA/B,GAA6C,GAAEA,UAAW,GAA1D,GAA+D,EAA5E;AACA,QAAMI,KAAK,GAAGH,kBAAkB,GAAI,GAAEE,IAAK,GAAEN,eAAe,CAACQ,IAAhB,CAAqB,GAArB,CAA0B,EAAvC,GAA2C,IAA3E;AACA,SAAO;AAAE,KAACP,cAAD,GAAkBM;AAApB,GAAP;AACD,CALD;;AAOA,MAAME,oBAAN,SAAmC5C,SAAnC,CAA6C;AAC3C6C,EAAAA,WAAW,CAAC5B,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAK6B,MAAL,GAAc,IAAd;AACA,SAAKC,aAAL,GAAqB,IAArB;AAEA,SAAKC,uBAAL,GAA+B,KAAKA,uBAAL,CAA6BC,IAA7B,CAAkC,IAAlC,CAA/B;AACD;;AAEDD,EAAAA,uBAAuB,GAAG;AACxB,QAAI,KAAKF,MAAL,IAAe,KAAKC,aAAxB,EAAuC;AACrC;AACA;AACA;AACA,YAAMG,eAAe,GAAGC,MAAM,CAACC,UAAP,GAAoB,KAAKN,MAAL,CAAYO,qBAAZ,GAAoCC,KAAhF;AACA,YAAMC,UAAU,GAAG,KAAKT,MAAL,CAAYU,WAA/B;AACA,YAAMC,YAAY,GAAG,KAAKV,aAAL,CAAmBS,WAAxC;AACA,YAAME,2BAA2B,GAAGD,YAAY,GAAGF,UAAnD;AACA,YAAMI,aAAa,GAAGT,eAAe,GAAGQ,2BAAxC;AACA,YAAME,sBAAsB,GAAG,KAAK3C,KAAL,CAAW2C,sBAA1C;AAEA,YAAMC,MAAM,GAAGF,aAAa,GACxB;AAAEG,QAAAA,IAAI,EAAEF;AAAR,OADwB,GAExB;AAAEN,QAAAA,KAAK,EAAEM;AAAT,OAFJ,CAXqC,CAcrC;;AACA,YAAMG,QAAQ,GAAGN,YAAY,GAAGF,UAAf,GAA4B;AAAEQ,QAAAA,QAAQ,EAAER;AAAZ,OAA5B,GAAuD,IAAxE;AAEA,aAAO,EAAE,GAAGM,MAAL;AAAa,WAAGE;AAAhB,OAAP;AACD;;AACD,WAAO,EAAP;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAM;AACJC,MAAAA,aADI;AAEJ9C,MAAAA,SAFI;AAGJD,MAAAA,EAHI;AAIJE,MAAAA,IAJI;AAKJS,MAAAA,KALI;AAMJR,MAAAA,OANI;AAOJ6C,MAAAA,aAPI;AAQJN,MAAAA,sBARI;AASJO,MAAAA,QATI;AAUJpC,MAAAA,eAVI;AAWJM,MAAAA,UAXI;AAYJC,MAAAA,UAZI;AAaJ8B,MAAAA,IAbI;AAcJC,MAAAA,WAdI;AAeJ,SAAGC;AAfC,QAgBF,KAAKrD,KAhBT;AAkBA,UAAMsD,OAAO,GAAG/D,UAAU,CAACyD,aAAa,IAAIlD,GAAG,CAACyD,IAAtB,EAA4BrD,SAA5B,CAA1B;AAEA,UAAMiB,cAAc,GAAGN,iBAAiB,CAACC,eAAD,CAAxC;AACA,UAAM0C,gBAAgB,GAAG,CAAC,CAACP,aAAF,IAAmB,CAAC,CAACA,aAAa,CAAC9B,cAAD,CAA3D,CAtBO,CAuBP;;AACA,UAAMD,eAAe,GAAGsC,gBAAgB,GACpC9D,wBAAwB,CAACuD,aAAa,CAAC9B,cAAD,CAAd,CADY,GAEpC,EAFJ;AAIA,UAAMsC,aAAa,GAAGD,gBAAgB,GAClCL,IAAI,CAACO,aAAL,CACE;AAAEzD,MAAAA,EAAE,EAAE;AAAN,KADF,EAEE;AAAE0D,MAAAA,SAAS,EAAE/C,KAAb;AAAoBgD,MAAAA,KAAK,EAAE1C,eAAe,CAACK;AAA3C,KAFF,CADkC,GAKlCX,KALJ;AAOA,UAAMiD,sBAAsB,GAAGL,gBAAgB,GAC3CL,IAAI,CAACO,aAAL,CACE;AAAEzD,MAAAA,EAAE,EAAE;AAAN,KADF,EAEE;AAAE2D,MAAAA,KAAK,EAAE1C,eAAe,CAACK;AAAzB,KAFF,CAD2C,GAK3C,EALJ;AAOA,UAAMuC,YAAY,GAAG,KAAK/B,uBAAL,EAArB,CA1CO,CA4CP;AACA;;AACA,UAAMgC,kBAAkB,GAAG;AAAE,OAAC5D,IAAD,GAAQe;AAAV,KAA3B;;AAEA,UAAM8C,YAAY,GAAGC,MAAM,IAAI;AAC7B,YAAMC,SAAS,GAAGD,MAAM,GAAGA,MAAM,CAAC9D,IAAD,CAAT,GAAkB8D,MAA1C;AACAf,MAAAA,QAAQ,CAACjC,MAAM,CAACiD,SAAD,EAAY/C,cAAZ,EAA4BC,UAA5B,EAAwCC,UAAxC,CAAP,CAAR;AACD,KAHD;;AAKA,WAAO+B,WAAW,gBAChB,oBAAC,WAAD;AACE,MAAA,SAAS,EAAEE,OADb;AAEE,MAAA,aAAa,EAAEN,aAFjB;AAGE,MAAA,cAAc,EAAElD,GAAG,CAACqE,SAHtB;AAIE,MAAA,IAAI,EAAEhE,IAJR;AAKE,MAAA,KAAK,EAAEsD,aALT;AAME,MAAA,UAAU,EAAED,gBANd;AAOE,MAAA,EAAE,EAAG,GAAEvD,EAAG,QAPZ;AAQE,MAAA,WAAW,MARb;AASE,MAAA,sBAAsB,EAAE0C,sBAT1B;AAUE,MAAA,QAAQ,EAAEqB,YAVZ;AAWE,MAAA,aAAa,EAAED,kBAXjB;AAYE,MAAA,uBAAuB;AAZzB,OAaMV,IAbN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAeE,oBAAC,sBAAD;AACE,MAAA,SAAS,EAAEvD,GAAG,CAACsE,UADjB;AAEE,MAAA,IAAI,EAAEjE,IAFR;AAGE,MAAA,EAAE,EAAG,GAAEF,EAAG,iBAHZ;AAIE,MAAA,OAAO,EAAEG,OAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfF,CADgB,gBAwBhB,oBAAC,WAAD;AACE,MAAA,SAAS,EAAEF,SADb;AAEE,MAAA,aAAa,EAAE8C,aAFjB;AAGE,MAAA,KAAK,EAAEpC,KAHT;AAIE,MAAA,cAAc,EAAEiD,sBAJlB;AAKE,MAAA,UAAU,EAAEL,gBALd;AAME,MAAA,EAAE,EAAG,GAAEvD,EAAG,QANZ;AAOE,MAAA,QAAQ,MAPV;AAQE,MAAA,sBAAsB,EAAE6D,YAR1B;AASE,MAAA,QAAQ,EAAEE,YATZ;AAUE,MAAA,aAAa,EAAED;AAVjB,OAWMV,IAXN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAaE,oBAAC,sBAAD;AACE,MAAA,SAAS,EAAEvD,GAAG,CAACuE,eADjB;AAEE,MAAA,IAAI,EAAElE,IAFR;AAGE,MAAA,EAAE,EAAG,GAAEF,EAAG,iBAHZ;AAIE,MAAA,OAAO,EAAEG,OAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,CAxBF;AA6CD;;AAnI0C;;AAsI7CuB,oBAAoB,CAAC2C,YAArB,GAAoC;AAClCtB,EAAAA,aAAa,EAAE,IADmB;AAElC9C,EAAAA,SAAS,EAAE,IAFuB;AAGlC+C,EAAAA,aAAa,EAAE,IAHmB;AAIlCN,EAAAA,sBAAsB,EAAE;AAJU,CAApC;AAOAhB,oBAAoB,CAAC4C,SAArB,GAAiC;AAC/BvB,EAAAA,aAAa,EAAE1D,MADgB;AAE/BY,EAAAA,SAAS,EAAEZ,MAFoB;AAG/BW,EAAAA,EAAE,EAAEX,MAAM,CAACkF,UAHoB;AAI/BrE,EAAAA,IAAI,EAAEb,MAAM,CAACkF,UAJkB;AAK/B1D,EAAAA,eAAe,EAAE7B,OAAO,CAACK,MAAD,CAAP,CAAgBkF,UALF;AAM/B5D,EAAAA,KAAK,EAAEzB,IAAI,CAACqF,UANmB;AAO/BtB,EAAAA,QAAQ,EAAEhE,IAAI,CAACsF,UAPgB;AAQ/BpE,EAAAA,OAAO,EAAEpB,KAAK,CAACwF,UARgB;AAS/BvB,EAAAA,aAAa,EAAE5D,MATgB;AAU/BsD,EAAAA,sBAAsB,EAAEvD,MAVO;AAY/B;AACA+D,EAAAA,IAAI,EAAE1D,SAAS,CAAC+E;AAbe,CAAjC;AAgBA,qBAAehF,UAAU,CAACmC,oBAAD,CAAzB","sourcesContent":["import React, { Component } from 'react';\nimport { array, arrayOf, func, node, number, object, string } from 'prop-types';\nimport classNames from 'classnames';\n\nimport { injectIntl, intlShape } from '../../../util/reactIntl';\nimport { parseSelectFilterOptions } from '../../../util/search';\n\nimport { FieldCheckbox } from '../../../components';\n\nimport FilterPlain from '../FilterPlain/FilterPlain';\nimport FilterPopup from '../FilterPopup/FilterPopup';\n\nimport css from './SelectMultipleFilter.module.css';\n\n// SelectMultipleFilter doesn't need array mutators since it doesn't require validation.\n// TODO: Live edit didn't work with FieldCheckboxGroup\n//       There's a mutation problem: formstate.dirty is not reliable with it.\nconst GroupOfFieldCheckboxes = props => {\n  const { id, className, name, options } = props;\n  return (\n    <fieldset className={className}>\n      <ul className={css.list}>\n        {options.map((option, index) => {\n          const fieldId = `${id}.${option.key}`;\n          return (\n            <li key={fieldId} className={css.item}>\n              <FieldCheckbox id={fieldId} name={name} label={option.label} value={option.key} />\n            </li>\n          );\n        })}\n      </ul>\n    </fieldset>\n  );\n};\n\nconst getQueryParamName = queryParamNames => {\n  return Array.isArray(queryParamNames) ? queryParamNames[0] : queryParamNames;\n};\n\n// Format URI component's query param: { pub_key: 'has_all:a,b,c' }\nconst format = (selectedOptions, queryParamName, schemaType, searchMode) => {\n  const hasOptionsSelected = selectedOptions && selectedOptions.length > 0;\n  const mode = schemaType === 'multi-enum' && searchMode ? `${searchMode}:` : '';\n  const value = hasOptionsSelected ? `${mode}${selectedOptions.join(',')}` : null;\n  return { [queryParamName]: value };\n};\n\nclass SelectMultipleFilter extends Component {\n  constructor(props) {\n    super(props);\n\n    this.filter = null;\n    this.filterContent = null;\n\n    this.positionStyleForContent = this.positionStyleForContent.bind(this);\n  }\n\n  positionStyleForContent() {\n    if (this.filter && this.filterContent) {\n      // Render the filter content to the right from the menu\n      // unless there's no space in which case it is rendered\n      // to the left\n      const distanceToRight = window.innerWidth - this.filter.getBoundingClientRect().right;\n      const labelWidth = this.filter.offsetWidth;\n      const contentWidth = this.filterContent.offsetWidth;\n      const contentWidthBiggerThanLabel = contentWidth - labelWidth;\n      const renderToRight = distanceToRight > contentWidthBiggerThanLabel;\n      const contentPlacementOffset = this.props.contentPlacementOffset;\n\n      const offset = renderToRight\n        ? { left: contentPlacementOffset }\n        : { right: contentPlacementOffset };\n      // set a min-width if the content is narrower than the label\n      const minWidth = contentWidth < labelWidth ? { minWidth: labelWidth } : null;\n\n      return { ...offset, ...minWidth };\n    }\n    return {};\n  }\n\n  render() {\n    const {\n      rootClassName,\n      className,\n      id,\n      name,\n      label,\n      options,\n      initialValues,\n      contentPlacementOffset,\n      onSubmit,\n      queryParamNames,\n      schemaType,\n      searchMode,\n      intl,\n      showAsPopup,\n      ...rest\n    } = this.props;\n\n    const classes = classNames(rootClassName || css.root, className);\n\n    const queryParamName = getQueryParamName(queryParamNames);\n    const hasInitialValues = !!initialValues && !!initialValues[queryParamName];\n    // Parse options from param strings like \"has_all:a,b,c\" or \"a,b,c\"\n    const selectedOptions = hasInitialValues\n      ? parseSelectFilterOptions(initialValues[queryParamName])\n      : [];\n\n    const labelForPopup = hasInitialValues\n      ? intl.formatMessage(\n          { id: 'SelectMultipleFilter.labelSelected' },\n          { labelText: label, count: selectedOptions.length }\n        )\n      : label;\n\n    const labelSelectionForPlain = hasInitialValues\n      ? intl.formatMessage(\n          { id: 'SelectMultipleFilterPlainForm.labelSelected' },\n          { count: selectedOptions.length }\n        )\n      : '';\n\n    const contentStyle = this.positionStyleForContent();\n\n    // pass the initial values with the name key so that\n    // they can be passed to the correct field\n    const namedInitialValues = { [name]: selectedOptions };\n\n    const handleSubmit = values => {\n      const usedValue = values ? values[name] : values;\n      onSubmit(format(usedValue, queryParamName, schemaType, searchMode));\n    };\n\n    return showAsPopup ? (\n      <FilterPopup\n        className={classes}\n        rootClassName={rootClassName}\n        popupClassName={css.popupSize}\n        name={name}\n        label={labelForPopup}\n        isSelected={hasInitialValues}\n        id={`${id}.popup`}\n        showAsPopup\n        contentPlacementOffset={contentPlacementOffset}\n        onSubmit={handleSubmit}\n        initialValues={namedInitialValues}\n        keepDirtyOnReinitialize\n        {...rest}\n      >\n        <GroupOfFieldCheckboxes\n          className={css.fieldGroup}\n          name={name}\n          id={`${id}-checkbox-group`}\n          options={options}\n        />\n      </FilterPopup>\n    ) : (\n      <FilterPlain\n        className={className}\n        rootClassName={rootClassName}\n        label={label}\n        labelSelection={labelSelectionForPlain}\n        isSelected={hasInitialValues}\n        id={`${id}.plain`}\n        liveEdit\n        contentPlacementOffset={contentStyle}\n        onSubmit={handleSubmit}\n        initialValues={namedInitialValues}\n        {...rest}\n      >\n        <GroupOfFieldCheckboxes\n          className={css.fieldGroupPlain}\n          name={name}\n          id={`${id}-checkbox-group`}\n          options={options}\n        />\n      </FilterPlain>\n    );\n  }\n}\n\nSelectMultipleFilter.defaultProps = {\n  rootClassName: null,\n  className: null,\n  initialValues: null,\n  contentPlacementOffset: 0,\n};\n\nSelectMultipleFilter.propTypes = {\n  rootClassName: string,\n  className: string,\n  id: string.isRequired,\n  name: string.isRequired,\n  queryParamNames: arrayOf(string).isRequired,\n  label: node.isRequired,\n  onSubmit: func.isRequired,\n  options: array.isRequired,\n  initialValues: object,\n  contentPlacementOffset: number,\n\n  // form injectIntl\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(SelectMultipleFilter);\n"]},"metadata":{},"sourceType":"module"}