{"ast":null,"code":"var _jsxFileName = \"/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/components/OrderPanel/ProductOrderForm/ProductOrderForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nimport { bool, func, number, string } from 'prop-types';\nimport { Form as FinalForm, FormSpy } from 'react-final-form';\nimport config from '../../../config';\nimport { FormattedMessage, useIntl } from '../../../util/reactIntl';\nimport { propTypes } from '../../../util/types';\nimport { numberAtLeast, required } from '../../../util/validators';\nimport { Form, FieldSelect, FieldTextInput, InlineTextButton, PrimaryButton } from '../../../components';\nimport EstimatedCustomerBreakdownMaybe from '../EstimatedCustomerBreakdownMaybe';\nimport css from './ProductOrderForm.module.css';\n\nconst renderForm = formRenderProps => {\n  const {\n    // FormRenderProps from final-form\n    handleSubmit,\n    form: formApi,\n    // Custom props passed to the form component\n    intl,\n    formId,\n    currentStock,\n    hasMultipleDeliveryMethods,\n    listingId,\n    isOwnListing,\n    onFetchTransactionLineItems,\n    onContactUser,\n    lineItems,\n    fetchLineItemsInProgress,\n    fetchLineItemsError,\n    values\n  } = formRenderProps;\n\n  const handleOnChange = formValues => {\n    const {\n      quantity: quantityRaw,\n      deliveryMethod\n    } = formValues.values;\n    const quantity = Number.parseInt(quantityRaw, 10);\n    const isBrowser = typeof window !== 'undefined';\n\n    if (isBrowser && quantity && deliveryMethod && !fetchLineItemsInProgress) {\n      onFetchTransactionLineItems({\n        orderData: {\n          quantity,\n          deliveryMethod\n        },\n        listingId,\n        isOwnListing\n      });\n    }\n  }; // In case quantity and deliveryMethod are missing focus on that select-input.\n  // Otherwise continue with the default handleSubmit function.\n\n\n  const handleFormSubmit = e => {\n    const {\n      quantity,\n      deliveryMethod\n    } = values || {};\n\n    if (!quantity || quantity < 1) {\n      e.preventDefault(); // Blur event will show validator message\n\n      formApi.blur('quantity');\n      formApi.focus('quantity');\n    } else if (!deliveryMethod) {\n      e.preventDefault(); // Blur event will show validator message\n\n      formApi.blur('deliveryMethod');\n      formApi.focus('deliveryMethod');\n    } else {\n      handleSubmit(e);\n    }\n  };\n\n  const breakdownData = {};\n  const showBreakdown = breakdownData && lineItems && !fetchLineItemsInProgress && !fetchLineItemsError;\n  const breakdown = showBreakdown ? /*#__PURE__*/React.createElement(\"div\", {\n    className: css.breakdownWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"ProductOrderForm.breakdownTitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(EstimatedCustomerBreakdownMaybe, {\n    unitType: config.lineItemUnitType,\n    breakdownData: breakdownData,\n    lineItems: lineItems,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  })) : null;\n  const showContactUser = typeof onContactUser === 'function';\n\n  const onClickContactUser = e => {\n    e.preventDefault();\n    onContactUser();\n  };\n\n  const contactSellerLink = /*#__PURE__*/React.createElement(InlineTextButton, {\n    onClick: onClickContactUser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"ProductOrderForm.finePrintNoStockLinkText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }));\n  const quantityRequiredMsg = intl.formatMessage({\n    id: 'ProductOrderForm.quantityRequired'\n  });\n  const hasStock = currentStock && currentStock > 0;\n  const quantities = hasStock ? [...Array(currentStock).keys()].map(i => i + 1) : [];\n  const hasNoStockLeft = typeof currentStock != null && currentStock === 0;\n  const hasOneItemLeft = typeof currentStock != null && currentStock === 1;\n  const submitInProgress = fetchLineItemsInProgress;\n  const submitDisabled = !hasStock;\n  return /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormSpy, {\n    subscription: {\n      values: true\n    },\n    onChange: handleOnChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }), hasNoStockLeft ? null : hasOneItemLeft ? /*#__PURE__*/React.createElement(FieldTextInput, {\n    id: `${formId}.quantity`,\n    className: css.quantityField,\n    name: \"quantity\",\n    type: \"hidden\",\n    validate: numberAtLeast(quantityRequiredMsg, 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(FieldSelect, {\n    id: `${formId}.quantity`,\n    className: css.quantityField,\n    name: \"quantity\",\n    disabled: !hasStock,\n    label: intl.formatMessage({\n      id: 'ProductOrderForm.quantityLabel'\n    }),\n    validate: numberAtLeast(quantityRequiredMsg, 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    disabled: true,\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  }, intl.formatMessage({\n    id: 'ProductOrderForm.selectQuantityOption'\n  })), quantities.map(quantity => /*#__PURE__*/React.createElement(\"option\", {\n    key: quantity,\n    value: quantity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }\n  }, intl.formatMessage({\n    id: 'ProductOrderForm.quantityOption'\n  }, {\n    quantity\n  })))), hasNoStockLeft ? null : hasMultipleDeliveryMethods ? /*#__PURE__*/React.createElement(FieldSelect, {\n    id: `${formId}.deliveryMethod`,\n    className: css.deliveryField,\n    name: \"deliveryMethod\",\n    disabled: !hasStock,\n    label: intl.formatMessage({\n      id: 'ProductOrderForm.deliveryMethodLabel'\n    }),\n    validate: required(intl.formatMessage({\n      id: 'ProductOrderForm.deliveryMethodRequired'\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    disabled: true,\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }\n  }, intl.formatMessage({\n    id: 'ProductOrderForm.selectDeliveryMethodOption'\n  })), /*#__PURE__*/React.createElement(\"option\", {\n    value: 'pickup',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 11\n    }\n  }, intl.formatMessage({\n    id: 'ProductOrderForm.pickupOption'\n  })), /*#__PURE__*/React.createElement(\"option\", {\n    value: 'shipping',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 11\n    }\n  }, intl.formatMessage({\n    id: 'ProductOrderForm.shippingOption'\n  }))) : /*#__PURE__*/React.createElement(\"div\", {\n    className: css.deliveryField,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 11\n    }\n  }, intl.formatMessage({\n    id: 'ProductOrderForm.deliveryMethodLabel'\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    className: css.singleDeliveryMethodSelected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }\n  }, values.deliveryMethod === 'shipping' ? intl.formatMessage({\n    id: 'ProductOrderForm.shippingOption'\n  }) : intl.formatMessage({\n    id: 'ProductOrderForm.pickupOption'\n  })), /*#__PURE__*/React.createElement(FieldTextInput, {\n    id: `${formId}.deliveryMethod`,\n    className: css.deliveryField,\n    name: \"deliveryMethod\",\n    type: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 11\n    }\n  })), breakdown, /*#__PURE__*/React.createElement(\"div\", {\n    className: css.submitButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(PrimaryButton, {\n    type: \"submit\",\n    inProgress: submitInProgress,\n    disabled: submitDisabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }\n  }, hasStock ? /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"ProductOrderForm.ctaButton\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }\n  }) : /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"ProductOrderForm.ctaButtonNoStock\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"p\", {\n    className: css.finePrint,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }\n  }, hasStock ? /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"ProductOrderForm.finePrint\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 11\n    }\n  }) : showContactUser ? /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"ProductOrderForm.finePrintNoStock\",\n    values: {\n      contactSellerLink\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 11\n    }\n  }) : null));\n};\n\nconst ProductOrderForm = props => {\n  _s();\n\n  const intl = useIntl();\n  const {\n    price,\n    currentStock,\n    pickupEnabled,\n    shippingEnabled\n  } = props; // Should not happen for listings that go through EditListingWizard.\n  // However, this might happen for imported listings.\n\n  if (!pickupEnabled && !shippingEnabled) {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      className: css.error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"ProductOrderForm.noDeliveryMethodSet\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  if (!price) {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      className: css.error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"ProductOrderForm.listingPriceMissing\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  if (price.currency !== config.currency) {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      className: css.error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"ProductOrderForm.listingCurrencyInvalid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  const hasOneItemLeft = currentStock && currentStock === 1;\n  const quantityMaybe = hasOneItemLeft ? {\n    quantity: '1'\n  } : {};\n  const singleDeliveryMethodAvailableMaybe = shippingEnabled && !pickupEnabled ? {\n    deliveryMethod: 'shipping'\n  } : !shippingEnabled && pickupEnabled ? {\n    deliveryMethod: 'pickup'\n  } : {};\n  const hasMultipleDeliveryMethods = pickupEnabled && shippingEnabled;\n  const initialValues = { ...quantityMaybe,\n    ...singleDeliveryMethodAvailableMaybe\n  };\n  return /*#__PURE__*/React.createElement(FinalForm, Object.assign({\n    initialValues: initialValues,\n    hasMultipleDeliveryMethods: hasMultipleDeliveryMethods\n  }, props, {\n    intl: intl,\n    render: renderForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 5\n    }\n  }));\n};\n\n_s(ProductOrderForm, \"rlSgSjbewJ1PrR/Ile8g/kr050o=\", false, function () {\n  return [useIntl];\n});\n\n_c = ProductOrderForm;\nProductOrderForm.defaultProps = {\n  rootClassName: null,\n  className: null,\n  price: null,\n  currentStock: null,\n  listingId: null,\n  isOwnListing: false,\n  lineItems: null,\n  fetchLineItemsError: null\n};\nProductOrderForm.propTypes = {\n  rootClassName: string,\n  className: string,\n  // form\n  formId: string.isRequired,\n  onSubmit: func.isRequired,\n  // listing\n  listingId: propTypes.uuid,\n  price: propTypes.money,\n  currentStock: number,\n  isOwnListing: bool,\n  // line items\n  lineItems: propTypes.lineItems,\n  onFetchTransactionLineItems: func.isRequired,\n  fetchLineItemsInProgress: bool.isRequired,\n  fetchLineItemsError: propTypes.error,\n  // other\n  onContactUser: func\n};\nexport default ProductOrderForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductOrderForm\");","map":{"version":3,"sources":["/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/components/OrderPanel/ProductOrderForm/ProductOrderForm.js"],"names":["React","useRef","bool","func","number","string","Form","FinalForm","FormSpy","config","FormattedMessage","useIntl","propTypes","numberAtLeast","required","FieldSelect","FieldTextInput","InlineTextButton","PrimaryButton","EstimatedCustomerBreakdownMaybe","css","renderForm","formRenderProps","handleSubmit","form","formApi","intl","formId","currentStock","hasMultipleDeliveryMethods","listingId","isOwnListing","onFetchTransactionLineItems","onContactUser","lineItems","fetchLineItemsInProgress","fetchLineItemsError","values","handleOnChange","formValues","quantity","quantityRaw","deliveryMethod","Number","parseInt","isBrowser","window","orderData","handleFormSubmit","e","preventDefault","blur","focus","breakdownData","showBreakdown","breakdown","breakdownWrapper","lineItemUnitType","showContactUser","onClickContactUser","contactSellerLink","quantityRequiredMsg","formatMessage","id","hasStock","quantities","Array","keys","map","i","hasNoStockLeft","hasOneItemLeft","submitInProgress","submitDisabled","quantityField","deliveryField","singleDeliveryMethodSelected","submitButton","finePrint","ProductOrderForm","props","price","pickupEnabled","shippingEnabled","error","currency","quantityMaybe","singleDeliveryMethodAvailableMaybe","initialValues","defaultProps","rootClassName","className","isRequired","onSubmit","uuid","money"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react';\nimport { bool, func, number, string } from 'prop-types';\nimport { Form as FinalForm, FormSpy } from 'react-final-form';\n\nimport config from '../../../config';\nimport { FormattedMessage, useIntl } from '../../../util/reactIntl';\nimport { propTypes } from '../../../util/types';\nimport { numberAtLeast, required } from '../../../util/validators';\n\nimport {\n  Form,\n  FieldSelect,\n  FieldTextInput,\n  InlineTextButton,\n  PrimaryButton,\n} from '../../../components';\n\nimport EstimatedCustomerBreakdownMaybe from '../EstimatedCustomerBreakdownMaybe';\n\nimport css from './ProductOrderForm.module.css';\n\nconst renderForm = formRenderProps => {\n  const {\n    // FormRenderProps from final-form\n    handleSubmit,\n    form: formApi,\n\n    // Custom props passed to the form component\n    intl,\n    formId,\n    currentStock,\n    hasMultipleDeliveryMethods,\n    listingId,\n    isOwnListing,\n    onFetchTransactionLineItems,\n    onContactUser,\n    lineItems,\n    fetchLineItemsInProgress,\n    fetchLineItemsError,\n    values,\n  } = formRenderProps;\n\n  const handleOnChange = formValues => {\n    const { quantity: quantityRaw, deliveryMethod } = formValues.values;\n    const quantity = Number.parseInt(quantityRaw, 10);\n    const isBrowser = typeof window !== 'undefined';\n    if (isBrowser && quantity && deliveryMethod && !fetchLineItemsInProgress) {\n      onFetchTransactionLineItems({\n        orderData: { quantity, deliveryMethod },\n        listingId,\n        isOwnListing,\n      });\n    }\n  };\n\n  // In case quantity and deliveryMethod are missing focus on that select-input.\n  // Otherwise continue with the default handleSubmit function.\n  const handleFormSubmit = e => {\n    const { quantity, deliveryMethod } = values || {};\n    if (!quantity || quantity < 1) {\n      e.preventDefault();\n      // Blur event will show validator message\n      formApi.blur('quantity');\n      formApi.focus('quantity');\n    } else if (!deliveryMethod) {\n      e.preventDefault();\n      // Blur event will show validator message\n      formApi.blur('deliveryMethod');\n      formApi.focus('deliveryMethod');\n    } else {\n      handleSubmit(e);\n    }\n  };\n\n  const breakdownData = {};\n  const showBreakdown =\n    breakdownData && lineItems && !fetchLineItemsInProgress && !fetchLineItemsError;\n  const breakdown = showBreakdown ? (\n    <div className={css.breakdownWrapper}>\n      <h3>\n        <FormattedMessage id=\"ProductOrderForm.breakdownTitle\" />\n      </h3>\n      <EstimatedCustomerBreakdownMaybe\n        unitType={config.lineItemUnitType}\n        breakdownData={breakdownData}\n        lineItems={lineItems}\n      />\n    </div>\n  ) : null;\n\n  const showContactUser = typeof onContactUser === 'function';\n\n  const onClickContactUser = e => {\n    e.preventDefault();\n    onContactUser();\n  };\n\n  const contactSellerLink = (\n    <InlineTextButton onClick={onClickContactUser}>\n      <FormattedMessage id=\"ProductOrderForm.finePrintNoStockLinkText\" />\n    </InlineTextButton>\n  );\n  const quantityRequiredMsg = intl.formatMessage({ id: 'ProductOrderForm.quantityRequired' });\n\n  const hasStock = currentStock && currentStock > 0;\n  const quantities = hasStock ? [...Array(currentStock).keys()].map(i => i + 1) : [];\n  const hasNoStockLeft = typeof currentStock != null && currentStock === 0;\n  const hasOneItemLeft = typeof currentStock != null && currentStock === 1;\n\n  const submitInProgress = fetchLineItemsInProgress;\n  const submitDisabled = !hasStock;\n\n  return (\n    <Form onSubmit={handleFormSubmit}>\n      <FormSpy subscription={{ values: true }} onChange={handleOnChange} />\n      {hasNoStockLeft ? null : hasOneItemLeft ? (\n        <FieldTextInput\n          id={`${formId}.quantity`}\n          className={css.quantityField}\n          name=\"quantity\"\n          type=\"hidden\"\n          validate={numberAtLeast(quantityRequiredMsg, 1)}\n        />\n      ) : (\n        <FieldSelect\n          id={`${formId}.quantity`}\n          className={css.quantityField}\n          name=\"quantity\"\n          disabled={!hasStock}\n          label={intl.formatMessage({ id: 'ProductOrderForm.quantityLabel' })}\n          validate={numberAtLeast(quantityRequiredMsg, 1)}\n        >\n          <option disabled value=\"\">\n            {intl.formatMessage({ id: 'ProductOrderForm.selectQuantityOption' })}\n          </option>\n          {quantities.map(quantity => (\n            <option key={quantity} value={quantity}>\n              {intl.formatMessage({ id: 'ProductOrderForm.quantityOption' }, { quantity })}\n            </option>\n          ))}\n        </FieldSelect>\n      )}\n\n      {hasNoStockLeft ? null : hasMultipleDeliveryMethods ? (\n        <FieldSelect\n          id={`${formId}.deliveryMethod`}\n          className={css.deliveryField}\n          name=\"deliveryMethod\"\n          disabled={!hasStock}\n          label={intl.formatMessage({ id: 'ProductOrderForm.deliveryMethodLabel' })}\n          validate={required(intl.formatMessage({ id: 'ProductOrderForm.deliveryMethodRequired' }))}\n        >\n          <option disabled value=\"\">\n            {intl.formatMessage({ id: 'ProductOrderForm.selectDeliveryMethodOption' })}\n          </option>\n          <option value={'pickup'}>\n            {intl.formatMessage({ id: 'ProductOrderForm.pickupOption' })}\n          </option>\n          <option value={'shipping'}>\n            {intl.formatMessage({ id: 'ProductOrderForm.shippingOption' })}\n          </option>\n        </FieldSelect>\n      ) : (\n        <div className={css.deliveryField}>\n          <label>{intl.formatMessage({ id: 'ProductOrderForm.deliveryMethodLabel' })}</label>\n          <p className={css.singleDeliveryMethodSelected}>\n            {values.deliveryMethod === 'shipping'\n              ? intl.formatMessage({ id: 'ProductOrderForm.shippingOption' })\n              : intl.formatMessage({ id: 'ProductOrderForm.pickupOption' })}\n          </p>\n          <FieldTextInput\n            id={`${formId}.deliveryMethod`}\n            className={css.deliveryField}\n            name=\"deliveryMethod\"\n            type=\"hidden\"\n          />\n        </div>\n      )}\n      {breakdown}\n      <div className={css.submitButton}>\n        <PrimaryButton type=\"submit\" inProgress={submitInProgress} disabled={submitDisabled}>\n          {hasStock ? (\n            <FormattedMessage id=\"ProductOrderForm.ctaButton\" />\n          ) : (\n            <FormattedMessage id=\"ProductOrderForm.ctaButtonNoStock\" />\n          )}\n        </PrimaryButton>\n      </div>\n      <p className={css.finePrint}>\n        {hasStock ? (\n          <FormattedMessage id=\"ProductOrderForm.finePrint\" />\n        ) : showContactUser ? (\n          <FormattedMessage id=\"ProductOrderForm.finePrintNoStock\" values={{ contactSellerLink }} />\n        ) : null}\n      </p>\n    </Form>\n  );\n};\n\nconst ProductOrderForm = props => {\n  const intl = useIntl();\n  const { price, currentStock, pickupEnabled, shippingEnabled } = props;\n\n  // Should not happen for listings that go through EditListingWizard.\n  // However, this might happen for imported listings.\n  if (!pickupEnabled && !shippingEnabled) {\n    return (\n      <p className={css.error}>\n        <FormattedMessage id=\"ProductOrderForm.noDeliveryMethodSet\" />\n      </p>\n    );\n  }\n\n  if (!price) {\n    return (\n      <p className={css.error}>\n        <FormattedMessage id=\"ProductOrderForm.listingPriceMissing\" />\n      </p>\n    );\n  }\n  if (price.currency !== config.currency) {\n    return (\n      <p className={css.error}>\n        <FormattedMessage id=\"ProductOrderForm.listingCurrencyInvalid\" />\n      </p>\n    );\n  }\n  const hasOneItemLeft = currentStock && currentStock === 1;\n  const quantityMaybe = hasOneItemLeft ? { quantity: '1' } : {};\n  const singleDeliveryMethodAvailableMaybe =\n    shippingEnabled && !pickupEnabled\n      ? { deliveryMethod: 'shipping' }\n      : !shippingEnabled && pickupEnabled\n      ? { deliveryMethod: 'pickup' }\n      : {};\n  const hasMultipleDeliveryMethods = pickupEnabled && shippingEnabled;\n  const initialValues = { ...quantityMaybe, ...singleDeliveryMethodAvailableMaybe };\n\n  return (\n    <FinalForm\n      initialValues={initialValues}\n      hasMultipleDeliveryMethods={hasMultipleDeliveryMethods}\n      {...props}\n      intl={intl}\n      render={renderForm}\n    />\n  );\n};\n\nProductOrderForm.defaultProps = {\n  rootClassName: null,\n  className: null,\n  price: null,\n  currentStock: null,\n  listingId: null,\n  isOwnListing: false,\n  lineItems: null,\n  fetchLineItemsError: null,\n};\n\nProductOrderForm.propTypes = {\n  rootClassName: string,\n  className: string,\n\n  // form\n  formId: string.isRequired,\n  onSubmit: func.isRequired,\n\n  // listing\n  listingId: propTypes.uuid,\n  price: propTypes.money,\n  currentStock: number,\n  isOwnListing: bool,\n\n  // line items\n  lineItems: propTypes.lineItems,\n  onFetchTransactionLineItems: func.isRequired,\n  fetchLineItemsInProgress: bool.isRequired,\n  fetchLineItemsError: propTypes.error,\n\n  // other\n  onContactUser: func,\n};\n\nexport default ProductOrderForm;\n"]},"metadata":{},"sourceType":"module"}