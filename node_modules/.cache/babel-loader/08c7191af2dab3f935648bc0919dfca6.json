{"ast":null,"code":"var _jsxFileName = \"/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/containers/SearchPage/SearchMap/ReusableMapContainer.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { node, string, object } from 'prop-types';\nimport config from '../../../config';\nimport { IntlProvider } from '../../../util/reactIntl';\nimport css from './SearchMap.module.css';\n/**\n * ReusableMapContainer makes Google Map usage more effective. This improves:\n * - Performance: no need to load dynamic map every time user enters the search page view on SPA.\n * - Efficient Google Maps usage: less unnecessary calls to instantiate a dynamic map.\n * - Reaction to a bug when removing Google Map instance\n *   https://issuetracker.google.com/issues/35821412\n */\n\nclass ReusableMapContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    if (typeof window !== 'undefined') {\n      window.reusableSearchMapElement = window.reusableSearchMapElement || document.createElement('div');\n\n      if (!props.className) {\n        console.warn('ReusableMapContainer should get className prop which defines its layout');\n      } // If no className is given, we use some defaults, which makes it easier to debug loading.\n\n\n      const mapLayoutClassName = props.className || css.defaultMapLayout;\n      this.el = window.reusableSearchMapElement;\n      this.el.id = 'search-map';\n      this.el.classList.add(mapLayoutClassName);\n    }\n\n    this.mountNode = null;\n    this.renderSearchMap = this.renderSearchMap.bind(this);\n  }\n\n  componentDidMount() {\n    this.renderSearchMap();\n  }\n\n  componentDidUpdate() {\n    this.renderSearchMap();\n  }\n\n  componentWillUnmount() {\n    this.el.classList.add(css.reusableMapHidden);\n    this.el.classList.add(this.props.reusableMapHiddenHandle);\n    this.mountNode.removeChild(this.el);\n    document.body.appendChild(this.el);\n  }\n\n  renderSearchMap() {\n    // Prepare rendering child (MapWithGoogleMap component) to new location\n    // We need to add translations (IntlProvider) for map overlay components\n    //\n    // NOTICE: Children rendered with ReactDOM.render doesn't have Router access\n    // You need to provide onClick functions and URLs as props.\n    const renderChildren = () => {\n      const children = /*#__PURE__*/React.createElement(IntlProvider, {\n        locale: config.locale,\n        messages: this.props.messages,\n        textComponent: \"span\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 9\n        }\n      }, this.props.children); // Render children to created element\n\n      ReactDOM.render(children, this.el);\n    };\n\n    const targetDomNode = document.getElementById(this.el.id); // Check if we have already added map somewhere on the DOM\n\n    if (!targetDomNode) {\n      if (this.mountNode && !this.mountNode.firstChild) {\n        // If mountable, but not yet mounted, append rendering context inside SPA rendering tree.\n        this.mountNode.appendChild(this.el);\n      } else if (!this.mountNode) {\n        // if no mountNode is found, append this outside SPA rendering tree (to document body)\n        document.body.appendChild(this.el);\n      }\n\n      renderChildren();\n    } else {\n      this.el.classList.remove(css.reusableMapHidden);\n      this.el.classList.remove(this.props.reusableMapHiddenHandle);\n\n      if (this.mountNode && !this.mountNode.firstChild) {\n        // Move the map to correct location if we have rendered the map before\n        // (but it's not yet moved to correct location of rendering tree).\n        document.body.removeChild(this.el);\n        this.mountNode.appendChild(this.el); // render children and call reattach\n\n        renderChildren();\n        this.props.onReattach();\n      } else {\n        renderChildren();\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: css.reusableMap,\n      ref: node => {\n        this.mountNode = node;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nReusableMapContainer.defaultProps = {\n  className: string\n};\nReusableMapContainer.propTypes = {\n  children: node.isRequired,\n  className: string,\n  reusableMapHiddenHandle: string.isRequired,\n  messages: object.isRequired\n};\nexport default ReusableMapContainer;","map":{"version":3,"sources":["/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/containers/SearchPage/SearchMap/ReusableMapContainer.js"],"names":["React","ReactDOM","node","string","object","config","IntlProvider","css","ReusableMapContainer","Component","constructor","props","window","reusableSearchMapElement","document","createElement","className","console","warn","mapLayoutClassName","defaultMapLayout","el","id","classList","add","mountNode","renderSearchMap","bind","componentDidMount","componentDidUpdate","componentWillUnmount","reusableMapHidden","reusableMapHiddenHandle","removeChild","body","appendChild","renderChildren","children","locale","messages","render","targetDomNode","getElementById","firstChild","remove","onReattach","reusableMap","defaultProps","propTypes","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { node, string, object } from 'prop-types';\n\nimport config from '../../../config';\nimport { IntlProvider } from '../../../util/reactIntl';\n\nimport css from './SearchMap.module.css';\n\n/**\n * ReusableMapContainer makes Google Map usage more effective. This improves:\n * - Performance: no need to load dynamic map every time user enters the search page view on SPA.\n * - Efficient Google Maps usage: less unnecessary calls to instantiate a dynamic map.\n * - Reaction to a bug when removing Google Map instance\n *   https://issuetracker.google.com/issues/35821412\n */\nclass ReusableMapContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    if (typeof window !== 'undefined') {\n      window.reusableSearchMapElement =\n        window.reusableSearchMapElement || document.createElement('div');\n\n      if (!props.className) {\n        console.warn('ReusableMapContainer should get className prop which defines its layout');\n      }\n      // If no className is given, we use some defaults, which makes it easier to debug loading.\n      const mapLayoutClassName = props.className || css.defaultMapLayout;\n\n      this.el = window.reusableSearchMapElement;\n      this.el.id = 'search-map';\n      this.el.classList.add(mapLayoutClassName);\n    }\n\n    this.mountNode = null;\n    this.renderSearchMap = this.renderSearchMap.bind(this);\n  }\n\n  componentDidMount() {\n    this.renderSearchMap();\n  }\n\n  componentDidUpdate() {\n    this.renderSearchMap();\n  }\n\n  componentWillUnmount() {\n    this.el.classList.add(css.reusableMapHidden);\n    this.el.classList.add(this.props.reusableMapHiddenHandle);\n    this.mountNode.removeChild(this.el);\n    document.body.appendChild(this.el);\n  }\n\n  renderSearchMap() {\n    // Prepare rendering child (MapWithGoogleMap component) to new location\n    // We need to add translations (IntlProvider) for map overlay components\n    //\n    // NOTICE: Children rendered with ReactDOM.render doesn't have Router access\n    // You need to provide onClick functions and URLs as props.\n    const renderChildren = () => {\n      const children = (\n        <IntlProvider locale={config.locale} messages={this.props.messages} textComponent=\"span\">\n          {this.props.children}\n        </IntlProvider>\n      );\n\n      // Render children to created element\n      ReactDOM.render(children, this.el);\n    };\n\n    const targetDomNode = document.getElementById(this.el.id);\n\n    // Check if we have already added map somewhere on the DOM\n    if (!targetDomNode) {\n      if (this.mountNode && !this.mountNode.firstChild) {\n        // If mountable, but not yet mounted, append rendering context inside SPA rendering tree.\n        this.mountNode.appendChild(this.el);\n      } else if (!this.mountNode) {\n        // if no mountNode is found, append this outside SPA rendering tree (to document body)\n        document.body.appendChild(this.el);\n      }\n      renderChildren();\n    } else {\n      this.el.classList.remove(css.reusableMapHidden);\n      this.el.classList.remove(this.props.reusableMapHiddenHandle);\n\n      if (this.mountNode && !this.mountNode.firstChild) {\n        // Move the map to correct location if we have rendered the map before\n        // (but it's not yet moved to correct location of rendering tree).\n        document.body.removeChild(this.el);\n        this.mountNode.appendChild(this.el);\n\n        // render children and call reattach\n        renderChildren();\n        this.props.onReattach();\n      } else {\n        renderChildren();\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div\n        className={css.reusableMap}\n        ref={node => {\n          this.mountNode = node;\n        }}\n      />\n    );\n  }\n}\n\nReusableMapContainer.defaultProps = {\n  className: string,\n};\n\nReusableMapContainer.propTypes = {\n  children: node.isRequired,\n  className: string,\n  reusableMapHiddenHandle: string.isRequired,\n  messages: object.isRequired,\n};\n\nexport default ReusableMapContainer;\n"]},"metadata":{},"sourceType":"module"}