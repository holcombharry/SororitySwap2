{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('../GetIntrinsic');\n\nvar $Math = GetIntrinsic('%Math%');\n\nvar ToNumber = require('./ToNumber');\n\nvar $isNaN = require('../helpers/isNaN');\n\nvar $isFinite = require('../helpers/isFinite');\n\nvar $sign = require('../helpers/sign');\n\nvar $mod = require('../helpers/mod');\n\nvar $floor = $Math.floor;\nvar $abs = $Math.abs;\n\nmodule.exports = function ToUint8(argument) {\n  var number = ToNumber(argument);\n\n  if ($isNaN(number) || number === 0 || !$isFinite(number)) {\n    return 0;\n  }\n\n  var posInt = $sign(number) * $floor($abs(number));\n  return $mod(posInt, 0x100);\n};","map":{"version":3,"sources":["/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/node_modules/airbnb-prop-types/node_modules/array.prototype.find/node_modules/es-abstract/2015/ToUint8.js"],"names":["GetIntrinsic","require","$Math","ToNumber","$isNaN","$isFinite","$sign","$mod","$floor","floor","$abs","abs","module","exports","ToUint8","argument","number","posInt"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,iBAAD,CAA1B;;AAEA,IAAIC,KAAK,GAAGF,YAAY,CAAC,QAAD,CAAxB;;AAEA,IAAIG,QAAQ,GAAGF,OAAO,CAAC,YAAD,CAAtB;;AAEA,IAAIG,MAAM,GAAGH,OAAO,CAAC,kBAAD,CAApB;;AACA,IAAII,SAAS,GAAGJ,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIK,KAAK,GAAGL,OAAO,CAAC,iBAAD,CAAnB;;AACA,IAAIM,IAAI,GAAGN,OAAO,CAAC,gBAAD,CAAlB;;AAEA,IAAIO,MAAM,GAAGN,KAAK,CAACO,KAAnB;AACA,IAAIC,IAAI,GAAGR,KAAK,CAACS,GAAjB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,OAAT,CAAiBC,QAAjB,EAA2B;AAC3C,MAAIC,MAAM,GAAGb,QAAQ,CAACY,QAAD,CAArB;;AACA,MAAIX,MAAM,CAACY,MAAD,CAAN,IAAkBA,MAAM,KAAK,CAA7B,IAAkC,CAACX,SAAS,CAACW,MAAD,CAAhD,EAA0D;AAAE,WAAO,CAAP;AAAW;;AACvE,MAAIC,MAAM,GAAGX,KAAK,CAACU,MAAD,CAAL,GAAgBR,MAAM,CAACE,IAAI,CAACM,MAAD,CAAL,CAAnC;AACA,SAAOT,IAAI,CAACU,MAAD,EAAS,KAAT,CAAX;AACA,CALD","sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('../GetIntrinsic');\n\nvar $Math = GetIntrinsic('%Math%');\n\nvar ToNumber = require('./ToNumber');\n\nvar $isNaN = require('../helpers/isNaN');\nvar $isFinite = require('../helpers/isFinite');\nvar $sign = require('../helpers/sign');\nvar $mod = require('../helpers/mod');\n\nvar $floor = $Math.floor;\nvar $abs = $Math.abs;\n\nmodule.exports = function ToUint8(argument) {\n\tvar number = ToNumber(argument);\n\tif ($isNaN(number) || number === 0 || !$isFinite(number)) { return 0; }\n\tvar posInt = $sign(number) * $floor($abs(number));\n\treturn $mod(posInt, 0x100);\n};\n"]},"metadata":{},"sourceType":"script"}