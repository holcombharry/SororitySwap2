{"ast":null,"code":"var _jsxFileName = \"/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/components/Topbar/Topbar.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport pickBy from 'lodash/pickBy';\nimport classNames from 'classnames';\nimport config from '../../config';\nimport routeConfiguration from '../../routing/routeConfiguration';\nimport { FormattedMessage, intlShape, injectIntl } from '../../util/reactIntl';\nimport { isMainSearchTypeKeywords, isOriginInUse } from '../../util/search';\nimport { withViewport } from '../../util/contextHelpers';\nimport { parse, stringify } from '../../util/urlHelpers';\nimport { createResourceLocatorString, pathByRouteName } from '../../util/routes';\nimport { propTypes } from '../../util/types';\nimport { Button, LimitedAccessBanner, Logo, Modal, ModalMissingInformation, NamedLink } from '../../components';\nimport MenuIcon from './MenuIcon';\nimport SearchIcon from './SearchIcon';\nimport TopbarSearchForm from './TopbarSearchForm/TopbarSearchForm';\nimport TopbarMobileMenu from './TopbarMobileMenu/TopbarMobileMenu';\nimport TopbarDesktop from './TopbarDesktop/TopbarDesktop';\nimport css from './Topbar.module.css';\nconst MAX_MOBILE_SCREEN_WIDTH = 768;\n\nconst redirectToURLWithModalState = (props, modalStateParam) => {\n  const {\n    history,\n    location\n  } = props;\n  const {\n    pathname,\n    search,\n    state\n  } = location;\n  const searchString = `?${stringify({\n    [modalStateParam]: 'open',\n    ...parse(search)\n  })}`;\n  history.push(`${pathname}${searchString}`, state);\n};\n\nconst redirectToURLWithoutModalState = (props, modalStateParam) => {\n  const {\n    history,\n    location\n  } = props;\n  const {\n    pathname,\n    search,\n    state\n  } = location;\n  const queryParams = pickBy(parse(search), (v, k) => {\n    return k !== modalStateParam;\n  });\n  const stringified = stringify(queryParams);\n  const searchString = stringified ? `?${stringified}` : '';\n  history.push(`${pathname}${searchString}`, state);\n};\n\nconst GenericError = props => {\n  const {\n    show\n  } = props;\n  const classes = classNames(css.genericError, {\n    [css.genericErrorVisible]: show\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: css.genericErrorContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: css.genericErrorText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"Topbar.genericError\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }))));\n};\n\n_c = GenericError;\nconst {\n  bool\n} = PropTypes;\nGenericError.propTypes = {\n  show: bool.isRequired\n};\n\nclass TopbarComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.handleMobileMenuOpen = this.handleMobileMenuOpen.bind(this);\n    this.handleMobileMenuClose = this.handleMobileMenuClose.bind(this);\n    this.handleMobileSearchOpen = this.handleMobileSearchOpen.bind(this);\n    this.handleMobileSearchClose = this.handleMobileSearchClose.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleLogout = this.handleLogout.bind(this);\n  }\n\n  handleMobileMenuOpen() {\n    redirectToURLWithModalState(this.props, 'mobilemenu');\n  }\n\n  handleMobileMenuClose() {\n    redirectToURLWithoutModalState(this.props, 'mobilemenu');\n  }\n\n  handleMobileSearchOpen() {\n    redirectToURLWithModalState(this.props, 'mobilesearch');\n  }\n\n  handleMobileSearchClose() {\n    redirectToURLWithoutModalState(this.props, 'mobilesearch');\n  }\n\n  handleSubmit(values) {\n    const {\n      currentSearchParams\n    } = this.props;\n    const {\n      history\n    } = this.props;\n\n    const topbarSearchParams = () => {\n      if (isMainSearchTypeKeywords(config)) {\n        return {\n          keywords: values === null || values === void 0 ? void 0 : values.keywords\n        };\n      } // topbar search defaults to 'location' search\n\n\n      const {\n        search,\n        selectedPlace\n      } = values === null || values === void 0 ? void 0 : values.location;\n      const {\n        origin,\n        bounds\n      } = selectedPlace;\n      const originMaybe = isOriginInUse(config) ? {\n        origin\n      } : {};\n      return { ...originMaybe,\n        address: search,\n        bounds\n      };\n    };\n\n    const searchParams = { ...currentSearchParams,\n      ...topbarSearchParams()\n    };\n    history.push(createResourceLocatorString('SearchPage', routeConfiguration(), {}, searchParams));\n  }\n\n  handleLogout() {\n    const {\n      onLogout,\n      history\n    } = this.props;\n    onLogout().then(() => {\n      const path = pathByRouteName('LandingPage', routeConfiguration()); // In production we ensure that data is really lost,\n      // but in development mode we use stored values for debugging\n\n      if (config.dev) {\n        history.push(path);\n      } else if (typeof window !== 'undefined') {\n        window.location = path;\n      }\n\n      console.log('logged out'); // eslint-disable-line\n    });\n  }\n\n  render() {\n    const {\n      className,\n      rootClassName,\n      desktopClassName,\n      mobileRootClassName,\n      mobileClassName,\n      isAuthenticated,\n      authScopes,\n      authInProgress,\n      currentUser,\n      currentUserHasListings,\n      currentUserHasOrders,\n      currentPage,\n      notificationCount,\n      viewport,\n      intl,\n      location,\n      onManageDisableScrolling,\n      onResendVerificationEmail,\n      sendVerificationEmailInProgress,\n      sendVerificationEmailError,\n      showGenericError\n    } = this.props;\n    const {\n      mobilemenu,\n      mobilesearch,\n      keywords,\n      address,\n      origin,\n      bounds\n    } = parse(location.search, {\n      latlng: ['origin'],\n      latlngBounds: ['bounds']\n    });\n    const notificationDot = notificationCount > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: css.notificationDot,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 53\n      }\n    }) : null;\n    const isMobileLayout = viewport.width < MAX_MOBILE_SCREEN_WIDTH;\n    const isMobileMenuOpen = isMobileLayout && mobilemenu === 'open';\n    const isMobileSearchOpen = isMobileLayout && mobilesearch === 'open';\n    const mobileMenu = /*#__PURE__*/React.createElement(TopbarMobileMenu, {\n      isAuthenticated: isAuthenticated,\n      currentUserHasListings: currentUserHasListings,\n      currentUser: currentUser,\n      onLogout: this.handleLogout,\n      notificationCount: notificationCount,\n      currentPage: currentPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 7\n      }\n    });\n\n    const topbarSearcInitialValues = () => {\n      if (isMainSearchTypeKeywords(config)) {\n        return {\n          keywords\n        };\n      } // Only render current search if full place object is available in the URL params\n\n\n      const locationFieldsPresent = isOriginInUse(config) ? address && origin && bounds : address && bounds;\n      return {\n        location: locationFieldsPresent ? {\n          search: address,\n          selectedPlace: {\n            address,\n            origin,\n            bounds\n          }\n        } : null\n      };\n    };\n\n    const initialSearchFormValues = topbarSearcInitialValues();\n    const classes = classNames(rootClassName || css.root, className);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(LimitedAccessBanner, {\n      isAuthenticated: isAuthenticated,\n      authScopes: authScopes,\n      currentUser: currentUser,\n      onLogout: this.handleLogout,\n      currentPage: currentPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames(mobileRootClassName || css.container, mobileClassName),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      rootClassName: css.menu,\n      onClick: this.handleMobileMenuOpen,\n      title: intl.formatMessage({\n        id: 'Topbar.menuIcon'\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(MenuIcon, {\n      className: css.menuIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 13\n      }\n    }), notificationDot), /*#__PURE__*/React.createElement(NamedLink, {\n      className: css.home,\n      name: \"LandingPage\",\n      title: intl.formatMessage({\n        id: 'Topbar.logoIcon'\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Logo, {\n      className: css.logo,\n      format: \"mobile\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      rootClassName: css.searchMenu,\n      onClick: this.handleMobileSearchOpen,\n      title: intl.formatMessage({\n        id: 'Topbar.searchIcon'\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(SearchIcon, {\n      className: css.searchMenuIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: css.desktop,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(TopbarDesktop, {\n      className: desktopClassName,\n      currentUserHasListings: currentUserHasListings,\n      currentUser: currentUser,\n      currentPage: currentPage,\n      initialSearchFormValues: initialSearchFormValues,\n      intl: intl,\n      isAuthenticated: isAuthenticated,\n      notificationCount: notificationCount,\n      onLogout: this.handleLogout,\n      onSearchSubmit: this.handleSubmit,\n      appConfig: config,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Modal, {\n      id: \"TopbarMobileMenu\",\n      isOpen: isMobileMenuOpen,\n      onClose: this.handleMobileMenuClose,\n      usePortal: true,\n      onManageDisableScrolling: onManageDisableScrolling,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }\n    }, authInProgress ? null : mobileMenu), /*#__PURE__*/React.createElement(Modal, {\n      id: \"TopbarMobileSearch\",\n      containerClassName: css.modalContainer,\n      isOpen: isMobileSearchOpen,\n      onClose: this.handleMobileSearchClose,\n      usePortal: true,\n      onManageDisableScrolling: onManageDisableScrolling,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: css.searchContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TopbarSearchForm, {\n      onSubmit: this.handleSubmit,\n      initialValues: initialSearchFormValues,\n      isMobile: true,\n      appConfig: config,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: css.mobileHelp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"Topbar.mobileSearchHelp\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 15\n      }\n    })))), /*#__PURE__*/React.createElement(ModalMissingInformation, {\n      id: \"MissingInformationReminder\",\n      containerClassName: css.missingInformationModal,\n      currentUser: currentUser,\n      currentUserHasListings: currentUserHasListings,\n      currentUserHasOrders: currentUserHasOrders,\n      location: location,\n      onManageDisableScrolling: onManageDisableScrolling,\n      onResendVerificationEmail: onResendVerificationEmail,\n      sendVerificationEmailInProgress: sendVerificationEmailInProgress,\n      sendVerificationEmailError: sendVerificationEmailError,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(GenericError, {\n      show: showGenericError,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nTopbarComponent.defaultProps = {\n  className: null,\n  rootClassName: null,\n  desktopClassName: null,\n  mobileRootClassName: null,\n  mobileClassName: null,\n  notificationCount: 0,\n  currentUser: null,\n  currentUserHasOrders: null,\n  currentPage: null,\n  sendVerificationEmailError: null,\n  authScopes: []\n};\nconst {\n  array,\n  func,\n  number,\n  shape,\n  string\n} = PropTypes;\nTopbarComponent.propTypes = {\n  className: string,\n  rootClassName: string,\n  desktopClassName: string,\n  mobileRootClassName: string,\n  mobileClassName: string,\n  isAuthenticated: bool.isRequired,\n  authScopes: array,\n  authInProgress: bool.isRequired,\n  currentUser: propTypes.currentUser,\n  currentUserHasListings: bool.isRequired,\n  currentUserHasOrders: bool,\n  currentPage: string,\n  notificationCount: number,\n  onLogout: func.isRequired,\n  onManageDisableScrolling: func.isRequired,\n  onResendVerificationEmail: func.isRequired,\n  sendVerificationEmailInProgress: bool.isRequired,\n  sendVerificationEmailError: propTypes.error,\n  showGenericError: bool.isRequired,\n  // These are passed from Page to keep Topbar rendering aware of location changes\n  history: shape({\n    push: func.isRequired\n  }).isRequired,\n  location: shape({\n    search: string.isRequired\n  }).isRequired,\n  // from withViewport\n  viewport: shape({\n    width: number.isRequired,\n    height: number.isRequired\n  }).isRequired,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\nconst Topbar = compose(withViewport, injectIntl)(TopbarComponent);\nTopbar.displayName = 'Topbar';\nexport default Topbar;\n\nvar _c;\n\n$RefreshReg$(_c, \"GenericError\");","map":{"version":3,"sources":["/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/components/Topbar/Topbar.js"],"names":["React","Component","PropTypes","compose","pickBy","classNames","config","routeConfiguration","FormattedMessage","intlShape","injectIntl","isMainSearchTypeKeywords","isOriginInUse","withViewport","parse","stringify","createResourceLocatorString","pathByRouteName","propTypes","Button","LimitedAccessBanner","Logo","Modal","ModalMissingInformation","NamedLink","MenuIcon","SearchIcon","TopbarSearchForm","TopbarMobileMenu","TopbarDesktop","css","MAX_MOBILE_SCREEN_WIDTH","redirectToURLWithModalState","props","modalStateParam","history","location","pathname","search","state","searchString","push","redirectToURLWithoutModalState","queryParams","v","k","stringified","GenericError","show","classes","genericError","genericErrorVisible","genericErrorContent","genericErrorText","bool","isRequired","TopbarComponent","constructor","handleMobileMenuOpen","bind","handleMobileMenuClose","handleMobileSearchOpen","handleMobileSearchClose","handleSubmit","handleLogout","values","currentSearchParams","topbarSearchParams","keywords","selectedPlace","origin","bounds","originMaybe","address","searchParams","onLogout","then","path","dev","window","console","log","render","className","rootClassName","desktopClassName","mobileRootClassName","mobileClassName","isAuthenticated","authScopes","authInProgress","currentUser","currentUserHasListings","currentUserHasOrders","currentPage","notificationCount","viewport","intl","onManageDisableScrolling","onResendVerificationEmail","sendVerificationEmailInProgress","sendVerificationEmailError","showGenericError","mobilemenu","mobilesearch","latlng","latlngBounds","notificationDot","isMobileLayout","width","isMobileMenuOpen","isMobileSearchOpen","mobileMenu","topbarSearcInitialValues","locationFieldsPresent","initialSearchFormValues","root","container","menu","formatMessage","id","menuIcon","home","logo","searchMenu","searchMenuIcon","desktop","modalContainer","searchContainer","mobileHelp","missingInformationModal","defaultProps","array","func","number","shape","string","error","height","Topbar","displayName"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport pickBy from 'lodash/pickBy';\nimport classNames from 'classnames';\n\nimport config from '../../config';\nimport routeConfiguration from '../../routing/routeConfiguration';\nimport { FormattedMessage, intlShape, injectIntl } from '../../util/reactIntl';\nimport { isMainSearchTypeKeywords, isOriginInUse } from '../../util/search';\nimport { withViewport } from '../../util/contextHelpers';\nimport { parse, stringify } from '../../util/urlHelpers';\nimport { createResourceLocatorString, pathByRouteName } from '../../util/routes';\nimport { propTypes } from '../../util/types';\nimport {\n  Button,\n  LimitedAccessBanner,\n  Logo,\n  Modal,\n  ModalMissingInformation,\n  NamedLink,\n} from '../../components';\n\nimport MenuIcon from './MenuIcon';\nimport SearchIcon from './SearchIcon';\nimport TopbarSearchForm from './TopbarSearchForm/TopbarSearchForm';\nimport TopbarMobileMenu from './TopbarMobileMenu/TopbarMobileMenu';\nimport TopbarDesktop from './TopbarDesktop/TopbarDesktop';\n\nimport css from './Topbar.module.css';\n\nconst MAX_MOBILE_SCREEN_WIDTH = 768;\n\nconst redirectToURLWithModalState = (props, modalStateParam) => {\n  const { history, location } = props;\n  const { pathname, search, state } = location;\n  const searchString = `?${stringify({ [modalStateParam]: 'open', ...parse(search) })}`;\n  history.push(`${pathname}${searchString}`, state);\n};\n\nconst redirectToURLWithoutModalState = (props, modalStateParam) => {\n  const { history, location } = props;\n  const { pathname, search, state } = location;\n  const queryParams = pickBy(parse(search), (v, k) => {\n    return k !== modalStateParam;\n  });\n  const stringified = stringify(queryParams);\n  const searchString = stringified ? `?${stringified}` : '';\n  history.push(`${pathname}${searchString}`, state);\n};\n\nconst GenericError = props => {\n  const { show } = props;\n  const classes = classNames(css.genericError, {\n    [css.genericErrorVisible]: show,\n  });\n  return (\n    <div className={classes}>\n      <div className={css.genericErrorContent}>\n        <p className={css.genericErrorText}>\n          <FormattedMessage id=\"Topbar.genericError\" />\n        </p>\n      </div>\n    </div>\n  );\n};\n\nconst { bool } = PropTypes;\n\nGenericError.propTypes = {\n  show: bool.isRequired,\n};\n\nclass TopbarComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.handleMobileMenuOpen = this.handleMobileMenuOpen.bind(this);\n    this.handleMobileMenuClose = this.handleMobileMenuClose.bind(this);\n    this.handleMobileSearchOpen = this.handleMobileSearchOpen.bind(this);\n    this.handleMobileSearchClose = this.handleMobileSearchClose.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleLogout = this.handleLogout.bind(this);\n  }\n\n  handleMobileMenuOpen() {\n    redirectToURLWithModalState(this.props, 'mobilemenu');\n  }\n\n  handleMobileMenuClose() {\n    redirectToURLWithoutModalState(this.props, 'mobilemenu');\n  }\n\n  handleMobileSearchOpen() {\n    redirectToURLWithModalState(this.props, 'mobilesearch');\n  }\n\n  handleMobileSearchClose() {\n    redirectToURLWithoutModalState(this.props, 'mobilesearch');\n  }\n\n  handleSubmit(values) {\n    const { currentSearchParams } = this.props;\n    const { history } = this.props;\n\n    const topbarSearchParams = () => {\n      if (isMainSearchTypeKeywords(config)) {\n        return { keywords: values?.keywords };\n      }\n      // topbar search defaults to 'location' search\n      const { search, selectedPlace } = values?.location;\n      const { origin, bounds } = selectedPlace;\n      const originMaybe = isOriginInUse(config) ? { origin } : {};\n\n      return {\n        ...originMaybe,\n        address: search,\n        bounds,\n      };\n    };\n    const searchParams = {\n      ...currentSearchParams,\n      ...topbarSearchParams(),\n    };\n    history.push(createResourceLocatorString('SearchPage', routeConfiguration(), {}, searchParams));\n  }\n\n  handleLogout() {\n    const { onLogout, history } = this.props;\n    onLogout().then(() => {\n      const path = pathByRouteName('LandingPage', routeConfiguration());\n\n      // In production we ensure that data is really lost,\n      // but in development mode we use stored values for debugging\n      if (config.dev) {\n        history.push(path);\n      } else if (typeof window !== 'undefined') {\n        window.location = path;\n      }\n\n      console.log('logged out'); // eslint-disable-line\n    });\n  }\n\n  render() {\n    const {\n      className,\n      rootClassName,\n      desktopClassName,\n      mobileRootClassName,\n      mobileClassName,\n      isAuthenticated,\n      authScopes,\n      authInProgress,\n      currentUser,\n      currentUserHasListings,\n      currentUserHasOrders,\n      currentPage,\n      notificationCount,\n      viewport,\n      intl,\n      location,\n      onManageDisableScrolling,\n      onResendVerificationEmail,\n      sendVerificationEmailInProgress,\n      sendVerificationEmailError,\n      showGenericError,\n    } = this.props;\n\n    const { mobilemenu, mobilesearch, keywords, address, origin, bounds } = parse(location.search, {\n      latlng: ['origin'],\n      latlngBounds: ['bounds'],\n    });\n\n    const notificationDot = notificationCount > 0 ? <div className={css.notificationDot} /> : null;\n\n    const isMobileLayout = viewport.width < MAX_MOBILE_SCREEN_WIDTH;\n    const isMobileMenuOpen = isMobileLayout && mobilemenu === 'open';\n    const isMobileSearchOpen = isMobileLayout && mobilesearch === 'open';\n\n    const mobileMenu = (\n      <TopbarMobileMenu\n        isAuthenticated={isAuthenticated}\n        currentUserHasListings={currentUserHasListings}\n        currentUser={currentUser}\n        onLogout={this.handleLogout}\n        notificationCount={notificationCount}\n        currentPage={currentPage}\n      />\n    );\n\n    const topbarSearcInitialValues = () => {\n      if (isMainSearchTypeKeywords(config)) {\n        return { keywords };\n      }\n\n      // Only render current search if full place object is available in the URL params\n      const locationFieldsPresent = isOriginInUse(config)\n        ? address && origin && bounds\n        : address && bounds;\n      return {\n        location: locationFieldsPresent\n          ? {\n              search: address,\n              selectedPlace: { address, origin, bounds },\n            }\n          : null,\n      };\n    };\n    const initialSearchFormValues = topbarSearcInitialValues();\n\n    const classes = classNames(rootClassName || css.root, className);\n\n    return (\n      <div className={classes}>\n        <LimitedAccessBanner\n          isAuthenticated={isAuthenticated}\n          authScopes={authScopes}\n          currentUser={currentUser}\n          onLogout={this.handleLogout}\n          currentPage={currentPage}\n        />\n        <div className={classNames(mobileRootClassName || css.container, mobileClassName)}>\n          <Button\n            rootClassName={css.menu}\n            onClick={this.handleMobileMenuOpen}\n            title={intl.formatMessage({ id: 'Topbar.menuIcon' })}\n          >\n            <MenuIcon className={css.menuIcon} />\n            {notificationDot}\n          </Button>\n          <NamedLink\n            className={css.home}\n            name=\"LandingPage\"\n            title={intl.formatMessage({ id: 'Topbar.logoIcon' })}\n          >\n            <Logo className={css.logo} format=\"mobile\" />\n          </NamedLink>\n          <Button\n            rootClassName={css.searchMenu}\n            onClick={this.handleMobileSearchOpen}\n            title={intl.formatMessage({ id: 'Topbar.searchIcon' })}\n          >\n            <SearchIcon className={css.searchMenuIcon} />\n          </Button>\n        </div>\n        <div className={css.desktop}>\n          <TopbarDesktop\n            className={desktopClassName}\n            currentUserHasListings={currentUserHasListings}\n            currentUser={currentUser}\n            currentPage={currentPage}\n            initialSearchFormValues={initialSearchFormValues}\n            intl={intl}\n            isAuthenticated={isAuthenticated}\n            notificationCount={notificationCount}\n            onLogout={this.handleLogout}\n            onSearchSubmit={this.handleSubmit}\n            appConfig={config}\n          />\n        </div>\n        <Modal\n          id=\"TopbarMobileMenu\"\n          isOpen={isMobileMenuOpen}\n          onClose={this.handleMobileMenuClose}\n          usePortal\n          onManageDisableScrolling={onManageDisableScrolling}\n        >\n          {authInProgress ? null : mobileMenu}\n        </Modal>\n        <Modal\n          id=\"TopbarMobileSearch\"\n          containerClassName={css.modalContainer}\n          isOpen={isMobileSearchOpen}\n          onClose={this.handleMobileSearchClose}\n          usePortal\n          onManageDisableScrolling={onManageDisableScrolling}\n        >\n          <div className={css.searchContainer}>\n            <TopbarSearchForm\n              onSubmit={this.handleSubmit}\n              initialValues={initialSearchFormValues}\n              isMobile\n              appConfig={config}\n            />\n            <p className={css.mobileHelp}>\n              <FormattedMessage id=\"Topbar.mobileSearchHelp\" />\n            </p>\n          </div>\n        </Modal>\n        <ModalMissingInformation\n          id=\"MissingInformationReminder\"\n          containerClassName={css.missingInformationModal}\n          currentUser={currentUser}\n          currentUserHasListings={currentUserHasListings}\n          currentUserHasOrders={currentUserHasOrders}\n          location={location}\n          onManageDisableScrolling={onManageDisableScrolling}\n          onResendVerificationEmail={onResendVerificationEmail}\n          sendVerificationEmailInProgress={sendVerificationEmailInProgress}\n          sendVerificationEmailError={sendVerificationEmailError}\n        />\n\n        <GenericError show={showGenericError} />\n      </div>\n    );\n  }\n}\n\nTopbarComponent.defaultProps = {\n  className: null,\n  rootClassName: null,\n  desktopClassName: null,\n  mobileRootClassName: null,\n  mobileClassName: null,\n  notificationCount: 0,\n  currentUser: null,\n  currentUserHasOrders: null,\n  currentPage: null,\n  sendVerificationEmailError: null,\n  authScopes: [],\n};\n\nconst { array, func, number, shape, string } = PropTypes;\n\nTopbarComponent.propTypes = {\n  className: string,\n  rootClassName: string,\n  desktopClassName: string,\n  mobileRootClassName: string,\n  mobileClassName: string,\n  isAuthenticated: bool.isRequired,\n  authScopes: array,\n  authInProgress: bool.isRequired,\n  currentUser: propTypes.currentUser,\n  currentUserHasListings: bool.isRequired,\n  currentUserHasOrders: bool,\n  currentPage: string,\n  notificationCount: number,\n  onLogout: func.isRequired,\n  onManageDisableScrolling: func.isRequired,\n  onResendVerificationEmail: func.isRequired,\n  sendVerificationEmailInProgress: bool.isRequired,\n  sendVerificationEmailError: propTypes.error,\n  showGenericError: bool.isRequired,\n\n  // These are passed from Page to keep Topbar rendering aware of location changes\n  history: shape({\n    push: func.isRequired,\n  }).isRequired,\n  location: shape({\n    search: string.isRequired,\n  }).isRequired,\n\n  // from withViewport\n  viewport: shape({\n    width: number.isRequired,\n    height: number.isRequired,\n  }).isRequired,\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst Topbar = compose(\n  withViewport,\n  injectIntl\n)(TopbarComponent);\n\nTopbar.displayName = 'Topbar';\n\nexport default Topbar;\n"]},"metadata":{},"sourceType":"module"}