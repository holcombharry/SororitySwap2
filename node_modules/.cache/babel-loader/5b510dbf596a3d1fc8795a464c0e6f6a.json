{"ast":null,"code":"import { storableError } from '../../util/errors'; // ================ Action types ================ //\n\nexport const CHANGE_PASSWORD_REQUEST = 'app/PasswordChangePage/CHANGE_PASSWORD_REQUEST';\nexport const CHANGE_PASSWORD_SUCCESS = 'app/PasswordChangePage/CHANGE_PASSWORD_SUCCESS';\nexport const CHANGE_PASSWORD_ERROR = 'app/PasswordChangePage/CHANGE_PASSWORD_ERROR';\nexport const CHANGE_PASSWORD_CLEAR = 'app/PasswordChangePage/CHANGE_PASSWORD_CLEAR';\nexport const RESET_PASSWORD_REQUEST = 'app/PasswordChangePage/RESET_PASSWORD_REQUEST';\nexport const RESET_PASSWORD_SUCCESS = 'app/PasswordChangePage/RESET_PASSWORD_SUCCESS';\nexport const RESET_PASSWORD_ERROR = 'app/PasswordChangePage/RESET_PASSWORD_ERROR'; // ================ Reducer ================ //\n\nconst initialState = {\n  changePasswordError: null,\n  changePasswordInProgress: false,\n  passwordChanged: false,\n  resetPasswordInProgress: false,\n  resetPasswordError: null\n};\nexport default function reducer(state = initialState, action = {}) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case CHANGE_PASSWORD_REQUEST:\n      return { ...state,\n        changePasswordInProgress: true,\n        changePasswordError: null,\n        passwordChanged: false\n      };\n\n    case CHANGE_PASSWORD_SUCCESS:\n      return { ...state,\n        changePasswordInProgress: false,\n        passwordChanged: true\n      };\n\n    case CHANGE_PASSWORD_ERROR:\n      return { ...state,\n        changePasswordInProgress: false,\n        changePasswordError: payload\n      };\n\n    case CHANGE_PASSWORD_CLEAR:\n      return { ...initialState\n      };\n\n    case RESET_PASSWORD_REQUEST:\n      return { ...state,\n        resetPasswordInProgress: true,\n        resetPasswordError: null\n      };\n\n    case RESET_PASSWORD_SUCCESS:\n      return { ...state,\n        resetPasswordInProgress: false\n      };\n\n    case RESET_PASSWORD_ERROR:\n      console.error(payload); // eslint-disable-line no-console\n\n      return { ...state,\n        resetPasswordInProgress: false,\n        resetPasswordError: payload\n      };\n\n    default:\n      return state;\n  }\n} // ================ Action creators ================ //\n\nexport const changePasswordRequest = () => ({\n  type: CHANGE_PASSWORD_REQUEST\n});\nexport const changePasswordSuccess = () => ({\n  type: CHANGE_PASSWORD_SUCCESS\n});\nexport const changePasswordError = error => ({\n  type: CHANGE_PASSWORD_ERROR,\n  payload: error,\n  error: true\n});\nexport const changePasswordClear = () => ({\n  type: CHANGE_PASSWORD_CLEAR\n});\nexport const resetPasswordRequest = () => ({\n  type: RESET_PASSWORD_REQUEST\n});\nexport const resetPasswordSuccess = () => ({\n  type: RESET_PASSWORD_SUCCESS\n});\nexport const resetPasswordError = e => ({\n  type: RESET_PASSWORD_ERROR,\n  error: true,\n  payload: e\n}); // ================ Thunks ================ //\n\nexport const changePassword = params => (dispatch, getState, sdk) => {\n  dispatch(changePasswordRequest());\n  const {\n    newPassword,\n    currentPassword\n  } = params;\n  return sdk.currentUser.changePassword({\n    newPassword,\n    currentPassword\n  }).then(() => dispatch(changePasswordSuccess())).catch(e => {\n    dispatch(changePasswordError(storableError(storableError(e)))); // This is thrown so that form can be cleared\n    // after a timeout on changePassword submit handler\n\n    throw e;\n  });\n};\nexport const resetPassword = email => (dispatch, getState, sdk) => {\n  dispatch(resetPasswordRequest());\n  return sdk.passwordReset.request({\n    email\n  }).then(() => dispatch(resetPasswordSuccess())).catch(e => dispatch(resetPasswordError(storableError(e))));\n};","map":{"version":3,"sources":["/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/containers/PasswordChangePage/PasswordChangePage.duck.js"],"names":["storableError","CHANGE_PASSWORD_REQUEST","CHANGE_PASSWORD_SUCCESS","CHANGE_PASSWORD_ERROR","CHANGE_PASSWORD_CLEAR","RESET_PASSWORD_REQUEST","RESET_PASSWORD_SUCCESS","RESET_PASSWORD_ERROR","initialState","changePasswordError","changePasswordInProgress","passwordChanged","resetPasswordInProgress","resetPasswordError","reducer","state","action","type","payload","console","error","changePasswordRequest","changePasswordSuccess","changePasswordClear","resetPasswordRequest","resetPasswordSuccess","e","changePassword","params","dispatch","getState","sdk","newPassword","currentPassword","currentUser","then","catch","resetPassword","email","passwordReset","request"],"mappings":"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","sourcesContent":["import { storableError } from '../../util/errors';\n\n// ================ Action types ================ //\n\nexport const CHANGE_PASSWORD_REQUEST = 'app/PasswordChangePage/CHANGE_PASSWORD_REQUEST';\nexport const CHANGE_PASSWORD_SUCCESS = 'app/PasswordChangePage/CHANGE_PASSWORD_SUCCESS';\nexport const CHANGE_PASSWORD_ERROR = 'app/PasswordChangePage/CHANGE_PASSWORD_ERROR';\n\nexport const CHANGE_PASSWORD_CLEAR = 'app/PasswordChangePage/CHANGE_PASSWORD_CLEAR';\n\nexport const RESET_PASSWORD_REQUEST = 'app/PasswordChangePage/RESET_PASSWORD_REQUEST';\nexport const RESET_PASSWORD_SUCCESS = 'app/PasswordChangePage/RESET_PASSWORD_SUCCESS';\nexport const RESET_PASSWORD_ERROR = 'app/PasswordChangePage/RESET_PASSWORD_ERROR';\n\n// ================ Reducer ================ //\n\nconst initialState = {\n  changePasswordError: null,\n  changePasswordInProgress: false,\n  passwordChanged: false,\n  resetPasswordInProgress: false,\n  resetPasswordError: null,\n};\n\nexport default function reducer(state = initialState, action = {}) {\n  const { type, payload } = action;\n  switch (type) {\n    case CHANGE_PASSWORD_REQUEST:\n      return {\n        ...state,\n        changePasswordInProgress: true,\n        changePasswordError: null,\n        passwordChanged: false,\n      };\n    case CHANGE_PASSWORD_SUCCESS:\n      return { ...state, changePasswordInProgress: false, passwordChanged: true };\n    case CHANGE_PASSWORD_ERROR:\n      return { ...state, changePasswordInProgress: false, changePasswordError: payload };\n\n    case CHANGE_PASSWORD_CLEAR:\n      return { ...initialState };\n\n    case RESET_PASSWORD_REQUEST:\n      return { ...state, resetPasswordInProgress: true, resetPasswordError: null };\n    case RESET_PASSWORD_SUCCESS:\n      return { ...state, resetPasswordInProgress: false };\n    case RESET_PASSWORD_ERROR:\n      console.error(payload); // eslint-disable-line no-console\n      return { ...state, resetPasswordInProgress: false, resetPasswordError: payload };\n\n    default:\n      return state;\n  }\n}\n\n// ================ Action creators ================ //\n\nexport const changePasswordRequest = () => ({ type: CHANGE_PASSWORD_REQUEST });\nexport const changePasswordSuccess = () => ({ type: CHANGE_PASSWORD_SUCCESS });\nexport const changePasswordError = error => ({\n  type: CHANGE_PASSWORD_ERROR,\n  payload: error,\n  error: true,\n});\n\nexport const changePasswordClear = () => ({ type: CHANGE_PASSWORD_CLEAR });\n\nexport const resetPasswordRequest = () => ({ type: RESET_PASSWORD_REQUEST });\n\nexport const resetPasswordSuccess = () => ({ type: RESET_PASSWORD_SUCCESS });\n\nexport const resetPasswordError = e => ({\n  type: RESET_PASSWORD_ERROR,\n  error: true,\n  payload: e,\n});\n\n// ================ Thunks ================ //\n\nexport const changePassword = params => (dispatch, getState, sdk) => {\n  dispatch(changePasswordRequest());\n  const { newPassword, currentPassword } = params;\n\n  return sdk.currentUser\n    .changePassword({ newPassword, currentPassword })\n    .then(() => dispatch(changePasswordSuccess()))\n    .catch(e => {\n      dispatch(changePasswordError(storableError(storableError(e))));\n      // This is thrown so that form can be cleared\n      // after a timeout on changePassword submit handler\n      throw e;\n    });\n};\n\nexport const resetPassword = email => (dispatch, getState, sdk) => {\n  dispatch(resetPasswordRequest());\n  return sdk.passwordReset\n    .request({ email })\n    .then(() => dispatch(resetPasswordSuccess()))\n    .catch(e => dispatch(resetPasswordError(storableError(e))));\n};\n"]},"metadata":{},"sourceType":"module"}