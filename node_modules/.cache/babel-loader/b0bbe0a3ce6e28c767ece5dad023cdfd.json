{"ast":null,"code":"var _jsxFileName = \"/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/containers/SearchPage/BookingDateRangeFilter/BookingDateRangeFilter.js\";\nimport React, { Component } from 'react';\nimport { arrayOf, bool, func, node, number, object, string } from 'prop-types';\nimport { injectIntl, intlShape } from '../../../util/reactIntl';\nimport { parseDateFromISO8601, stringifyDateToISO8601 } from '../../../util/dates';\nimport { FieldDateRangeController } from '../../../components';\nimport FilterPlain from '../FilterPlain/FilterPlain';\nimport FilterPopup from '../FilterPopup/FilterPopup';\nimport FilterPopupForSidebar from './FilterPopupForSidebar';\nimport css from './BookingDateRangeFilter.module.css';\n\nconst getDatesQueryParamName = queryParamNames => {\n  return Array.isArray(queryParamNames) ? queryParamNames[0] : typeof queryParamNames === 'string' ? queryParamNames : 'dates';\n}; // Parse query parameter, which should look like \"2020-05-28,2020-05-31\"\n\n\nconst parseValue = value => {\n  const rawValuesFromParams = value ? value.split(',') : [];\n  const [startDate, endDate] = rawValuesFromParams.map(v => parseDateFromISO8601(v));\n  return value && startDate && endDate ? {\n    dates: {\n      startDate,\n      endDate\n    }\n  } : {\n    dates: null\n  };\n}; // Format dateRange value for the query. It's given by FieldDateRangeInput:\n// { dates: { startDate, endDate } }\n\n\nconst formatValue = (dateRange, queryParamName) => {\n  const hasDates = dateRange && dateRange.dates;\n  const {\n    startDate,\n    endDate\n  } = hasDates ? dateRange.dates : {};\n  const start = startDate ? stringifyDateToISO8601(startDate) : null;\n  const end = endDate ? stringifyDateToISO8601(endDate) : null;\n  const value = start && end ? `${start},${end}` : null;\n  return {\n    [queryParamName]: value\n  };\n};\n\nexport class BookingDateRangeFilterComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: true\n    };\n    this.popupControllerRef = null;\n    this.plainControllerRef = null;\n    this.toggleIsOpen = this.toggleIsOpen.bind(this);\n  }\n\n  toggleIsOpen() {\n    this.setState(prevState => ({\n      isOpen: !prevState.isOpen\n    }));\n  }\n\n  render() {\n    const {\n      className,\n      rootClassName,\n      showAsPopup,\n      isDesktop,\n      initialValues,\n      id,\n      contentPlacementOffset,\n      onSubmit,\n      queryParamNames,\n      label,\n      intl,\n      ...rest\n    } = this.props;\n    const datesQueryParamName = getDatesQueryParamName(queryParamNames);\n    const initialDates = initialValues && initialValues[datesQueryParamName] ? parseValue(initialValues[datesQueryParamName]) : {\n      dates: null\n    };\n    const isSelected = !!initialDates.dates;\n    const startDate = isSelected ? initialDates.dates.startDate : null;\n    const endDate = isSelected ? initialDates.dates.endDate : null;\n    const format = {\n      month: 'short',\n      day: 'numeric'\n    };\n    const formattedStartDate = isSelected ? intl.formatDate(startDate, format) : null;\n    const formattedEndDate = isSelected ? intl.formatDate(endDate, format) : null;\n    const labelForPlain = isSelected ? intl.formatMessage({\n      id: 'BookingDateRangeFilter.labelSelectedPlain'\n    }, {\n      dates: `${formattedStartDate} - ${formattedEndDate}`\n    }) : label ? label : intl.formatMessage({\n      id: 'BookingDateRangeFilter.labelPlain'\n    });\n    const labelForPopup = isSelected ? intl.formatMessage({\n      id: 'BookingDateRangeFilter.labelSelectedPopup'\n    }, {\n      dates: `${formattedStartDate} - ${formattedEndDate}`\n    }) : label ? label : intl.formatMessage({\n      id: 'BookingDateRangeFilter.labelPopup'\n    });\n    const labelSelection = isSelected ? intl.formatMessage({\n      id: 'BookingDateRangeFilter.labelSelectedPopup'\n    }, {\n      dates: `${formattedStartDate} - ${formattedEndDate}`\n    }) : null;\n\n    const handleSubmit = values => {\n      onSubmit(formatValue(values, datesQueryParamName));\n    };\n\n    const onClearPopupMaybe = this.popupControllerRef && this.popupControllerRef.onReset ? {\n      onClear: () => this.popupControllerRef.onReset(null, null)\n    } : {};\n    const onCancelPopupMaybe = this.popupControllerRef && this.popupControllerRef.onReset ? {\n      onCancel: () => this.popupControllerRef.onReset(startDate, endDate)\n    } : {};\n    const onClearPlainMaybe = this.plainControllerRef && this.plainControllerRef.onReset ? {\n      onClear: () => this.plainControllerRef.onReset(null, null)\n    } : {};\n    return showAsPopup ? /*#__PURE__*/React.createElement(FilterPopup, Object.assign({\n      className: className,\n      rootClassName: rootClassName,\n      popupClassName: css.popupSize,\n      label: labelForPopup,\n      isSelected: isSelected,\n      id: `${id}.popup`,\n      showAsPopup: true,\n      contentPlacementOffset: contentPlacementOffset,\n      onSubmit: handleSubmit\n    }, onClearPopupMaybe, onCancelPopupMaybe, {\n      initialValues: initialDates\n    }, rest, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(FieldDateRangeController, {\n      name: \"dates\",\n      controllerRef: node => {\n        this.popupControllerRef = node;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }\n    })) : isDesktop ? /*#__PURE__*/React.createElement(FilterPopupForSidebar, Object.assign({\n      className: className,\n      rootClassName: rootClassName,\n      popupClassName: css.popupSize,\n      label: label,\n      labelSelection: labelSelection,\n      isSelected: isSelected,\n      id: `${id}.popup`,\n      showAsPopup: true,\n      contentPlacementOffset: contentPlacementOffset,\n      onSubmit: handleSubmit\n    }, onClearPopupMaybe, onCancelPopupMaybe, {\n      initialValues: initialDates\n    }, rest, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(FieldDateRangeController, {\n      name: \"dates\",\n      controllerRef: node => {\n        this.popupControllerRef = node;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }\n    })) : /*#__PURE__*/React.createElement(FilterPlain, Object.assign({\n      className: className,\n      rootClassName: rootClassName,\n      label: label,\n      labelSelection: labelSelection,\n      labelSelectionSeparator: \":\",\n      isSelected: isSelected,\n      id: `${id}.plain`,\n      liveEdit: true,\n      contentPlacementOffset: contentPlacementOffset,\n      onSubmit: handleSubmit\n    }, onClearPlainMaybe, {\n      initialValues: initialDates\n    }, rest, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(FieldDateRangeController, {\n      name: \"dates\",\n      controllerRef: node => {\n        this.plainControllerRef = node;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\nBookingDateRangeFilterComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  showAsPopup: true,\n  liveEdit: false,\n  initialValues: null,\n  contentPlacementOffset: 0\n};\nBookingDateRangeFilterComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  id: string.isRequired,\n  label: node,\n  showAsPopup: bool,\n  liveEdit: bool,\n  queryParamNames: arrayOf(string).isRequired,\n  onSubmit: func.isRequired,\n  initialValues: object,\n  contentPlacementOffset: number,\n  // form injectIntl\n  intl: intlShape.isRequired\n};\nconst BookingDateRangeFilter = injectIntl(BookingDateRangeFilterComponent);\n_c = BookingDateRangeFilter;\nexport default BookingDateRangeFilter;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookingDateRangeFilter\");","map":{"version":3,"sources":["/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/containers/SearchPage/BookingDateRangeFilter/BookingDateRangeFilter.js"],"names":["React","Component","arrayOf","bool","func","node","number","object","string","injectIntl","intlShape","parseDateFromISO8601","stringifyDateToISO8601","FieldDateRangeController","FilterPlain","FilterPopup","FilterPopupForSidebar","css","getDatesQueryParamName","queryParamNames","Array","isArray","parseValue","value","rawValuesFromParams","split","startDate","endDate","map","v","dates","formatValue","dateRange","queryParamName","hasDates","start","end","BookingDateRangeFilterComponent","constructor","props","state","isOpen","popupControllerRef","plainControllerRef","toggleIsOpen","bind","setState","prevState","render","className","rootClassName","showAsPopup","isDesktop","initialValues","id","contentPlacementOffset","onSubmit","label","intl","rest","datesQueryParamName","initialDates","isSelected","format","month","day","formattedStartDate","formatDate","formattedEndDate","labelForPlain","formatMessage","labelForPopup","labelSelection","handleSubmit","values","onClearPopupMaybe","onReset","onClear","onCancelPopupMaybe","onCancel","onClearPlainMaybe","popupSize","defaultProps","liveEdit","propTypes","isRequired","BookingDateRangeFilter"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { arrayOf, bool, func, node, number, object, string } from 'prop-types';\n\nimport { injectIntl, intlShape } from '../../../util/reactIntl';\nimport { parseDateFromISO8601, stringifyDateToISO8601 } from '../../../util/dates';\n\nimport { FieldDateRangeController } from '../../../components';\n\nimport FilterPlain from '../FilterPlain/FilterPlain';\nimport FilterPopup from '../FilterPopup/FilterPopup';\n\nimport FilterPopupForSidebar from './FilterPopupForSidebar';\nimport css from './BookingDateRangeFilter.module.css';\n\nconst getDatesQueryParamName = queryParamNames => {\n  return Array.isArray(queryParamNames)\n    ? queryParamNames[0]\n    : typeof queryParamNames === 'string'\n    ? queryParamNames\n    : 'dates';\n};\n\n// Parse query parameter, which should look like \"2020-05-28,2020-05-31\"\nconst parseValue = value => {\n  const rawValuesFromParams = value ? value.split(',') : [];\n  const [startDate, endDate] = rawValuesFromParams.map(v => parseDateFromISO8601(v));\n  return value && startDate && endDate ? { dates: { startDate, endDate } } : { dates: null };\n};\n// Format dateRange value for the query. It's given by FieldDateRangeInput:\n// { dates: { startDate, endDate } }\nconst formatValue = (dateRange, queryParamName) => {\n  const hasDates = dateRange && dateRange.dates;\n  const { startDate, endDate } = hasDates ? dateRange.dates : {};\n  const start = startDate ? stringifyDateToISO8601(startDate) : null;\n  const end = endDate ? stringifyDateToISO8601(endDate) : null;\n  const value = start && end ? `${start},${end}` : null;\n  return { [queryParamName]: value };\n};\n\nexport class BookingDateRangeFilterComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { isOpen: true };\n\n    this.popupControllerRef = null;\n    this.plainControllerRef = null;\n\n    this.toggleIsOpen = this.toggleIsOpen.bind(this);\n  }\n\n  toggleIsOpen() {\n    this.setState(prevState => ({ isOpen: !prevState.isOpen }));\n  }\n\n  render() {\n    const {\n      className,\n      rootClassName,\n      showAsPopup,\n      isDesktop,\n      initialValues,\n      id,\n      contentPlacementOffset,\n      onSubmit,\n      queryParamNames,\n      label,\n      intl,\n      ...rest\n    } = this.props;\n\n    const datesQueryParamName = getDatesQueryParamName(queryParamNames);\n    const initialDates =\n      initialValues && initialValues[datesQueryParamName]\n        ? parseValue(initialValues[datesQueryParamName])\n        : { dates: null };\n\n    const isSelected = !!initialDates.dates;\n    const startDate = isSelected ? initialDates.dates.startDate : null;\n    const endDate = isSelected ? initialDates.dates.endDate : null;\n\n    const format = {\n      month: 'short',\n      day: 'numeric',\n    };\n\n    const formattedStartDate = isSelected ? intl.formatDate(startDate, format) : null;\n    const formattedEndDate = isSelected ? intl.formatDate(endDate, format) : null;\n\n    const labelForPlain = isSelected\n      ? intl.formatMessage(\n          { id: 'BookingDateRangeFilter.labelSelectedPlain' },\n          {\n            dates: `${formattedStartDate} - ${formattedEndDate}`,\n          }\n        )\n      : label\n      ? label\n      : intl.formatMessage({ id: 'BookingDateRangeFilter.labelPlain' });\n\n    const labelForPopup = isSelected\n      ? intl.formatMessage(\n          { id: 'BookingDateRangeFilter.labelSelectedPopup' },\n          {\n            dates: `${formattedStartDate} - ${formattedEndDate}`,\n          }\n        )\n      : label\n      ? label\n      : intl.formatMessage({ id: 'BookingDateRangeFilter.labelPopup' });\n\n    const labelSelection = isSelected\n      ? intl.formatMessage(\n          { id: 'BookingDateRangeFilter.labelSelectedPopup' },\n          {\n            dates: `${formattedStartDate} - ${formattedEndDate}`,\n          }\n        )\n      : null;\n\n    const handleSubmit = values => {\n      onSubmit(formatValue(values, datesQueryParamName));\n    };\n\n    const onClearPopupMaybe =\n      this.popupControllerRef && this.popupControllerRef.onReset\n        ? { onClear: () => this.popupControllerRef.onReset(null, null) }\n        : {};\n\n    const onCancelPopupMaybe =\n      this.popupControllerRef && this.popupControllerRef.onReset\n        ? { onCancel: () => this.popupControllerRef.onReset(startDate, endDate) }\n        : {};\n\n    const onClearPlainMaybe =\n      this.plainControllerRef && this.plainControllerRef.onReset\n        ? { onClear: () => this.plainControllerRef.onReset(null, null) }\n        : {};\n\n    return showAsPopup ? (\n      <FilterPopup\n        className={className}\n        rootClassName={rootClassName}\n        popupClassName={css.popupSize}\n        label={labelForPopup}\n        isSelected={isSelected}\n        id={`${id}.popup`}\n        showAsPopup\n        contentPlacementOffset={contentPlacementOffset}\n        onSubmit={handleSubmit}\n        {...onClearPopupMaybe}\n        {...onCancelPopupMaybe}\n        initialValues={initialDates}\n        {...rest}\n      >\n        <FieldDateRangeController\n          name=\"dates\"\n          controllerRef={node => {\n            this.popupControllerRef = node;\n          }}\n        />\n      </FilterPopup>\n    ) : isDesktop ? (\n      <FilterPopupForSidebar\n        className={className}\n        rootClassName={rootClassName}\n        popupClassName={css.popupSize}\n        label={label}\n        labelSelection={labelSelection}\n        isSelected={isSelected}\n        id={`${id}.popup`}\n        showAsPopup\n        contentPlacementOffset={contentPlacementOffset}\n        onSubmit={handleSubmit}\n        {...onClearPopupMaybe}\n        {...onCancelPopupMaybe}\n        initialValues={initialDates}\n        {...rest}\n      >\n        <FieldDateRangeController\n          name=\"dates\"\n          controllerRef={node => {\n            this.popupControllerRef = node;\n          }}\n        />\n      </FilterPopupForSidebar>\n    ) : (\n      <FilterPlain\n        className={className}\n        rootClassName={rootClassName}\n        label={label}\n        labelSelection={labelSelection}\n        labelSelectionSeparator=\":\"\n        isSelected={isSelected}\n        id={`${id}.plain`}\n        liveEdit\n        contentPlacementOffset={contentPlacementOffset}\n        onSubmit={handleSubmit}\n        {...onClearPlainMaybe}\n        initialValues={initialDates}\n        {...rest}\n      >\n        <FieldDateRangeController\n          name=\"dates\"\n          controllerRef={node => {\n            this.plainControllerRef = node;\n          }}\n        />\n      </FilterPlain>\n    );\n  }\n}\n\nBookingDateRangeFilterComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  showAsPopup: true,\n  liveEdit: false,\n  initialValues: null,\n  contentPlacementOffset: 0,\n};\n\nBookingDateRangeFilterComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  id: string.isRequired,\n  label: node,\n  showAsPopup: bool,\n  liveEdit: bool,\n  queryParamNames: arrayOf(string).isRequired,\n  onSubmit: func.isRequired,\n  initialValues: object,\n  contentPlacementOffset: number,\n\n  // form injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst BookingDateRangeFilter = injectIntl(BookingDateRangeFilterComponent);\n\nexport default BookingDateRangeFilter;\n"]},"metadata":{},"sourceType":"module"}