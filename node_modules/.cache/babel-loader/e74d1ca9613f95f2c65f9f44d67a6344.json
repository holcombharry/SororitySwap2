{"ast":null,"code":"var _jsxFileName = \"/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/components/Map/StaticGoogleMap.js\";\nimport React, { Component } from 'react';\nimport { number, object, shape, string } from 'prop-types';\nimport pick from 'lodash/pick';\nimport isEqual from 'lodash/isEqual';\nimport polyline from '@mapbox/polyline';\nimport { encodeLatLng, stringify } from '../../util/urlHelpers';\nimport { lazyLoadWithDimensions } from '../../util/contextHelpers';\nimport { circlePolyline } from '../../util/maps';\nimport config from '../../config';\nconst DEFAULT_COLOR = 'FF0000';\nconst DEFAULT_STROKE_OPACITY = 0.3;\nconst DEFAULT_FILL_OPACITY = 0.2; // Extract color from string. Given value should be either with '#' (e.g. #FFFFFF') or without it.\n\nconst formatColorFromString = color => {\n  if (typeof color === 'string' && /^#[0-9A-F]{6}$/i.test(color)) {\n    return color.substring(1).toUpperCase();\n  } else if (typeof color === 'string' && /^[0-9A-F]{6}$/i) {\n    return color.toUpperCase();\n  } else {\n    return DEFAULT_COLOR;\n  }\n}; // Convert opacity from floating point value (0.0 -> 1.0) to a hexadecimal format\n\n\nconst convertOpacity = opacity => {\n  if (typeof opacity === 'number' && !isNaN(opacity) && opacity >= 0 && opacity <= 1) {\n    // 0.2 => 20\n    return Math.floor(opacity * 255).toString(16).toUpperCase();\n  }\n}; // Draw a circle polyline for fuzzy location.\n\n\nconst drawFuzzyCircle = (mapsConfig, center) => {\n  if (!(mapsConfig && typeof mapsConfig === 'object' && center && typeof center === 'object')) {\n    return '';\n  }\n\n  const fillColor = mapsConfig.fuzzy.circleColor;\n  const fillOpacity = 0.2;\n  const strokeColor = mapsConfig.fuzzy.circleColor;\n  const strokeWeight = 1;\n  const circleRadius = mapsConfig.fuzzy.offset || 500;\n  const circleStrokeWeight = strokeWeight || 1;\n  const circleStrokeColor = formatColorFromString(strokeColor);\n  const circleStrokeOpacity = convertOpacity(DEFAULT_STROKE_OPACITY);\n  const circleFill = formatColorFromString(fillColor);\n  const circleFillOpacity = convertOpacity(fillOpacity || DEFAULT_FILL_OPACITY); // Encoded polyline string\n\n  const encodedPolyline = polyline.encode(circlePolyline(center, circleRadius));\n  const polylineGraphicTokens = [`color:0x${circleStrokeColor}${circleStrokeOpacity}`, `fillcolor:0x${circleFill}${circleFillOpacity}`, `weight:${circleStrokeWeight}`, `enc:${encodedPolyline}`];\n  return polylineGraphicTokens.join('|');\n}; // Get custom marker data for static map URI\n\n\nconst customMarker = (options, lat, lng) => {\n  const {\n    anchorX,\n    anchorY,\n    url\n  } = options;\n  return [`anchor:${anchorX},${anchorY}`, `icon:${url}`, `${lat},${lng}`].join('|');\n};\n\nclass StaticGoogleMap extends Component {\n  shouldComponentUpdate(nextProps, prevState) {\n    // Do not draw the map unless center, zoom or dimensions change\n    // We want to prevent unnecessary calls to Google Maps APIs due\n    const currentData = pick(this.props, ['center', 'zoom', 'dimensions']);\n    const nextData = pick(nextProps, ['center', 'zoom', 'dimensions']);\n    return !isEqual(currentData, nextData);\n  }\n\n  render() {\n    const {\n      center,\n      zoom,\n      address,\n      mapsConfig,\n      dimensions\n    } = this.props;\n    const {\n      lat,\n      lng\n    } = center || {};\n    const {\n      width,\n      height\n    } = dimensions; // Extra graphics for the static map image\n    // 1. if fuzzy coordinates are used, return circle path\n    // 2. if customMarker is defined in config.js, use that\n    // 3. else return default marker\n\n    const targetMaybe = mapsConfig.fuzzy.enabled ? {\n      path: drawFuzzyCircle(mapsConfig, center)\n    } : mapsConfig.customMarker.enabled ? {\n      markers: customMarker(mapsConfig.customMarker, lat, lng)\n    } : {\n      markers: `${lat},${lng}`\n    };\n    const srcParams = stringify({\n      center: encodeLatLng(center),\n      zoom,\n      size: `${width}x${height}`,\n      maptype: 'roadmap',\n      key: config.maps.googleMapsAPIKey,\n      ...targetMaybe\n    });\n    return /*#__PURE__*/React.createElement(\"img\", {\n      src: `https://maps.googleapis.com/maps/api/staticmap?${srcParams}`,\n      alt: address,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nStaticGoogleMap.defaultProps = {\n  className: null,\n  rootClassName: null,\n  address: '',\n  center: null,\n  zoom: config.maps.fuzzy.enabled ? config.maps.fuzzy.defaultZoomLevel : 11,\n  mapsConfig: config.maps\n};\nStaticGoogleMap.propTypes = {\n  className: string,\n  rootClassName: string,\n  address: string,\n  center: shape({\n    lat: number.isRequired,\n    lng: number.isRequired\n  }).isRequired,\n  zoom: number,\n  mapsConfig: object,\n  // from withDimensions\n  dimensions: shape({\n    width: number.isRequired,\n    height: number.isRequired\n  }).isRequired\n};\nexport default _c = lazyLoadWithDimensions(StaticGoogleMap, {\n  maxWidth: '640px'\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/components/Map/StaticGoogleMap.js"],"names":["React","Component","number","object","shape","string","pick","isEqual","polyline","encodeLatLng","stringify","lazyLoadWithDimensions","circlePolyline","config","DEFAULT_COLOR","DEFAULT_STROKE_OPACITY","DEFAULT_FILL_OPACITY","formatColorFromString","color","test","substring","toUpperCase","convertOpacity","opacity","isNaN","Math","floor","toString","drawFuzzyCircle","mapsConfig","center","fillColor","fuzzy","circleColor","fillOpacity","strokeColor","strokeWeight","circleRadius","offset","circleStrokeWeight","circleStrokeColor","circleStrokeOpacity","circleFill","circleFillOpacity","encodedPolyline","encode","polylineGraphicTokens","join","customMarker","options","lat","lng","anchorX","anchorY","url","StaticGoogleMap","shouldComponentUpdate","nextProps","prevState","currentData","props","nextData","render","zoom","address","dimensions","width","height","targetMaybe","enabled","path","markers","srcParams","size","maptype","key","maps","googleMapsAPIKey","defaultProps","className","rootClassName","defaultZoomLevel","propTypes","isRequired","maxWidth"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,MAAjB,EAAyBC,KAAzB,EAAgCC,MAAhC,QAA8C,YAA9C;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,SAASC,YAAT,EAAuBC,SAAvB,QAAwC,uBAAxC;AACA,SAASC,sBAAT,QAAuC,2BAAvC;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,MAAMC,aAAa,GAAG,QAAtB;AACA,MAAMC,sBAAsB,GAAG,GAA/B;AACA,MAAMC,oBAAoB,GAAG,GAA7B,C,CAEA;;AACA,MAAMC,qBAAqB,GAAGC,KAAK,IAAI;AACrC,MAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,kBAAkBC,IAAlB,CAAuBD,KAAvB,CAAjC,EAAgE;AAC9D,WAAOA,KAAK,CAACE,SAAN,CAAgB,CAAhB,EAAmBC,WAAnB,EAAP;AACD,GAFD,MAEO,IAAI,OAAOH,KAAP,KAAiB,QAAjB,IAA6B,gBAAjC,EAAmD;AACxD,WAAOA,KAAK,CAACG,WAAN,EAAP;AACD,GAFM,MAEA;AACL,WAAOP,aAAP;AACD;AACF,CARD,C,CAUA;;;AACA,MAAMQ,cAAc,GAAGC,OAAO,IAAI;AAChC,MAAI,OAAOA,OAAP,KAAmB,QAAnB,IAA+B,CAACC,KAAK,CAACD,OAAD,CAArC,IAAkDA,OAAO,IAAI,CAA7D,IAAkEA,OAAO,IAAI,CAAjF,EAAoF;AAClF;AACA,WAAOE,IAAI,CAACC,KAAL,CAAWH,OAAO,GAAG,GAArB,EACJI,QADI,CACK,EADL,EAEJN,WAFI,EAAP;AAGD;AACF,CAPD,C,CASA;;;AACA,MAAMO,eAAe,GAAG,CAACC,UAAD,EAAaC,MAAb,KAAwB;AAC9C,MAAI,EAAED,UAAU,IAAI,OAAOA,UAAP,KAAsB,QAApC,IAAgDC,MAAhD,IAA0D,OAAOA,MAAP,KAAkB,QAA9E,CAAJ,EAA6F;AAC3F,WAAO,EAAP;AACD;;AAED,QAAMC,SAAS,GAAGF,UAAU,CAACG,KAAX,CAAiBC,WAAnC;AACA,QAAMC,WAAW,GAAG,GAApB;AACA,QAAMC,WAAW,GAAGN,UAAU,CAACG,KAAX,CAAiBC,WAArC;AACA,QAAMG,YAAY,GAAG,CAArB;AAEA,QAAMC,YAAY,GAAGR,UAAU,CAACG,KAAX,CAAiBM,MAAjB,IAA2B,GAAhD;AACA,QAAMC,kBAAkB,GAAGH,YAAY,IAAI,CAA3C;AACA,QAAMI,iBAAiB,GAAGvB,qBAAqB,CAACkB,WAAD,CAA/C;AACA,QAAMM,mBAAmB,GAAGnB,cAAc,CAACP,sBAAD,CAA1C;AACA,QAAM2B,UAAU,GAAGzB,qBAAqB,CAACc,SAAD,CAAxC;AACA,QAAMY,iBAAiB,GAAGrB,cAAc,CAACY,WAAW,IAAIlB,oBAAhB,CAAxC,CAf8C,CAiB9C;;AACA,QAAM4B,eAAe,GAAGpC,QAAQ,CAACqC,MAAT,CAAgBjC,cAAc,CAACkB,MAAD,EAASO,YAAT,CAA9B,CAAxB;AAEA,QAAMS,qBAAqB,GAAG,CAC3B,WAAUN,iBAAkB,GAAEC,mBAAoB,EADvB,EAE3B,eAAcC,UAAW,GAAEC,iBAAkB,EAFlB,EAG3B,UAASJ,kBAAmB,EAHD,EAI3B,OAAMK,eAAgB,EAJK,CAA9B;AAOA,SAAOE,qBAAqB,CAACC,IAAtB,CAA2B,GAA3B,CAAP;AACD,CA5BD,C,CA8BA;;;AACA,MAAMC,YAAY,GAAG,CAACC,OAAD,EAAUC,GAAV,EAAeC,GAAf,KAAuB;AAC1C,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,OAAX;AAAoBC,IAAAA;AAApB,MAA4BL,OAAlC;AACA,SAAO,CAAE,UAASG,OAAQ,IAAGC,OAAQ,EAA9B,EAAkC,QAAOC,GAAI,EAA7C,EAAiD,GAAEJ,GAAI,IAAGC,GAAI,EAA9D,EAAiEJ,IAAjE,CAAsE,GAAtE,CAAP;AACD,CAHD;;AAKA,MAAMQ,eAAN,SAA8BtD,SAA9B,CAAwC;AACtCuD,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AAC1C;AACA;AACA,UAAMC,WAAW,GAAGrD,IAAI,CAAC,KAAKsD,KAAN,EAAa,CAAC,QAAD,EAAW,MAAX,EAAmB,YAAnB,CAAb,CAAxB;AACA,UAAMC,QAAQ,GAAGvD,IAAI,CAACmD,SAAD,EAAY,CAAC,QAAD,EAAW,MAAX,EAAmB,YAAnB,CAAZ,CAArB;AACA,WAAO,CAAClD,OAAO,CAACoD,WAAD,EAAcE,QAAd,CAAf;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEhC,MAAAA,MAAF;AAAUiC,MAAAA,IAAV;AAAgBC,MAAAA,OAAhB;AAAyBnC,MAAAA,UAAzB;AAAqCoC,MAAAA;AAArC,QAAoD,KAAKL,KAA/D;AACA,UAAM;AAAEV,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAerB,MAAM,IAAI,EAA/B;AACA,UAAM;AAAEoC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAoBF,UAA1B,CAHO,CAKP;AACA;AACA;AACA;;AACA,UAAMG,WAAW,GAAGvC,UAAU,CAACG,KAAX,CAAiBqC,OAAjB,GAChB;AAAEC,MAAAA,IAAI,EAAE1C,eAAe,CAACC,UAAD,EAAaC,MAAb;AAAvB,KADgB,GAEhBD,UAAU,CAACmB,YAAX,CAAwBqB,OAAxB,GACA;AAAEE,MAAAA,OAAO,EAAEvB,YAAY,CAACnB,UAAU,CAACmB,YAAZ,EAA0BE,GAA1B,EAA+BC,GAA/B;AAAvB,KADA,GAEA;AAAEoB,MAAAA,OAAO,EAAG,GAAErB,GAAI,IAAGC,GAAI;AAAzB,KAJJ;AAMA,UAAMqB,SAAS,GAAG9D,SAAS,CAAC;AAC1BoB,MAAAA,MAAM,EAAErB,YAAY,CAACqB,MAAD,CADM;AAE1BiC,MAAAA,IAF0B;AAG1BU,MAAAA,IAAI,EAAG,GAAEP,KAAM,IAAGC,MAAO,EAHC;AAI1BO,MAAAA,OAAO,EAAE,SAJiB;AAK1BC,MAAAA,GAAG,EAAE9D,MAAM,CAAC+D,IAAP,CAAYC,gBALS;AAM1B,SAAGT;AANuB,KAAD,CAA3B;AASA,wBACE;AAAK,MAAA,GAAG,EAAG,kDAAiDI,SAAU,EAAtE;AAAyE,MAAA,GAAG,EAAER,OAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD;;AApCqC;;AAuCxCT,eAAe,CAACuB,YAAhB,GAA+B;AAC7BC,EAAAA,SAAS,EAAE,IADkB;AAE7BC,EAAAA,aAAa,EAAE,IAFc;AAG7BhB,EAAAA,OAAO,EAAE,EAHoB;AAI7BlC,EAAAA,MAAM,EAAE,IAJqB;AAK7BiC,EAAAA,IAAI,EAAElD,MAAM,CAAC+D,IAAP,CAAY5C,KAAZ,CAAkBqC,OAAlB,GAA4BxD,MAAM,CAAC+D,IAAP,CAAY5C,KAAZ,CAAkBiD,gBAA9C,GAAiE,EAL1C;AAM7BpD,EAAAA,UAAU,EAAEhB,MAAM,CAAC+D;AANU,CAA/B;AASArB,eAAe,CAAC2B,SAAhB,GAA4B;AAC1BH,EAAAA,SAAS,EAAE1E,MADe;AAE1B2E,EAAAA,aAAa,EAAE3E,MAFW;AAG1B2D,EAAAA,OAAO,EAAE3D,MAHiB;AAI1ByB,EAAAA,MAAM,EAAE1B,KAAK,CAAC;AACZ8C,IAAAA,GAAG,EAAEhD,MAAM,CAACiF,UADA;AAEZhC,IAAAA,GAAG,EAAEjD,MAAM,CAACiF;AAFA,GAAD,CAAL,CAGLA,UAPuB;AAQ1BpB,EAAAA,IAAI,EAAE7D,MARoB;AAS1B2B,EAAAA,UAAU,EAAE1B,MATc;AAW1B;AACA8D,EAAAA,UAAU,EAAE7D,KAAK,CAAC;AAChB8D,IAAAA,KAAK,EAAEhE,MAAM,CAACiF,UADE;AAEhBhB,IAAAA,MAAM,EAAEjE,MAAM,CAACiF;AAFC,GAAD,CAAL,CAGTA;AAfuB,CAA5B;AAkBA,oBAAexE,sBAAsB,CAAC4C,eAAD,EAAkB;AAAE6B,EAAAA,QAAQ,EAAE;AAAZ,CAAlB,CAArC","sourcesContent":["import React, { Component } from 'react';\nimport { number, object, shape, string } from 'prop-types';\nimport pick from 'lodash/pick';\nimport isEqual from 'lodash/isEqual';\nimport polyline from '@mapbox/polyline';\nimport { encodeLatLng, stringify } from '../../util/urlHelpers';\nimport { lazyLoadWithDimensions } from '../../util/contextHelpers';\nimport { circlePolyline } from '../../util/maps';\nimport config from '../../config';\n\nconst DEFAULT_COLOR = 'FF0000';\nconst DEFAULT_STROKE_OPACITY = 0.3;\nconst DEFAULT_FILL_OPACITY = 0.2;\n\n// Extract color from string. Given value should be either with '#' (e.g. #FFFFFF') or without it.\nconst formatColorFromString = color => {\n  if (typeof color === 'string' && /^#[0-9A-F]{6}$/i.test(color)) {\n    return color.substring(1).toUpperCase();\n  } else if (typeof color === 'string' && /^[0-9A-F]{6}$/i) {\n    return color.toUpperCase();\n  } else {\n    return DEFAULT_COLOR;\n  }\n};\n\n// Convert opacity from floating point value (0.0 -> 1.0) to a hexadecimal format\nconst convertOpacity = opacity => {\n  if (typeof opacity === 'number' && !isNaN(opacity) && opacity >= 0 && opacity <= 1) {\n    // 0.2 => 20\n    return Math.floor(opacity * 255)\n      .toString(16)\n      .toUpperCase();\n  }\n};\n\n// Draw a circle polyline for fuzzy location.\nconst drawFuzzyCircle = (mapsConfig, center) => {\n  if (!(mapsConfig && typeof mapsConfig === 'object' && center && typeof center === 'object')) {\n    return '';\n  }\n\n  const fillColor = mapsConfig.fuzzy.circleColor;\n  const fillOpacity = 0.2;\n  const strokeColor = mapsConfig.fuzzy.circleColor;\n  const strokeWeight = 1;\n\n  const circleRadius = mapsConfig.fuzzy.offset || 500;\n  const circleStrokeWeight = strokeWeight || 1;\n  const circleStrokeColor = formatColorFromString(strokeColor);\n  const circleStrokeOpacity = convertOpacity(DEFAULT_STROKE_OPACITY);\n  const circleFill = formatColorFromString(fillColor);\n  const circleFillOpacity = convertOpacity(fillOpacity || DEFAULT_FILL_OPACITY);\n\n  // Encoded polyline string\n  const encodedPolyline = polyline.encode(circlePolyline(center, circleRadius));\n\n  const polylineGraphicTokens = [\n    `color:0x${circleStrokeColor}${circleStrokeOpacity}`,\n    `fillcolor:0x${circleFill}${circleFillOpacity}`,\n    `weight:${circleStrokeWeight}`,\n    `enc:${encodedPolyline}`,\n  ];\n\n  return polylineGraphicTokens.join('|');\n};\n\n// Get custom marker data for static map URI\nconst customMarker = (options, lat, lng) => {\n  const { anchorX, anchorY, url } = options;\n  return [`anchor:${anchorX},${anchorY}`, `icon:${url}`, `${lat},${lng}`].join('|');\n};\n\nclass StaticGoogleMap extends Component {\n  shouldComponentUpdate(nextProps, prevState) {\n    // Do not draw the map unless center, zoom or dimensions change\n    // We want to prevent unnecessary calls to Google Maps APIs due\n    const currentData = pick(this.props, ['center', 'zoom', 'dimensions']);\n    const nextData = pick(nextProps, ['center', 'zoom', 'dimensions']);\n    return !isEqual(currentData, nextData);\n  }\n\n  render() {\n    const { center, zoom, address, mapsConfig, dimensions } = this.props;\n    const { lat, lng } = center || {};\n    const { width, height } = dimensions;\n\n    // Extra graphics for the static map image\n    // 1. if fuzzy coordinates are used, return circle path\n    // 2. if customMarker is defined in config.js, use that\n    // 3. else return default marker\n    const targetMaybe = mapsConfig.fuzzy.enabled\n      ? { path: drawFuzzyCircle(mapsConfig, center) }\n      : mapsConfig.customMarker.enabled\n      ? { markers: customMarker(mapsConfig.customMarker, lat, lng) }\n      : { markers: `${lat},${lng}` };\n\n    const srcParams = stringify({\n      center: encodeLatLng(center),\n      zoom,\n      size: `${width}x${height}`,\n      maptype: 'roadmap',\n      key: config.maps.googleMapsAPIKey,\n      ...targetMaybe,\n    });\n\n    return (\n      <img src={`https://maps.googleapis.com/maps/api/staticmap?${srcParams}`} alt={address} />\n    );\n  }\n}\n\nStaticGoogleMap.defaultProps = {\n  className: null,\n  rootClassName: null,\n  address: '',\n  center: null,\n  zoom: config.maps.fuzzy.enabled ? config.maps.fuzzy.defaultZoomLevel : 11,\n  mapsConfig: config.maps,\n};\n\nStaticGoogleMap.propTypes = {\n  className: string,\n  rootClassName: string,\n  address: string,\n  center: shape({\n    lat: number.isRequired,\n    lng: number.isRequired,\n  }).isRequired,\n  zoom: number,\n  mapsConfig: object,\n\n  // from withDimensions\n  dimensions: shape({\n    width: number.isRequired,\n    height: number.isRequired,\n  }).isRequired,\n};\n\nexport default lazyLoadWithDimensions(StaticGoogleMap, { maxWidth: '640px' });\n"]},"metadata":{},"sourceType":"module"}