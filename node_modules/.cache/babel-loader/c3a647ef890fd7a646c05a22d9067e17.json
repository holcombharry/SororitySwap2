{"ast":null,"code":"var _jsxFileName = \"/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/containers/TransactionPage/SendMessageForm/SendMessageForm.js\";\nimport React, { Component } from 'react';\nimport { string, bool, func } from 'prop-types';\nimport { compose } from 'redux';\nimport { Form as FinalForm } from 'react-final-form';\nimport classNames from 'classnames';\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\nimport { propTypes } from '../../../util/types';\nimport { Form, FieldTextInput, SecondaryButton } from '../../../components';\nimport css from './SendMessageForm.module.css';\nconst BLUR_TIMEOUT_MS = 100;\n\nconst IconSendMessage = () => {\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    className: css.sendIcon,\n    width: \"14\",\n    height: \"14\",\n    viewBox: \"0 0 14 14\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    className: css.strokeMatter,\n    fill: \"none\",\n    fillRule: \"evenodd\",\n    strokeLinejoin: \"round\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12.91 1L0 7.003l5.052 2.212z\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M10.75 11.686L5.042 9.222l7.928-8.198z\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M5.417 8.583v4.695l2.273-2.852\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  })));\n};\n\n_c = IconSendMessage;\n\nclass SendMessageFormComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.handleFocus = this.handleFocus.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n    this.blurTimeoutId = null;\n  }\n\n  handleFocus() {\n    this.props.onFocus();\n    window.clearTimeout(this.blurTimeoutId);\n  }\n\n  handleBlur() {\n    // We only trigger a blur if another focus event doesn't come\n    // within a timeout. This enables keeping the focus synced when\n    // focus is switched between the message area and the submit\n    // button.\n    this.blurTimeoutId = window.setTimeout(() => {\n      this.props.onBlur();\n    }, BLUR_TIMEOUT_MS);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(FinalForm, Object.assign({}, this.props, {\n      render: formRenderProps => {\n        const {\n          rootClassName,\n          className,\n          messagePlaceholder,\n          handleSubmit,\n          inProgress,\n          sendMessageError,\n          invalid,\n          form,\n          formId\n        } = formRenderProps;\n        const classes = classNames(rootClassName || css.root, className);\n        const submitInProgress = inProgress;\n        const submitDisabled = invalid || submitInProgress;\n        return /*#__PURE__*/React.createElement(Form, {\n          className: classes,\n          onSubmit: values => handleSubmit(values, form),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(FieldTextInput, {\n          inputRootClass: css.textarea,\n          type: \"textarea\",\n          id: formId ? `${formId}.message` : 'message',\n          name: \"message\",\n          placeholder: messagePlaceholder,\n          onFocus: this.handleFocus,\n          onBlur: this.handleBlur,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }\n        }), /*#__PURE__*/React.createElement(\"div\", {\n          className: css.submitContainer,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: css.errorContainer,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 17\n          }\n        }, sendMessageError ? /*#__PURE__*/React.createElement(\"p\", {\n          className: css.error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"SendMessageForm.sendFailed\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 23\n          }\n        })) : null), /*#__PURE__*/React.createElement(SecondaryButton, {\n          rootClassName: css.submitButton,\n          inProgress: submitInProgress,\n          disabled: submitDisabled,\n          onFocus: this.handleFocus,\n          onBlur: this.handleBlur,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(IconSendMessage, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 19\n          }\n        }), /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"SendMessageForm.sendMessage\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 19\n          }\n        }))));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}\n\nSendMessageFormComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  inProgress: false,\n  messagePlaceholder: null,\n  onFocus: () => null,\n  onBlur: () => null,\n  sendMessageError: null\n};\nSendMessageFormComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  inProgress: bool,\n  messagePlaceholder: string,\n  onSubmit: func.isRequired,\n  onFocus: func,\n  onBlur: func,\n  sendMessageError: propTypes.error,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\nconst SendMessageForm = compose(injectIntl)(SendMessageFormComponent);\nSendMessageForm.displayName = 'SendMessageForm';\nexport default SendMessageForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"IconSendMessage\");","map":{"version":3,"sources":["/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/containers/TransactionPage/SendMessageForm/SendMessageForm.js"],"names":["React","Component","string","bool","func","compose","Form","FinalForm","classNames","FormattedMessage","injectIntl","intlShape","propTypes","FieldTextInput","SecondaryButton","css","BLUR_TIMEOUT_MS","IconSendMessage","sendIcon","strokeMatter","SendMessageFormComponent","constructor","props","handleFocus","bind","handleBlur","blurTimeoutId","onFocus","window","clearTimeout","setTimeout","onBlur","render","formRenderProps","rootClassName","className","messagePlaceholder","handleSubmit","inProgress","sendMessageError","invalid","form","formId","classes","root","submitInProgress","submitDisabled","values","textarea","submitContainer","errorContainer","error","submitButton","defaultProps","onSubmit","isRequired","intl","SendMessageForm","displayName"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { string, bool, func } from 'prop-types';\nimport { compose } from 'redux';\nimport { Form as FinalForm } from 'react-final-form';\nimport classNames from 'classnames';\n\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\nimport { propTypes } from '../../../util/types';\n\nimport { Form, FieldTextInput, SecondaryButton } from '../../../components';\n\nimport css from './SendMessageForm.module.css';\n\nconst BLUR_TIMEOUT_MS = 100;\n\nconst IconSendMessage = () => {\n  return (\n    <svg\n      className={css.sendIcon}\n      width=\"14\"\n      height=\"14\"\n      viewBox=\"0 0 14 14\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <g className={css.strokeMatter} fill=\"none\" fillRule=\"evenodd\" strokeLinejoin=\"round\">\n        <path d=\"M12.91 1L0 7.003l5.052 2.212z\" />\n        <path d=\"M10.75 11.686L5.042 9.222l7.928-8.198z\" />\n        <path d=\"M5.417 8.583v4.695l2.273-2.852\" />\n      </g>\n    </svg>\n  );\n};\n\nclass SendMessageFormComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.handleFocus = this.handleFocus.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n    this.blurTimeoutId = null;\n  }\n\n  handleFocus() {\n    this.props.onFocus();\n    window.clearTimeout(this.blurTimeoutId);\n  }\n\n  handleBlur() {\n    // We only trigger a blur if another focus event doesn't come\n    // within a timeout. This enables keeping the focus synced when\n    // focus is switched between the message area and the submit\n    // button.\n    this.blurTimeoutId = window.setTimeout(() => {\n      this.props.onBlur();\n    }, BLUR_TIMEOUT_MS);\n  }\n\n  render() {\n    return (\n      <FinalForm\n        {...this.props}\n        render={formRenderProps => {\n          const {\n            rootClassName,\n            className,\n            messagePlaceholder,\n            handleSubmit,\n            inProgress,\n            sendMessageError,\n            invalid,\n            form,\n            formId,\n          } = formRenderProps;\n\n          const classes = classNames(rootClassName || css.root, className);\n          const submitInProgress = inProgress;\n          const submitDisabled = invalid || submitInProgress;\n          return (\n            <Form className={classes} onSubmit={values => handleSubmit(values, form)}>\n              <FieldTextInput\n                inputRootClass={css.textarea}\n                type=\"textarea\"\n                id={formId ? `${formId}.message` : 'message'}\n                name=\"message\"\n                placeholder={messagePlaceholder}\n                onFocus={this.handleFocus}\n                onBlur={this.handleBlur}\n              />\n              <div className={css.submitContainer}>\n                <div className={css.errorContainer}>\n                  {sendMessageError ? (\n                    <p className={css.error}>\n                      <FormattedMessage id=\"SendMessageForm.sendFailed\" />\n                    </p>\n                  ) : null}\n                </div>\n                <SecondaryButton\n                  rootClassName={css.submitButton}\n                  inProgress={submitInProgress}\n                  disabled={submitDisabled}\n                  onFocus={this.handleFocus}\n                  onBlur={this.handleBlur}\n                >\n                  <IconSendMessage />\n                  <FormattedMessage id=\"SendMessageForm.sendMessage\" />\n                </SecondaryButton>\n              </div>\n            </Form>\n          );\n        }}\n      />\n    );\n  }\n}\n\nSendMessageFormComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  inProgress: false,\n  messagePlaceholder: null,\n  onFocus: () => null,\n  onBlur: () => null,\n  sendMessageError: null,\n};\n\nSendMessageFormComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  inProgress: bool,\n\n  messagePlaceholder: string,\n  onSubmit: func.isRequired,\n  onFocus: func,\n  onBlur: func,\n  sendMessageError: propTypes.error,\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst SendMessageForm = compose(injectIntl)(SendMessageFormComponent);\n\nSendMessageForm.displayName = 'SendMessageForm';\n\nexport default SendMessageForm;\n"]},"metadata":{},"sourceType":"module"}