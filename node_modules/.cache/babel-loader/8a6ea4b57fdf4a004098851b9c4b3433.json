{"ast":null,"code":"import pick from 'lodash/pick';\nimport config from '../../config';\nimport { initiatePrivileged, transitionPrivileged } from '../../util/api';\nimport { denormalisedResponseEntities } from '../../util/data';\nimport { storableError } from '../../util/errors';\nimport { TRANSITION_REQUEST_PAYMENT, TRANSITION_REQUEST_PAYMENT_AFTER_ENQUIRY, TRANSITION_CONFIRM_PAYMENT, isPrivileged } from '../../util/transaction';\nimport * as log from '../../util/log';\nimport { fetchCurrentUserHasOrdersSuccess, fetchCurrentUser } from '../../ducks/user.duck'; // ================ Action types ================ //\n\nexport const SET_INITIAL_VALUES = 'app/CheckoutPage/SET_INITIAL_VALUES';\nexport const INITIATE_ORDER_REQUEST = 'app/CheckoutPage/INITIATE_ORDER_REQUEST';\nexport const INITIATE_ORDER_SUCCESS = 'app/CheckoutPage/INITIATE_ORDER_SUCCESS';\nexport const INITIATE_ORDER_ERROR = 'app/CheckoutPage/INITIATE_ORDER_ERROR';\nexport const CONFIRM_PAYMENT_REQUEST = 'app/CheckoutPage/CONFIRM_PAYMENT_REQUEST';\nexport const CONFIRM_PAYMENT_SUCCESS = 'app/CheckoutPage/CONFIRM_PAYMENT_SUCCESS';\nexport const CONFIRM_PAYMENT_ERROR = 'app/CheckoutPage/CONFIRM_PAYMENT_ERROR';\nexport const SPECULATE_TRANSACTION_REQUEST = 'app/ListingPage/SPECULATE_TRANSACTION_REQUEST';\nexport const SPECULATE_TRANSACTION_SUCCESS = 'app/ListingPage/SPECULATE_TRANSACTION_SUCCESS';\nexport const SPECULATE_TRANSACTION_ERROR = 'app/ListingPage/SPECULATE_TRANSACTION_ERROR';\nexport const STRIPE_CUSTOMER_REQUEST = 'app/CheckoutPage/STRIPE_CUSTOMER_REQUEST';\nexport const STRIPE_CUSTOMER_SUCCESS = 'app/CheckoutPage/STRIPE_CUSTOMER_SUCCESS';\nexport const STRIPE_CUSTOMER_ERROR = 'app/CheckoutPage/STRIPE_CUSTOMER_ERROR'; // ================ Reducer ================ //\n\nconst initialState = {\n  listing: null,\n  orderData: null,\n  speculateTransactionInProgress: false,\n  speculateTransactionError: null,\n  speculatedTransaction: null,\n  transaction: null,\n  initiateOrderError: null,\n  confirmPaymentError: null,\n  stripeCustomerFetched: false\n};\nexport default function checkoutPageReducer(state = initialState, action = {}) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case SET_INITIAL_VALUES:\n      return { ...initialState,\n        ...payload\n      };\n\n    case SPECULATE_TRANSACTION_REQUEST:\n      return { ...state,\n        speculateTransactionInProgress: true,\n        speculateTransactionError: null,\n        speculatedTransaction: null\n      };\n\n    case SPECULATE_TRANSACTION_SUCCESS:\n      return { ...state,\n        speculateTransactionInProgress: false,\n        speculatedTransaction: payload.transaction\n      };\n\n    case SPECULATE_TRANSACTION_ERROR:\n      console.error(payload); // eslint-disable-line no-console\n\n      return { ...state,\n        speculateTransactionInProgress: false,\n        speculateTransactionError: payload\n      };\n\n    case INITIATE_ORDER_REQUEST:\n      return { ...state,\n        initiateOrderError: null\n      };\n\n    case INITIATE_ORDER_SUCCESS:\n      return { ...state,\n        transaction: payload\n      };\n\n    case INITIATE_ORDER_ERROR:\n      console.error(payload); // eslint-disable-line no-console\n\n      return { ...state,\n        initiateOrderError: payload\n      };\n\n    case CONFIRM_PAYMENT_REQUEST:\n      return { ...state,\n        confirmPaymentError: null\n      };\n\n    case CONFIRM_PAYMENT_SUCCESS:\n      return state;\n\n    case CONFIRM_PAYMENT_ERROR:\n      console.error(payload); // eslint-disable-line no-console\n\n      return { ...state,\n        confirmPaymentError: payload\n      };\n\n    case STRIPE_CUSTOMER_REQUEST:\n      return { ...state,\n        stripeCustomerFetched: false\n      };\n\n    case STRIPE_CUSTOMER_SUCCESS:\n      return { ...state,\n        stripeCustomerFetched: true\n      };\n\n    case STRIPE_CUSTOMER_ERROR:\n      console.error(payload); // eslint-disable-line no-console\n\n      return { ...state,\n        stripeCustomerFetchError: payload\n      };\n\n    default:\n      return state;\n  }\n} // ================ Selectors ================ //\n// ================ Action creators ================ //\n\nexport const setInitialValues = initialValues => ({\n  type: SET_INITIAL_VALUES,\n  payload: pick(initialValues, Object.keys(initialState))\n});\n\nconst initiateOrderRequest = () => ({\n  type: INITIATE_ORDER_REQUEST\n});\n\nconst initiateOrderSuccess = order => ({\n  type: INITIATE_ORDER_SUCCESS,\n  payload: order\n});\n\nconst initiateOrderError = e => ({\n  type: INITIATE_ORDER_ERROR,\n  error: true,\n  payload: e\n});\n\nconst confirmPaymentRequest = () => ({\n  type: CONFIRM_PAYMENT_REQUEST\n});\n\nconst confirmPaymentSuccess = orderId => ({\n  type: CONFIRM_PAYMENT_SUCCESS,\n  payload: orderId\n});\n\nconst confirmPaymentError = e => ({\n  type: CONFIRM_PAYMENT_ERROR,\n  error: true,\n  payload: e\n});\n\nexport const speculateTransactionRequest = () => ({\n  type: SPECULATE_TRANSACTION_REQUEST\n});\nexport const speculateTransactionSuccess = transaction => ({\n  type: SPECULATE_TRANSACTION_SUCCESS,\n  payload: {\n    transaction\n  }\n});\nexport const speculateTransactionError = e => ({\n  type: SPECULATE_TRANSACTION_ERROR,\n  error: true,\n  payload: e\n});\nexport const stripeCustomerRequest = () => ({\n  type: STRIPE_CUSTOMER_REQUEST\n});\nexport const stripeCustomerSuccess = () => ({\n  type: STRIPE_CUSTOMER_SUCCESS\n});\nexport const stripeCustomerError = e => ({\n  type: STRIPE_CUSTOMER_ERROR,\n  error: true,\n  payload: e\n});\n/* ================ Thunks ================ */\n\nexport const initiateOrder = (orderParams, transactionId) => (dispatch, getState, sdk) => {\n  dispatch(initiateOrderRequest()); // If we already have a transaction ID, we should transition, not\n  // initiate.\n\n  const isTransition = !!transactionId;\n  const transition = isTransition ? TRANSITION_REQUEST_PAYMENT_AFTER_ENQUIRY : TRANSITION_REQUEST_PAYMENT;\n  const isPrivilegedTransition = isPrivileged(transition);\n  const {\n    deliveryMethod,\n    quantity,\n    bookingDates,\n    ...otherOrderParams\n  } = orderParams;\n  const quantityMaybe = quantity ? {\n    stockReservationQuantity: quantity\n  } : {};\n  const bookingParamsMaybe = bookingDates || {}; // Parameters only for client app's server\n\n  const orderData = {\n    deliveryMethod\n  }; // Parameters for Flex API\n\n  const transitionParams = { ...quantityMaybe,\n    ...bookingParamsMaybe,\n    ...otherOrderParams\n  };\n  const bodyParams = isTransition ? {\n    id: transactionId,\n    transition,\n    params: transitionParams\n  } : {\n    processAlias: config.transactionProcessAlias,\n    transition,\n    params: transitionParams\n  };\n  const queryParams = {\n    include: ['booking', 'provider'],\n    expand: true\n  };\n\n  const handleSucces = response => {\n    const entities = denormalisedResponseEntities(response);\n    const order = entities[0];\n    dispatch(initiateOrderSuccess(order));\n    dispatch(fetchCurrentUserHasOrdersSuccess(true));\n    return order;\n  };\n\n  const handleError = e => {\n    dispatch(initiateOrderError(storableError(e)));\n    const transactionIdMaybe = transactionId ? {\n      transactionId: transactionId.uuid\n    } : {};\n    log.error(e, 'initiate-order-failed', { ...transactionIdMaybe,\n      listingId: orderParams.listingId.uuid,\n      ...quantityMaybe,\n      ...bookingParamsMaybe,\n      ...orderData\n    });\n    throw e;\n  };\n\n  if (isTransition && isPrivilegedTransition) {\n    // transition privileged\n    return transitionPrivileged({\n      isSpeculative: false,\n      orderData,\n      bodyParams,\n      queryParams\n    }).then(handleSucces).catch(handleError);\n  } else if (isTransition) {\n    // transition non-privileged\n    return sdk.transactions.transition(bodyParams, queryParams).then(handleSucces).catch(handleError);\n  } else if (isPrivilegedTransition) {\n    // initiate privileged\n    return initiatePrivileged({\n      isSpeculative: false,\n      orderData,\n      bodyParams,\n      queryParams\n    }).then(handleSucces).catch(handleError);\n  } else {\n    // initiate non-privileged\n    return sdk.transactions.initiate(bodyParams, queryParams).then(handleSucces).catch(handleError);\n  }\n};\nexport const confirmPayment = orderParams => (dispatch, getState, sdk) => {\n  dispatch(confirmPaymentRequest());\n  const bodyParams = {\n    id: orderParams.transactionId,\n    transition: TRANSITION_CONFIRM_PAYMENT,\n    params: {}\n  };\n  return sdk.transactions.transition(bodyParams).then(response => {\n    const order = response.data.data;\n    dispatch(confirmPaymentSuccess(order.id));\n    return order;\n  }).catch(e => {\n    dispatch(confirmPaymentError(storableError(e)));\n    const transactionIdMaybe = orderParams.transactionId ? {\n      transactionId: orderParams.transactionId.uuid\n    } : {};\n    log.error(e, 'initiate-order-failed', { ...transactionIdMaybe\n    });\n    throw e;\n  });\n};\nexport const sendMessage = params => (dispatch, getState, sdk) => {\n  const message = params.message;\n  const orderId = params.id;\n\n  if (message) {\n    return sdk.messages.send({\n      transactionId: orderId,\n      content: message\n    }).then(() => {\n      return {\n        orderId,\n        messageSuccess: true\n      };\n    }).catch(e => {\n      log.error(e, 'initial-message-send-failed', {\n        txId: orderId\n      });\n      return {\n        orderId,\n        messageSuccess: false\n      };\n    });\n  } else {\n    return Promise.resolve({\n      orderId,\n      messageSuccess: true\n    });\n  }\n};\n/**\n * Initiate or transition the speculative transaction with the given\n * booking details\n *\n * The API allows us to do speculative transaction initiation and\n * transitions. This way we can create a test transaction and get the\n * actual pricing information as if the transaction had been started,\n * without affecting the actual data.\n *\n * We store this speculative transaction in the page store and use the\n * pricing info for the booking breakdown to get a proper estimate for\n * the price with the chosen information.\n */\n\nexport const speculateTransaction = (orderParams, transactionId) => (dispatch, getState, sdk) => {\n  dispatch(speculateTransactionRequest()); // If we already have a transaction ID, we should transition, not\n  // initiate.\n\n  const isTransition = !!transactionId;\n  const transition = isTransition ? TRANSITION_REQUEST_PAYMENT_AFTER_ENQUIRY : TRANSITION_REQUEST_PAYMENT;\n  const isPrivilegedTransition = isPrivileged(transition);\n  const {\n    deliveryMethod,\n    quantity,\n    bookingDates,\n    ...otherOrderParams\n  } = orderParams;\n  const quantityMaybe = quantity ? {\n    stockReservationQuantity: quantity\n  } : {};\n  const bookingParamsMaybe = bookingDates || {}; // Parameters only for client app's server\n\n  const orderData = {\n    deliveryMethod\n  }; // Parameters for Flex API\n\n  const transitionParams = { ...quantityMaybe,\n    ...bookingParamsMaybe,\n    ...otherOrderParams,\n    cardToken: 'CheckoutPage_speculative_card_token'\n  };\n  const bodyParams = isTransition ? {\n    id: transactionId,\n    transition,\n    params: transitionParams\n  } : {\n    processAlias: config.transactionProcessAlias,\n    transition,\n    params: transitionParams\n  };\n  const queryParams = {\n    include: ['booking', 'provider'],\n    expand: true\n  };\n\n  const handleSuccess = response => {\n    const entities = denormalisedResponseEntities(response);\n\n    if (entities.length !== 1) {\n      throw new Error('Expected a resource in the speculate response');\n    }\n\n    const tx = entities[0];\n    dispatch(speculateTransactionSuccess(tx));\n  };\n\n  const handleError = e => {\n    log.error(e, 'speculate-transaction-failed', {\n      listingId: transitionParams.listingId.uuid,\n      ...quantityMaybe,\n      ...bookingParamsMaybe,\n      ...orderData\n    });\n    return dispatch(speculateTransactionError(storableError(e)));\n  };\n\n  if (isTransition && isPrivilegedTransition) {\n    // transition privileged\n    return transitionPrivileged({\n      isSpeculative: true,\n      orderData,\n      bodyParams,\n      queryParams\n    }).then(handleSuccess).catch(handleError);\n  } else if (isTransition) {\n    // transition non-privileged\n    return sdk.transactions.transitionSpeculative(bodyParams, queryParams).then(handleSuccess).catch(handleError);\n  } else if (isPrivilegedTransition) {\n    // initiate privileged\n    return initiatePrivileged({\n      isSpeculative: true,\n      orderData,\n      bodyParams,\n      queryParams\n    }).then(handleSuccess).catch(handleError);\n  } else {\n    // initiate non-privileged\n    return sdk.transactions.initiateSpeculative(bodyParams, queryParams).then(handleSuccess).catch(handleError);\n  }\n}; // StripeCustomer is a relantionship to currentUser\n// We need to fetch currentUser with correct params to include relationship\n\nexport const stripeCustomer = () => (dispatch, getState, sdk) => {\n  dispatch(stripeCustomerRequest());\n  return dispatch(fetchCurrentUser({\n    include: ['stripeCustomer.defaultPaymentMethod']\n  })).then(response => {\n    dispatch(stripeCustomerSuccess());\n  }).catch(e => {\n    dispatch(stripeCustomerError(storableError(e)));\n  });\n};","map":{"version":3,"sources":["/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/containers/CheckoutPage/CheckoutPage.duck.js"],"names":["pick","config","initiatePrivileged","transitionPrivileged","denormalisedResponseEntities","storableError","TRANSITION_REQUEST_PAYMENT","TRANSITION_REQUEST_PAYMENT_AFTER_ENQUIRY","TRANSITION_CONFIRM_PAYMENT","isPrivileged","log","fetchCurrentUserHasOrdersSuccess","fetchCurrentUser","SET_INITIAL_VALUES","INITIATE_ORDER_REQUEST","INITIATE_ORDER_SUCCESS","INITIATE_ORDER_ERROR","CONFIRM_PAYMENT_REQUEST","CONFIRM_PAYMENT_SUCCESS","CONFIRM_PAYMENT_ERROR","SPECULATE_TRANSACTION_REQUEST","SPECULATE_TRANSACTION_SUCCESS","SPECULATE_TRANSACTION_ERROR","STRIPE_CUSTOMER_REQUEST","STRIPE_CUSTOMER_SUCCESS","STRIPE_CUSTOMER_ERROR","initialState","listing","orderData","speculateTransactionInProgress","speculateTransactionError","speculatedTransaction","transaction","initiateOrderError","confirmPaymentError","stripeCustomerFetched","checkoutPageReducer","state","action","type","payload","console","error","stripeCustomerFetchError","setInitialValues","initialValues","Object","keys","initiateOrderRequest","initiateOrderSuccess","order","e","confirmPaymentRequest","confirmPaymentSuccess","orderId","speculateTransactionRequest","speculateTransactionSuccess","stripeCustomerRequest","stripeCustomerSuccess","stripeCustomerError","initiateOrder","orderParams","transactionId","dispatch","getState","sdk","isTransition","transition","isPrivilegedTransition","deliveryMethod","quantity","bookingDates","otherOrderParams","quantityMaybe","stockReservationQuantity","bookingParamsMaybe","transitionParams","bodyParams","id","params","processAlias","transactionProcessAlias","queryParams","include","expand","handleSucces","response","entities","handleError","transactionIdMaybe","uuid","listingId","isSpeculative","then","catch","transactions","initiate","confirmPayment","data","sendMessage","message","messages","send","content","messageSuccess","txId","Promise","resolve","speculateTransaction","cardToken","handleSuccess","length","Error","tx","transitionSpeculative","initiateSpeculative","stripeCustomer"],"mappings":"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","sourcesContent":["import pick from 'lodash/pick';\nimport config from '../../config';\nimport { initiatePrivileged, transitionPrivileged } from '../../util/api';\nimport { denormalisedResponseEntities } from '../../util/data';\nimport { storableError } from '../../util/errors';\nimport {\n  TRANSITION_REQUEST_PAYMENT,\n  TRANSITION_REQUEST_PAYMENT_AFTER_ENQUIRY,\n  TRANSITION_CONFIRM_PAYMENT,\n  isPrivileged,\n} from '../../util/transaction';\nimport * as log from '../../util/log';\nimport { fetchCurrentUserHasOrdersSuccess, fetchCurrentUser } from '../../ducks/user.duck';\n\n// ================ Action types ================ //\n\nexport const SET_INITIAL_VALUES = 'app/CheckoutPage/SET_INITIAL_VALUES';\n\nexport const INITIATE_ORDER_REQUEST = 'app/CheckoutPage/INITIATE_ORDER_REQUEST';\nexport const INITIATE_ORDER_SUCCESS = 'app/CheckoutPage/INITIATE_ORDER_SUCCESS';\nexport const INITIATE_ORDER_ERROR = 'app/CheckoutPage/INITIATE_ORDER_ERROR';\n\nexport const CONFIRM_PAYMENT_REQUEST = 'app/CheckoutPage/CONFIRM_PAYMENT_REQUEST';\nexport const CONFIRM_PAYMENT_SUCCESS = 'app/CheckoutPage/CONFIRM_PAYMENT_SUCCESS';\nexport const CONFIRM_PAYMENT_ERROR = 'app/CheckoutPage/CONFIRM_PAYMENT_ERROR';\n\nexport const SPECULATE_TRANSACTION_REQUEST = 'app/ListingPage/SPECULATE_TRANSACTION_REQUEST';\nexport const SPECULATE_TRANSACTION_SUCCESS = 'app/ListingPage/SPECULATE_TRANSACTION_SUCCESS';\nexport const SPECULATE_TRANSACTION_ERROR = 'app/ListingPage/SPECULATE_TRANSACTION_ERROR';\n\nexport const STRIPE_CUSTOMER_REQUEST = 'app/CheckoutPage/STRIPE_CUSTOMER_REQUEST';\nexport const STRIPE_CUSTOMER_SUCCESS = 'app/CheckoutPage/STRIPE_CUSTOMER_SUCCESS';\nexport const STRIPE_CUSTOMER_ERROR = 'app/CheckoutPage/STRIPE_CUSTOMER_ERROR';\n\n// ================ Reducer ================ //\n\nconst initialState = {\n  listing: null,\n  orderData: null,\n  speculateTransactionInProgress: false,\n  speculateTransactionError: null,\n  speculatedTransaction: null,\n  transaction: null,\n  initiateOrderError: null,\n  confirmPaymentError: null,\n  stripeCustomerFetched: false,\n};\n\nexport default function checkoutPageReducer(state = initialState, action = {}) {\n  const { type, payload } = action;\n  switch (type) {\n    case SET_INITIAL_VALUES:\n      return { ...initialState, ...payload };\n\n    case SPECULATE_TRANSACTION_REQUEST:\n      return {\n        ...state,\n        speculateTransactionInProgress: true,\n        speculateTransactionError: null,\n        speculatedTransaction: null,\n      };\n    case SPECULATE_TRANSACTION_SUCCESS:\n      return {\n        ...state,\n        speculateTransactionInProgress: false,\n        speculatedTransaction: payload.transaction,\n      };\n    case SPECULATE_TRANSACTION_ERROR:\n      console.error(payload); // eslint-disable-line no-console\n      return {\n        ...state,\n        speculateTransactionInProgress: false,\n        speculateTransactionError: payload,\n      };\n\n    case INITIATE_ORDER_REQUEST:\n      return { ...state, initiateOrderError: null };\n    case INITIATE_ORDER_SUCCESS:\n      return { ...state, transaction: payload };\n    case INITIATE_ORDER_ERROR:\n      console.error(payload); // eslint-disable-line no-console\n      return { ...state, initiateOrderError: payload };\n\n    case CONFIRM_PAYMENT_REQUEST:\n      return { ...state, confirmPaymentError: null };\n    case CONFIRM_PAYMENT_SUCCESS:\n      return state;\n    case CONFIRM_PAYMENT_ERROR:\n      console.error(payload); // eslint-disable-line no-console\n      return { ...state, confirmPaymentError: payload };\n\n    case STRIPE_CUSTOMER_REQUEST:\n      return { ...state, stripeCustomerFetched: false };\n    case STRIPE_CUSTOMER_SUCCESS:\n      return { ...state, stripeCustomerFetched: true };\n    case STRIPE_CUSTOMER_ERROR:\n      console.error(payload); // eslint-disable-line no-console\n      return { ...state, stripeCustomerFetchError: payload };\n\n    default:\n      return state;\n  }\n}\n\n// ================ Selectors ================ //\n\n// ================ Action creators ================ //\n\nexport const setInitialValues = initialValues => ({\n  type: SET_INITIAL_VALUES,\n  payload: pick(initialValues, Object.keys(initialState)),\n});\n\nconst initiateOrderRequest = () => ({ type: INITIATE_ORDER_REQUEST });\n\nconst initiateOrderSuccess = order => ({\n  type: INITIATE_ORDER_SUCCESS,\n  payload: order,\n});\n\nconst initiateOrderError = e => ({\n  type: INITIATE_ORDER_ERROR,\n  error: true,\n  payload: e,\n});\n\nconst confirmPaymentRequest = () => ({ type: CONFIRM_PAYMENT_REQUEST });\n\nconst confirmPaymentSuccess = orderId => ({\n  type: CONFIRM_PAYMENT_SUCCESS,\n  payload: orderId,\n});\n\nconst confirmPaymentError = e => ({\n  type: CONFIRM_PAYMENT_ERROR,\n  error: true,\n  payload: e,\n});\n\nexport const speculateTransactionRequest = () => ({ type: SPECULATE_TRANSACTION_REQUEST });\n\nexport const speculateTransactionSuccess = transaction => ({\n  type: SPECULATE_TRANSACTION_SUCCESS,\n  payload: { transaction },\n});\n\nexport const speculateTransactionError = e => ({\n  type: SPECULATE_TRANSACTION_ERROR,\n  error: true,\n  payload: e,\n});\n\nexport const stripeCustomerRequest = () => ({ type: STRIPE_CUSTOMER_REQUEST });\nexport const stripeCustomerSuccess = () => ({ type: STRIPE_CUSTOMER_SUCCESS });\nexport const stripeCustomerError = e => ({\n  type: STRIPE_CUSTOMER_ERROR,\n  error: true,\n  payload: e,\n});\n\n/* ================ Thunks ================ */\n\nexport const initiateOrder = (orderParams, transactionId) => (dispatch, getState, sdk) => {\n  dispatch(initiateOrderRequest());\n\n  // If we already have a transaction ID, we should transition, not\n  // initiate.\n  const isTransition = !!transactionId;\n  const transition = isTransition\n    ? TRANSITION_REQUEST_PAYMENT_AFTER_ENQUIRY\n    : TRANSITION_REQUEST_PAYMENT;\n  const isPrivilegedTransition = isPrivileged(transition);\n\n  const { deliveryMethod, quantity, bookingDates, ...otherOrderParams } = orderParams;\n  const quantityMaybe = quantity ? { stockReservationQuantity: quantity } : {};\n  const bookingParamsMaybe = bookingDates || {};\n\n  // Parameters only for client app's server\n  const orderData = {\n    deliveryMethod,\n  };\n\n  // Parameters for Flex API\n  const transitionParams = {\n    ...quantityMaybe,\n    ...bookingParamsMaybe,\n    ...otherOrderParams,\n  };\n\n  const bodyParams = isTransition\n    ? {\n        id: transactionId,\n        transition,\n        params: transitionParams,\n      }\n    : {\n        processAlias: config.transactionProcessAlias,\n        transition,\n        params: transitionParams,\n      };\n  const queryParams = {\n    include: ['booking', 'provider'],\n    expand: true,\n  };\n\n  const handleSucces = response => {\n    const entities = denormalisedResponseEntities(response);\n    const order = entities[0];\n    dispatch(initiateOrderSuccess(order));\n    dispatch(fetchCurrentUserHasOrdersSuccess(true));\n    return order;\n  };\n\n  const handleError = e => {\n    dispatch(initiateOrderError(storableError(e)));\n    const transactionIdMaybe = transactionId ? { transactionId: transactionId.uuid } : {};\n    log.error(e, 'initiate-order-failed', {\n      ...transactionIdMaybe,\n      listingId: orderParams.listingId.uuid,\n      ...quantityMaybe,\n      ...bookingParamsMaybe,\n      ...orderData,\n    });\n    throw e;\n  };\n\n  if (isTransition && isPrivilegedTransition) {\n    // transition privileged\n    return transitionPrivileged({ isSpeculative: false, orderData, bodyParams, queryParams })\n      .then(handleSucces)\n      .catch(handleError);\n  } else if (isTransition) {\n    // transition non-privileged\n    return sdk.transactions\n      .transition(bodyParams, queryParams)\n      .then(handleSucces)\n      .catch(handleError);\n  } else if (isPrivilegedTransition) {\n    // initiate privileged\n    return initiatePrivileged({ isSpeculative: false, orderData, bodyParams, queryParams })\n      .then(handleSucces)\n      .catch(handleError);\n  } else {\n    // initiate non-privileged\n    return sdk.transactions\n      .initiate(bodyParams, queryParams)\n      .then(handleSucces)\n      .catch(handleError);\n  }\n};\n\nexport const confirmPayment = orderParams => (dispatch, getState, sdk) => {\n  dispatch(confirmPaymentRequest());\n\n  const bodyParams = {\n    id: orderParams.transactionId,\n    transition: TRANSITION_CONFIRM_PAYMENT,\n    params: {},\n  };\n\n  return sdk.transactions\n    .transition(bodyParams)\n    .then(response => {\n      const order = response.data.data;\n      dispatch(confirmPaymentSuccess(order.id));\n      return order;\n    })\n    .catch(e => {\n      dispatch(confirmPaymentError(storableError(e)));\n      const transactionIdMaybe = orderParams.transactionId\n        ? { transactionId: orderParams.transactionId.uuid }\n        : {};\n      log.error(e, 'initiate-order-failed', {\n        ...transactionIdMaybe,\n      });\n      throw e;\n    });\n};\n\nexport const sendMessage = params => (dispatch, getState, sdk) => {\n  const message = params.message;\n  const orderId = params.id;\n\n  if (message) {\n    return sdk.messages\n      .send({ transactionId: orderId, content: message })\n      .then(() => {\n        return { orderId, messageSuccess: true };\n      })\n      .catch(e => {\n        log.error(e, 'initial-message-send-failed', { txId: orderId });\n        return { orderId, messageSuccess: false };\n      });\n  } else {\n    return Promise.resolve({ orderId, messageSuccess: true });\n  }\n};\n\n/**\n * Initiate or transition the speculative transaction with the given\n * booking details\n *\n * The API allows us to do speculative transaction initiation and\n * transitions. This way we can create a test transaction and get the\n * actual pricing information as if the transaction had been started,\n * without affecting the actual data.\n *\n * We store this speculative transaction in the page store and use the\n * pricing info for the booking breakdown to get a proper estimate for\n * the price with the chosen information.\n */\nexport const speculateTransaction = (orderParams, transactionId) => (dispatch, getState, sdk) => {\n  dispatch(speculateTransactionRequest());\n\n  // If we already have a transaction ID, we should transition, not\n  // initiate.\n  const isTransition = !!transactionId;\n  const transition = isTransition\n    ? TRANSITION_REQUEST_PAYMENT_AFTER_ENQUIRY\n    : TRANSITION_REQUEST_PAYMENT;\n  const isPrivilegedTransition = isPrivileged(transition);\n\n  const { deliveryMethod, quantity, bookingDates, ...otherOrderParams } = orderParams;\n  const quantityMaybe = quantity ? { stockReservationQuantity: quantity } : {};\n  const bookingParamsMaybe = bookingDates || {};\n\n  // Parameters only for client app's server\n  const orderData = {\n    deliveryMethod,\n  };\n\n  // Parameters for Flex API\n  const transitionParams = {\n    ...quantityMaybe,\n    ...bookingParamsMaybe,\n    ...otherOrderParams,\n    cardToken: 'CheckoutPage_speculative_card_token',\n  };\n\n  const bodyParams = isTransition\n    ? {\n        id: transactionId,\n        transition,\n        params: transitionParams,\n      }\n    : {\n        processAlias: config.transactionProcessAlias,\n        transition,\n        params: transitionParams,\n      };\n\n  const queryParams = {\n    include: ['booking', 'provider'],\n    expand: true,\n  };\n\n  const handleSuccess = response => {\n    const entities = denormalisedResponseEntities(response);\n    if (entities.length !== 1) {\n      throw new Error('Expected a resource in the speculate response');\n    }\n    const tx = entities[0];\n    dispatch(speculateTransactionSuccess(tx));\n  };\n\n  const handleError = e => {\n    log.error(e, 'speculate-transaction-failed', {\n      listingId: transitionParams.listingId.uuid,\n      ...quantityMaybe,\n      ...bookingParamsMaybe,\n      ...orderData,\n    });\n    return dispatch(speculateTransactionError(storableError(e)));\n  };\n\n  if (isTransition && isPrivilegedTransition) {\n    // transition privileged\n    return transitionPrivileged({ isSpeculative: true, orderData, bodyParams, queryParams })\n      .then(handleSuccess)\n      .catch(handleError);\n  } else if (isTransition) {\n    // transition non-privileged\n    return sdk.transactions\n      .transitionSpeculative(bodyParams, queryParams)\n      .then(handleSuccess)\n      .catch(handleError);\n  } else if (isPrivilegedTransition) {\n    // initiate privileged\n    return initiatePrivileged({ isSpeculative: true, orderData, bodyParams, queryParams })\n      .then(handleSuccess)\n      .catch(handleError);\n  } else {\n    // initiate non-privileged\n    return sdk.transactions\n      .initiateSpeculative(bodyParams, queryParams)\n      .then(handleSuccess)\n      .catch(handleError);\n  }\n};\n\n// StripeCustomer is a relantionship to currentUser\n// We need to fetch currentUser with correct params to include relationship\nexport const stripeCustomer = () => (dispatch, getState, sdk) => {\n  dispatch(stripeCustomerRequest());\n\n  return dispatch(fetchCurrentUser({ include: ['stripeCustomer.defaultPaymentMethod'] }))\n    .then(response => {\n      dispatch(stripeCustomerSuccess());\n    })\n    .catch(e => {\n      dispatch(stripeCustomerError(storableError(e)));\n    });\n};\n"]},"metadata":{},"sourceType":"module"}