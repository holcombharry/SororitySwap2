{"ast":null,"code":"import { useEffect, useState } from 'react'; // Global state is useful in situations, where UI state needs to be tracked navigation history.\n// Alternatively, Redux could be used too, but it's unnecessarily heavy to use for\n// a single component to track it's internal UI state (e.g. \"scroll position\").\n// If more than one component is needing certain info, the recommendation is to use Redux.\n//\n// This piece of code is taken from Daishi Kato's blog:\n// https://blog.axlight.com/posts/steps-to-develop-global-state-for-react/\n\nexport const createGlobalState = initialState => {\n  var _s = $RefreshSig$();\n\n  let globalState = initialState;\n  const listeners = Object.fromEntries(Object.keys(initialState).map(key => [key, new Set()]));\n\n  const setGlobalState = (key, nextValue) => {\n    globalState = { ...globalState,\n      [key]: nextValue\n    };\n    listeners[key].forEach(listener => listener());\n  };\n\n  const useGlobalState = key => {\n    _s();\n\n    const [state, setState] = useState(globalState[key]);\n    useEffect(() => {\n      const listener = () => {\n        setState(globalState[key]);\n      };\n\n      listeners[key].add(listener);\n      listener(); // in case it's already changed\n\n      return () => listeners[key].delete(listener); // cleanup\n    }, []);\n    return [state, nextValue => setGlobalState(key, nextValue)];\n  };\n\n  _s(useGlobalState, \"+M++jdvRlBfSajOKlFi4UZ5O2p8=\");\n\n  return {\n    setGlobalState,\n    useGlobalState\n  };\n};","map":{"version":3,"sources":["/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/components/LayoutWrapperAccountSettingsSideNav/hookGlobalState.js"],"names":["useEffect","useState","createGlobalState","initialState","globalState","listeners","Object","fromEntries","keys","map","key","Set","setGlobalState","nextValue","forEach","listener","useGlobalState","state","setState","add","delete"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,iBAAiB,GAAGC,YAAY,IAAI;AAAA;;AAC/C,MAAIC,WAAW,GAAGD,YAAlB;AACA,QAAME,SAAS,GAAGC,MAAM,CAACC,WAAP,CAAmBD,MAAM,CAACE,IAAP,CAAYL,YAAZ,EAA0BM,GAA1B,CAA8BC,GAAG,IAAI,CAACA,GAAD,EAAM,IAAIC,GAAJ,EAAN,CAArC,CAAnB,CAAlB;;AAEA,QAAMC,cAAc,GAAG,CAACF,GAAD,EAAMG,SAAN,KAAoB;AACzCT,IAAAA,WAAW,GAAG,EAAE,GAAGA,WAAL;AAAkB,OAACM,GAAD,GAAOG;AAAzB,KAAd;AACAR,IAAAA,SAAS,CAACK,GAAD,CAAT,CAAeI,OAAf,CAAuBC,QAAQ,IAAIA,QAAQ,EAA3C;AACD,GAHD;;AAKA,QAAMC,cAAc,GAAGN,GAAG,IAAI;AAAA;;AAC5B,UAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,CAACG,WAAW,CAACM,GAAD,CAAZ,CAAlC;AACAV,IAAAA,SAAS,CAAC,MAAM;AACd,YAAMe,QAAQ,GAAG,MAAM;AACrBG,QAAAA,QAAQ,CAACd,WAAW,CAACM,GAAD,CAAZ,CAAR;AACD,OAFD;;AAGAL,MAAAA,SAAS,CAACK,GAAD,CAAT,CAAeS,GAAf,CAAmBJ,QAAnB;AACAA,MAAAA,QAAQ,GALM,CAKF;;AACZ,aAAO,MAAMV,SAAS,CAACK,GAAD,CAAT,CAAeU,MAAf,CAAsBL,QAAtB,CAAb,CANc,CAMgC;AAC/C,KAPQ,EAON,EAPM,CAAT;AAQA,WAAO,CAACE,KAAD,EAAQJ,SAAS,IAAID,cAAc,CAACF,GAAD,EAAMG,SAAN,CAAnC,CAAP;AACD,GAXD;;AAT+C,KASzCG,cATyC;;AAsB/C,SAAO;AACLJ,IAAAA,cADK;AAELI,IAAAA;AAFK,GAAP;AAID,CA1BM","sourcesContent":["import { useEffect, useState } from 'react';\n\n// Global state is useful in situations, where UI state needs to be tracked navigation history.\n// Alternatively, Redux could be used too, but it's unnecessarily heavy to use for\n// a single component to track it's internal UI state (e.g. \"scroll position\").\n// If more than one component is needing certain info, the recommendation is to use Redux.\n//\n// This piece of code is taken from Daishi Kato's blog:\n// https://blog.axlight.com/posts/steps-to-develop-global-state-for-react/\nexport const createGlobalState = initialState => {\n  let globalState = initialState;\n  const listeners = Object.fromEntries(Object.keys(initialState).map(key => [key, new Set()]));\n\n  const setGlobalState = (key, nextValue) => {\n    globalState = { ...globalState, [key]: nextValue };\n    listeners[key].forEach(listener => listener());\n  };\n\n  const useGlobalState = key => {\n    const [state, setState] = useState(globalState[key]);\n    useEffect(() => {\n      const listener = () => {\n        setState(globalState[key]);\n      };\n      listeners[key].add(listener);\n      listener(); // in case it's already changed\n      return () => listeners[key].delete(listener); // cleanup\n    }, []);\n    return [state, nextValue => setGlobalState(key, nextValue)];\n  };\n\n  return {\n    setGlobalState,\n    useGlobalState,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}