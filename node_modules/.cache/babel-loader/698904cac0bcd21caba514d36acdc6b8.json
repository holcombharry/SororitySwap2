{"ast":null,"code":"var _jsxFileName = \"/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/components/BookingTimeInfo/BookingTimeInfo.js\";\nimport React from 'react';\nimport { bool } from 'prop-types';\nimport classNames from 'classnames';\nimport { txIsEnquired } from '../../util/transaction';\nimport { timeOfDayFromTimeZoneToLocal, daysBetween, formatDateIntoPartials, subtractTime } from '../../util/dates';\nimport { injectIntl, intlShape } from '../../util/reactIntl';\nimport { LINE_ITEM_DAY, LINE_ITEM_NIGHT, LINE_ITEM_UNITS, DATE_TYPE_DATE, DATE_TYPE_DATETIME, propTypes } from '../../util/types';\nimport css from './BookingTimeInfo.module.css';\n\nconst orderData = (unitType, tx, intl) => {\n  // Attributes: displayStart and displayEnd can be used to differentiate shown time range\n  // from actual start and end times used for availability reservation. It can help in situations\n  // where there are preparation time needed between bookings.\n  // Read more: https://www.sharetribe.com/api-reference/marketplace.html#bookings\n  const {\n    start,\n    end,\n    displayStart,\n    displayEnd\n  } = tx.booking.attributes;\n  const apiTimeZone = 'Etc/UTC';\n  const startDate = timeOfDayFromTimeZoneToLocal(displayStart || start, apiTimeZone);\n  const endDateRaw = timeOfDayFromTimeZoneToLocal(displayEnd || end, apiTimeZone);\n  const isDaily = unitType === LINE_ITEM_DAY;\n  const isNightly = unitType === LINE_ITEM_NIGHT;\n  const isUnits = unitType === LINE_ITEM_UNITS;\n  const isSingleDay = !isNightly && daysBetween(startDate, endDateRaw) <= 1;\n  const bookingStart = formatDateIntoPartials(startDate, intl); // Shift the exclusive API end date with daily bookings\n\n  const endDate = isDaily || isUnits ? subtractTime(endDateRaw, 1, 'days') : endDateRaw;\n  const bookingEnd = formatDateIntoPartials(endDate, intl);\n  return {\n    bookingStart,\n    bookingEnd,\n    isSingleDay\n  };\n};\n\nconst BookingTimeInfoComponent = props => {\n  const {\n    bookingClassName,\n    intl,\n    tx,\n    unitType,\n    dateType\n  } = props;\n  const isEnquiry = txIsEnquired(tx);\n\n  if (isEnquiry) {\n    return null;\n  }\n\n  const bookingTimes = orderData(unitType, tx, intl);\n  const {\n    bookingStart,\n    bookingEnd,\n    isSingleDay\n  } = bookingTimes;\n\n  if (isSingleDay && dateType === DATE_TYPE_DATE) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames(css.bookingInfo, bookingClassName),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: css.dateSection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }, `${bookingStart.date}`));\n  } else if (dateType === DATE_TYPE_DATE) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames(css.bookingInfo, bookingClassName),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: css.dateSection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }\n    }, `${bookingStart.date} -`), /*#__PURE__*/React.createElement(\"span\", {\n      className: css.dateSection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }, `${bookingEnd.date}`));\n  } else if (isSingleDay && dateType === DATE_TYPE_DATETIME) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames(css.bookingInfo, bookingClassName),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: css.dateSection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, `${bookingStart.date}, ${bookingStart.time} - ${bookingEnd.time}`));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames(css.bookingInfo, bookingClassName),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: css.dateSection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, `${bookingStart.dateAndTime} - `), /*#__PURE__*/React.createElement(\"span\", {\n      className: css.dateSection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, `${bookingEnd.dateAndTime}`));\n  }\n};\n\n_c = BookingTimeInfoComponent;\nBookingTimeInfoComponent.defaultProps = {\n  dateType: null\n};\nBookingTimeInfoComponent.propTypes = {\n  intl: intlShape.isRequired,\n  tx: propTypes.transaction.isRequired,\n  unitType: propTypes.lineItemUnitType.isRequired,\n  dateType: propTypes.dateType\n};\nconst BookingTimeInfo = injectIntl(BookingTimeInfoComponent);\n_c2 = BookingTimeInfo;\nexport default BookingTimeInfo;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BookingTimeInfoComponent\");\n$RefreshReg$(_c2, \"BookingTimeInfo\");","map":{"version":3,"sources":["/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/components/BookingTimeInfo/BookingTimeInfo.js"],"names":["React","bool","classNames","txIsEnquired","timeOfDayFromTimeZoneToLocal","daysBetween","formatDateIntoPartials","subtractTime","injectIntl","intlShape","LINE_ITEM_DAY","LINE_ITEM_NIGHT","LINE_ITEM_UNITS","DATE_TYPE_DATE","DATE_TYPE_DATETIME","propTypes","css","orderData","unitType","tx","intl","start","end","displayStart","displayEnd","booking","attributes","apiTimeZone","startDate","endDateRaw","isDaily","isNightly","isUnits","isSingleDay","bookingStart","endDate","bookingEnd","BookingTimeInfoComponent","props","bookingClassName","dateType","isEnquiry","bookingTimes","bookingInfo","dateSection","date","time","dateAndTime","defaultProps","isRequired","transaction","lineItemUnitType","BookingTimeInfo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { bool } from 'prop-types';\nimport classNames from 'classnames';\nimport { txIsEnquired } from '../../util/transaction';\nimport {\n  timeOfDayFromTimeZoneToLocal,\n  daysBetween,\n  formatDateIntoPartials,\n  subtractTime,\n} from '../../util/dates';\nimport { injectIntl, intlShape } from '../../util/reactIntl';\nimport {\n  LINE_ITEM_DAY,\n  LINE_ITEM_NIGHT,\n  LINE_ITEM_UNITS,\n  DATE_TYPE_DATE,\n  DATE_TYPE_DATETIME,\n  propTypes,\n} from '../../util/types';\n\nimport css from './BookingTimeInfo.module.css';\n\nconst orderData = (unitType, tx, intl) => {\n  // Attributes: displayStart and displayEnd can be used to differentiate shown time range\n  // from actual start and end times used for availability reservation. It can help in situations\n  // where there are preparation time needed between bookings.\n  // Read more: https://www.sharetribe.com/api-reference/marketplace.html#bookings\n  const { start, end, displayStart, displayEnd } = tx.booking.attributes;\n  const apiTimeZone = 'Etc/UTC';\n  const startDate = timeOfDayFromTimeZoneToLocal(displayStart || start, apiTimeZone);\n  const endDateRaw = timeOfDayFromTimeZoneToLocal(displayEnd || end, apiTimeZone);\n  const isDaily = unitType === LINE_ITEM_DAY;\n  const isNightly = unitType === LINE_ITEM_NIGHT;\n  const isUnits = unitType === LINE_ITEM_UNITS;\n  const isSingleDay = !isNightly && daysBetween(startDate, endDateRaw) <= 1;\n  const bookingStart = formatDateIntoPartials(startDate, intl);\n  // Shift the exclusive API end date with daily bookings\n  const endDate = isDaily || isUnits ? subtractTime(endDateRaw, 1, 'days') : endDateRaw;\n  const bookingEnd = formatDateIntoPartials(endDate, intl);\n  return { bookingStart, bookingEnd, isSingleDay };\n};\n\nconst BookingTimeInfoComponent = props => {\n  const { bookingClassName, intl, tx, unitType, dateType } = props;\n  const isEnquiry = txIsEnquired(tx);\n\n  if (isEnquiry) {\n    return null;\n  }\n\n  const bookingTimes = orderData(unitType, tx, intl);\n\n  const { bookingStart, bookingEnd, isSingleDay } = bookingTimes;\n\n  if (isSingleDay && dateType === DATE_TYPE_DATE) {\n    return (\n      <div className={classNames(css.bookingInfo, bookingClassName)}>\n        <span className={css.dateSection}>{`${bookingStart.date}`}</span>\n      </div>\n    );\n  } else if (dateType === DATE_TYPE_DATE) {\n    return (\n      <div className={classNames(css.bookingInfo, bookingClassName)}>\n        <span className={css.dateSection}>{`${bookingStart.date} -`}</span>\n        <span className={css.dateSection}>{`${bookingEnd.date}`}</span>\n      </div>\n    );\n  } else if (isSingleDay && dateType === DATE_TYPE_DATETIME) {\n    return (\n      <div className={classNames(css.bookingInfo, bookingClassName)}>\n        <span className={css.dateSection}>\n          {`${bookingStart.date}, ${bookingStart.time} - ${bookingEnd.time}`}\n        </span>\n      </div>\n    );\n  } else {\n    return (\n      <div className={classNames(css.bookingInfo, bookingClassName)}>\n        <span className={css.dateSection}>{`${bookingStart.dateAndTime} - `}</span>\n        <span className={css.dateSection}>{`${bookingEnd.dateAndTime}`}</span>\n      </div>\n    );\n  }\n};\n\nBookingTimeInfoComponent.defaultProps = { dateType: null };\n\nBookingTimeInfoComponent.propTypes = {\n  intl: intlShape.isRequired,\n  tx: propTypes.transaction.isRequired,\n  unitType: propTypes.lineItemUnitType.isRequired,\n  dateType: propTypes.dateType,\n};\n\nconst BookingTimeInfo = injectIntl(BookingTimeInfoComponent);\n\nexport default BookingTimeInfo;\n"]},"metadata":{},"sourceType":"module"}