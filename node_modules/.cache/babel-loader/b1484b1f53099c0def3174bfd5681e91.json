{"ast":null,"code":"var _jsxFileName = \"/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/containers/EditListingPage/EditListingWizard/EditListingPhotosPanel/EditListingPhotosForm.js\";\nimport React, { Component } from 'react';\nimport { array, bool, func, object, shape, string } from 'prop-types';\nimport { compose } from 'redux';\nimport { ARRAY_ERROR } from 'final-form';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport arrayMutators from 'final-form-arrays';\nimport { FieldArray } from 'react-final-form-arrays';\nimport isEqual from 'lodash/isEqual';\nimport classNames from 'classnames'; // Import configs and util modules\n\nimport config from '../../../../config';\nimport { FormattedMessage, intlShape, injectIntl } from '../../../../util/reactIntl';\nimport { propTypes } from '../../../../util/types';\nimport { nonEmptyArray, composeValidators } from '../../../../util/validators';\nimport { isUploadImageOverLimitError } from '../../../../util/errors'; // Import shared components\n\nimport { Button, Form, AspectRatioWrapper } from '../../../../components'; // Import modules from this directory\n\nimport ListingImage from './ListingImage';\nimport css from './EditListingPhotosForm.module.css';\nconst ACCEPT_IMAGES = 'image/*'; // Field component that uses file-input to allow user to select images.\n\nconst FieldAddImage = props => {\n  const {\n    formApi,\n    onImageUploadHandler,\n    ...rest\n  } = props;\n  const {\n    aspectWidth = 1,\n    aspectHeight = 1\n  } = config.listing;\n  return /*#__PURE__*/React.createElement(Field, Object.assign({\n    form: null\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }), fieldprops => {\n    const {\n      accept,\n      input,\n      label,\n      disabled: fieldDisabled\n    } = fieldprops;\n    const {\n      name,\n      type\n    } = input;\n\n    const onChange = e => {\n      const file = e.target.files[0];\n      formApi.change(`addImage`, file);\n      formApi.blur(`addImage`);\n      onImageUploadHandler(file);\n    };\n\n    const inputProps = {\n      accept,\n      id: name,\n      name,\n      onChange,\n      type\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: css.addImageWrapper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(AspectRatioWrapper, {\n      width: aspectWidth,\n      height: aspectHeight,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }\n    }, fieldDisabled ? null : /*#__PURE__*/React.createElement(\"input\", Object.assign({}, inputProps, {\n      className: css.addImageInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 39\n      }\n    })), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: name,\n      className: css.addImage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 15\n      }\n    }, label)));\n  });\n}; // Component that shows listing images from \"images\" field array\n\n\n_c = FieldAddImage;\n\nconst FieldListingImage = props => {\n  const {\n    name,\n    intl,\n    onRemoveImage\n  } = props;\n  return /*#__PURE__*/React.createElement(Field, {\n    name: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, fieldProps => {\n    var _image$id;\n\n    const {\n      input\n    } = fieldProps;\n    const image = input.value;\n    return image ? /*#__PURE__*/React.createElement(ListingImage, {\n      image: image,\n      key: (image === null || image === void 0 ? void 0 : (_image$id = image.id) === null || _image$id === void 0 ? void 0 : _image$id.uuid) || (image === null || image === void 0 ? void 0 : image.id),\n      className: css.thumbnail,\n      savedImageAltText: intl.formatMessage({\n        id: 'EditListingPhotosForm.savedImageAltText'\n      }),\n      onRemoveImage: () => onRemoveImage(image === null || image === void 0 ? void 0 : image.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    }) : null;\n  });\n};\n\n_c2 = FieldListingImage;\nexport class EditListingPhotosFormComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      imageUploadRequested: false\n    };\n    this.onImageUploadHandler = this.onImageUploadHandler.bind(this);\n    this.submittedImages = [];\n  }\n\n  onImageUploadHandler(file) {\n    if (file) {\n      this.setState({\n        imageUploadRequested: true\n      });\n      this.props.onImageUpload({\n        id: `${file.name}_${Date.now()}`,\n        file\n      }).then(() => {\n        this.setState({\n          imageUploadRequested: false\n        });\n      }).catch(() => {\n        this.setState({\n          imageUploadRequested: false\n        });\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(FinalForm, Object.assign({}, this.props, {\n      mutators: { ...arrayMutators\n      },\n      onImageUploadHandler: this.onImageUploadHandler,\n      imageUploadRequested: this.state.imageUploadRequested,\n      initialValues: {\n        images: this.props.images\n      },\n      render: formRenderProps => {\n        const {\n          form,\n          className,\n          fetchErrors,\n          handleSubmit,\n          images,\n          imageUploadRequested,\n          intl,\n          invalid,\n          onImageUploadHandler,\n          onRemoveImage,\n          disabled,\n          ready,\n          saveActionMsg,\n          updated,\n          updateInProgress,\n          touched,\n          errors\n        } = formRenderProps;\n        const chooseImageText = /*#__PURE__*/React.createElement(\"span\", {\n          className: css.chooseImageText,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: css.chooseImage,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"EditListingPhotosForm.chooseImage\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 17\n          }\n        })), /*#__PURE__*/React.createElement(\"span\", {\n          className: css.imageTypes,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"EditListingPhotosForm.imageTypes\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 17\n          }\n        })));\n        const imageRequiredMessage = intl.formatMessage({\n          id: 'EditListingPhotosForm.imageRequired'\n        });\n        const {\n          publishListingError,\n          showListingsError,\n          updateListingError,\n          uploadImageError\n        } = fetchErrors || {};\n        const uploadOverLimit = isUploadImageOverLimitError(uploadImageError);\n        let uploadImageFailed = null;\n\n        if (uploadOverLimit) {\n          uploadImageFailed = /*#__PURE__*/React.createElement(\"p\", {\n            className: css.error,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(FormattedMessage, {\n            id: \"EditListingPhotosForm.imageUploadFailed.uploadOverLimit\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 17\n            }\n          }));\n        } else if (uploadImageError) {\n          uploadImageFailed = /*#__PURE__*/React.createElement(\"p\", {\n            className: css.error,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(FormattedMessage, {\n            id: \"EditListingPhotosForm.imageUploadFailed.uploadFailed\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 17\n            }\n          }));\n        } // NOTE: These error messages are here since Photos panel is the last visible panel\n        // before creating a new listing. If that order is changed, these should be changed too.\n        // Create and show listing errors are shown above submit button\n\n\n        const publishListingFailed = publishListingError ? /*#__PURE__*/React.createElement(\"p\", {\n          className: css.error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"EditListingPhotosForm.publishListingFailed\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 15\n          }\n        })) : null;\n        const showListingFailed = showListingsError ? /*#__PURE__*/React.createElement(\"p\", {\n          className: css.error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"EditListingPhotosForm.showListingFailed\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 15\n          }\n        })) : null;\n        const submittedOnce = this.submittedImages.length > 0; // imgs can contain added images (with temp ids) and submitted images with uniq ids.\n\n        const arrayOfImgIds = imgs => imgs.map(i => typeof i.id === 'string' ? i.imageId : i.id);\n\n        const imageIdsFromProps = arrayOfImgIds(images);\n        const imageIdsFromPreviousSubmit = arrayOfImgIds(this.submittedImages);\n        const imageArrayHasSameImages = isEqual(imageIdsFromProps, imageIdsFromPreviousSubmit);\n        const pristineSinceLastSubmit = submittedOnce && imageArrayHasSameImages;\n        const submitReady = updated && pristineSinceLastSubmit || ready;\n        const submitInProgress = updateInProgress;\n        const submitDisabled = invalid || disabled || submitInProgress || imageUploadRequested || ready;\n        const imagesError = touched.images && (errors === null || errors === void 0 ? void 0 : errors.images) && errors.images[ARRAY_ERROR];\n        const classes = classNames(css.root, className);\n        return /*#__PURE__*/React.createElement(Form, {\n          className: classes,\n          onSubmit: e => {\n            this.submittedImages = images;\n            handleSubmit(e);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }\n        }, updateListingError ? /*#__PURE__*/React.createElement(\"p\", {\n          className: css.error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"EditListingPhotosForm.updateFailed\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 19\n          }\n        })) : null, /*#__PURE__*/React.createElement(\"div\", {\n          className: css.imagesField,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(FieldArray, {\n          name: \"images\",\n          validate: composeValidators(nonEmptyArray(imageRequiredMessage)),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 17\n          }\n        }, ({\n          fields\n        }) => fields.map((name, index) => /*#__PURE__*/React.createElement(FieldListingImage, {\n          key: name,\n          name: name,\n          onRemoveImage: imageId => {\n            fields.remove(index);\n            onRemoveImage(imageId);\n          },\n          intl: intl,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 23\n          }\n        }))), /*#__PURE__*/React.createElement(FieldAddImage, {\n          id: \"addImage\",\n          name: \"addImage\",\n          accept: ACCEPT_IMAGES,\n          label: chooseImageText,\n          type: \"file\",\n          disabled: imageUploadRequested,\n          formApi: form,\n          onImageUploadHandler: onImageUploadHandler,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 17\n          }\n        })), imagesError ? /*#__PURE__*/React.createElement(\"div\", {\n          className: css.arrayError,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 30\n          }\n        }, imagesError) : null, uploadImageFailed, /*#__PURE__*/React.createElement(\"p\", {\n          className: css.tip,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"EditListingPhotosForm.addImagesTip\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 17\n          }\n        })), publishListingFailed, showListingFailed, /*#__PURE__*/React.createElement(Button, {\n          className: css.submitButton,\n          type: \"submit\",\n          inProgress: submitInProgress,\n          disabled: submitDisabled,\n          ready: submitReady,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 15\n          }\n        }, saveActionMsg));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}\nEditListingPhotosFormComponent.defaultProps = {\n  fetchErrors: null,\n  images: []\n};\nEditListingPhotosFormComponent.propTypes = {\n  fetchErrors: shape({\n    publishListingError: propTypes.error,\n    showListingsError: propTypes.error,\n    uploadImageError: propTypes.error,\n    updateListingError: propTypes.error\n  }),\n  images: array,\n  intl: intlShape.isRequired,\n  onImageUpload: func.isRequired,\n  onSubmit: func.isRequired,\n  saveActionMsg: string.isRequired,\n  disabled: bool.isRequired,\n  ready: bool.isRequired,\n  updated: bool.isRequired,\n  updateInProgress: bool.isRequired,\n  onRemoveImage: func.isRequired\n};\nexport default compose(injectIntl)(EditListingPhotosFormComponent);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FieldAddImage\");\n$RefreshReg$(_c2, \"FieldListingImage\");","map":{"version":3,"sources":["/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/containers/EditListingPage/EditListingWizard/EditListingPhotosPanel/EditListingPhotosForm.js"],"names":["React","Component","array","bool","func","object","shape","string","compose","ARRAY_ERROR","Form","FinalForm","Field","arrayMutators","FieldArray","isEqual","classNames","config","FormattedMessage","intlShape","injectIntl","propTypes","nonEmptyArray","composeValidators","isUploadImageOverLimitError","Button","AspectRatioWrapper","ListingImage","css","ACCEPT_IMAGES","FieldAddImage","props","formApi","onImageUploadHandler","rest","aspectWidth","aspectHeight","listing","fieldprops","accept","input","label","disabled","fieldDisabled","name","type","onChange","e","file","target","files","change","blur","inputProps","id","addImageWrapper","addImageInput","addImage","FieldListingImage","intl","onRemoveImage","fieldProps","image","value","uuid","thumbnail","formatMessage","EditListingPhotosFormComponent","constructor","state","imageUploadRequested","bind","submittedImages","setState","onImageUpload","Date","now","then","catch","render","images","formRenderProps","form","className","fetchErrors","handleSubmit","invalid","ready","saveActionMsg","updated","updateInProgress","touched","errors","chooseImageText","chooseImage","imageTypes","imageRequiredMessage","publishListingError","showListingsError","updateListingError","uploadImageError","uploadOverLimit","uploadImageFailed","error","publishListingFailed","showListingFailed","submittedOnce","length","arrayOfImgIds","imgs","map","i","imageId","imageIdsFromProps","imageIdsFromPreviousSubmit","imageArrayHasSameImages","pristineSinceLastSubmit","submitReady","submitInProgress","submitDisabled","imagesError","classes","root","imagesField","fields","index","remove","arrayError","tip","submitButton","defaultProps","isRequired","onSubmit"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { array, bool, func, object, shape, string } from 'prop-types';\nimport { compose } from 'redux';\nimport { ARRAY_ERROR } from 'final-form';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport arrayMutators from 'final-form-arrays';\nimport { FieldArray } from 'react-final-form-arrays';\nimport isEqual from 'lodash/isEqual';\nimport classNames from 'classnames';\n\n// Import configs and util modules\nimport config from '../../../../config';\nimport { FormattedMessage, intlShape, injectIntl } from '../../../../util/reactIntl';\nimport { propTypes } from '../../../../util/types';\nimport { nonEmptyArray, composeValidators } from '../../../../util/validators';\nimport { isUploadImageOverLimitError } from '../../../../util/errors';\n\n// Import shared components\nimport { Button, Form, AspectRatioWrapper } from '../../../../components';\n\n// Import modules from this directory\nimport ListingImage from './ListingImage';\nimport css from './EditListingPhotosForm.module.css';\n\nconst ACCEPT_IMAGES = 'image/*';\n\n// Field component that uses file-input to allow user to select images.\nconst FieldAddImage = props => {\n  const { formApi, onImageUploadHandler, ...rest } = props;\n  const { aspectWidth = 1, aspectHeight = 1 } = config.listing;\n  return (\n    <Field form={null} {...rest}>\n      {fieldprops => {\n        const { accept, input, label, disabled: fieldDisabled } = fieldprops;\n        const { name, type } = input;\n        const onChange = e => {\n          const file = e.target.files[0];\n          formApi.change(`addImage`, file);\n          formApi.blur(`addImage`);\n          onImageUploadHandler(file);\n        };\n        const inputProps = { accept, id: name, name, onChange, type };\n        return (\n          <div className={css.addImageWrapper}>\n            <AspectRatioWrapper width={aspectWidth} height={aspectHeight}>\n              {fieldDisabled ? null : <input {...inputProps} className={css.addImageInput} />}\n              <label htmlFor={name} className={css.addImage}>\n                {label}\n              </label>\n            </AspectRatioWrapper>\n          </div>\n        );\n      }}\n    </Field>\n  );\n};\n\n// Component that shows listing images from \"images\" field array\nconst FieldListingImage = props => {\n  const { name, intl, onRemoveImage } = props;\n  return (\n    <Field name={name}>\n      {fieldProps => {\n        const { input } = fieldProps;\n        const image = input.value;\n        return image ? (\n          <ListingImage\n            image={image}\n            key={image?.id?.uuid || image?.id}\n            className={css.thumbnail}\n            savedImageAltText={intl.formatMessage({\n              id: 'EditListingPhotosForm.savedImageAltText',\n            })}\n            onRemoveImage={() => onRemoveImage(image?.id)}\n          />\n        ) : null;\n      }}\n    </Field>\n  );\n};\n\nexport class EditListingPhotosFormComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { imageUploadRequested: false };\n    this.onImageUploadHandler = this.onImageUploadHandler.bind(this);\n    this.submittedImages = [];\n  }\n\n  onImageUploadHandler(file) {\n    if (file) {\n      this.setState({ imageUploadRequested: true });\n      this.props\n        .onImageUpload({ id: `${file.name}_${Date.now()}`, file })\n        .then(() => {\n          this.setState({ imageUploadRequested: false });\n        })\n        .catch(() => {\n          this.setState({ imageUploadRequested: false });\n        });\n    }\n  }\n\n  render() {\n    return (\n      <FinalForm\n        {...this.props}\n        mutators={{ ...arrayMutators }}\n        onImageUploadHandler={this.onImageUploadHandler}\n        imageUploadRequested={this.state.imageUploadRequested}\n        initialValues={{ images: this.props.images }}\n        render={formRenderProps => {\n          const {\n            form,\n            className,\n            fetchErrors,\n            handleSubmit,\n            images,\n            imageUploadRequested,\n            intl,\n            invalid,\n            onImageUploadHandler,\n            onRemoveImage,\n            disabled,\n            ready,\n            saveActionMsg,\n            updated,\n            updateInProgress,\n            touched,\n            errors,\n          } = formRenderProps;\n\n          const chooseImageText = (\n            <span className={css.chooseImageText}>\n              <span className={css.chooseImage}>\n                <FormattedMessage id=\"EditListingPhotosForm.chooseImage\" />\n              </span>\n              <span className={css.imageTypes}>\n                <FormattedMessage id=\"EditListingPhotosForm.imageTypes\" />\n              </span>\n            </span>\n          );\n\n          const imageRequiredMessage = intl.formatMessage({\n            id: 'EditListingPhotosForm.imageRequired',\n          });\n\n          const { publishListingError, showListingsError, updateListingError, uploadImageError } =\n            fetchErrors || {};\n          const uploadOverLimit = isUploadImageOverLimitError(uploadImageError);\n\n          let uploadImageFailed = null;\n\n          if (uploadOverLimit) {\n            uploadImageFailed = (\n              <p className={css.error}>\n                <FormattedMessage id=\"EditListingPhotosForm.imageUploadFailed.uploadOverLimit\" />\n              </p>\n            );\n          } else if (uploadImageError) {\n            uploadImageFailed = (\n              <p className={css.error}>\n                <FormattedMessage id=\"EditListingPhotosForm.imageUploadFailed.uploadFailed\" />\n              </p>\n            );\n          }\n\n          // NOTE: These error messages are here since Photos panel is the last visible panel\n          // before creating a new listing. If that order is changed, these should be changed too.\n          // Create and show listing errors are shown above submit button\n          const publishListingFailed = publishListingError ? (\n            <p className={css.error}>\n              <FormattedMessage id=\"EditListingPhotosForm.publishListingFailed\" />\n            </p>\n          ) : null;\n          const showListingFailed = showListingsError ? (\n            <p className={css.error}>\n              <FormattedMessage id=\"EditListingPhotosForm.showListingFailed\" />\n            </p>\n          ) : null;\n\n          const submittedOnce = this.submittedImages.length > 0;\n          // imgs can contain added images (with temp ids) and submitted images with uniq ids.\n          const arrayOfImgIds = imgs =>\n            imgs.map(i => (typeof i.id === 'string' ? i.imageId : i.id));\n          const imageIdsFromProps = arrayOfImgIds(images);\n          const imageIdsFromPreviousSubmit = arrayOfImgIds(this.submittedImages);\n          const imageArrayHasSameImages = isEqual(imageIdsFromProps, imageIdsFromPreviousSubmit);\n          const pristineSinceLastSubmit = submittedOnce && imageArrayHasSameImages;\n\n          const submitReady = (updated && pristineSinceLastSubmit) || ready;\n          const submitInProgress = updateInProgress;\n          const submitDisabled =\n            invalid || disabled || submitInProgress || imageUploadRequested || ready;\n          const imagesError = touched.images && errors?.images && errors.images[ARRAY_ERROR];\n\n          const classes = classNames(css.root, className);\n\n          return (\n            <Form\n              className={classes}\n              onSubmit={e => {\n                this.submittedImages = images;\n                handleSubmit(e);\n              }}\n            >\n              {updateListingError ? (\n                <p className={css.error}>\n                  <FormattedMessage id=\"EditListingPhotosForm.updateFailed\" />\n                </p>\n              ) : null}\n\n              <div className={css.imagesField}>\n                <FieldArray\n                  name=\"images\"\n                  validate={composeValidators(nonEmptyArray(imageRequiredMessage))}\n                >\n                  {({ fields }) =>\n                    fields.map((name, index) => (\n                      <FieldListingImage\n                        key={name}\n                        name={name}\n                        onRemoveImage={imageId => {\n                          fields.remove(index);\n                          onRemoveImage(imageId);\n                        }}\n                        intl={intl}\n                      />\n                    ))\n                  }\n                </FieldArray>\n\n                <FieldAddImage\n                  id=\"addImage\"\n                  name=\"addImage\"\n                  accept={ACCEPT_IMAGES}\n                  label={chooseImageText}\n                  type=\"file\"\n                  disabled={imageUploadRequested}\n                  formApi={form}\n                  onImageUploadHandler={onImageUploadHandler}\n                />\n              </div>\n              {imagesError ? <div className={css.arrayError}>{imagesError}</div> : null}\n              {uploadImageFailed}\n\n              <p className={css.tip}>\n                <FormattedMessage id=\"EditListingPhotosForm.addImagesTip\" />\n              </p>\n              {publishListingFailed}\n              {showListingFailed}\n\n              <Button\n                className={css.submitButton}\n                type=\"submit\"\n                inProgress={submitInProgress}\n                disabled={submitDisabled}\n                ready={submitReady}\n              >\n                {saveActionMsg}\n              </Button>\n            </Form>\n          );\n        }}\n      />\n    );\n  }\n}\n\nEditListingPhotosFormComponent.defaultProps = { fetchErrors: null, images: [] };\n\nEditListingPhotosFormComponent.propTypes = {\n  fetchErrors: shape({\n    publishListingError: propTypes.error,\n    showListingsError: propTypes.error,\n    uploadImageError: propTypes.error,\n    updateListingError: propTypes.error,\n  }),\n  images: array,\n  intl: intlShape.isRequired,\n  onImageUpload: func.isRequired,\n  onSubmit: func.isRequired,\n  saveActionMsg: string.isRequired,\n  disabled: bool.isRequired,\n  ready: bool.isRequired,\n  updated: bool.isRequired,\n  updateInProgress: bool.isRequired,\n  onRemoveImage: func.isRequired,\n};\n\nexport default compose(injectIntl)(EditListingPhotosFormComponent);\n"]},"metadata":{},"sourceType":"module"}