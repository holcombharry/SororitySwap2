{"ast":null,"code":"var _jsxFileName = \"/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/containers/ManageListingsPage/ManageListingCard/ManageListingCard.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport classNames from 'classnames';\nimport config from '../../../config';\nimport routeConfiguration from '../../../routing/routeConfiguration';\nimport { FormattedMessage, intlShape, injectIntl } from '../../../util/reactIntl';\nimport { LINE_ITEM_NIGHT, LINE_ITEM_DAY, LISTING_STATE_PENDING_APPROVAL, LISTING_STATE_CLOSED, LISTING_STATE_DRAFT, propTypes } from '../../../util/types';\nimport { formatMoney } from '../../../util/currency';\nimport { ensureOwnListing } from '../../../util/data';\nimport { LISTING_PAGE_PENDING_APPROVAL_VARIANT, LISTING_PAGE_DRAFT_VARIANT, LISTING_PAGE_PARAM_TYPE_DRAFT, LISTING_PAGE_PARAM_TYPE_EDIT, createSlug } from '../../../util/urlHelpers';\nimport { createResourceLocatorString, findRouteByRouteName } from '../../../util/routes';\nimport { AspectRatioWrapper, InlineTextButton, Menu, MenuLabel, MenuContent, MenuItem, NamedLink, IconSpinner, ResponsiveImage } from '../../../components';\nimport MenuIcon from './MenuIcon';\nimport Overlay from './Overlay';\nimport css from './ManageListingCard.module.css'; // Menu content needs the same padding\n\nconst MENU_CONTENT_OFFSET = -12;\nconst MAX_LENGTH_FOR_WORDS_IN_TITLE = 7;\n\nconst priceData = (price, intl) => {\n  if (price && price.currency === config.currency) {\n    const formattedPrice = formatMoney(intl, price);\n    return {\n      formattedPrice,\n      priceTitle: formattedPrice\n    };\n  } else if (price) {\n    return {\n      formattedPrice: intl.formatMessage({\n        id: 'ManageListingCard.unsupportedPrice'\n      }, {\n        currency: price.currency\n      }),\n      priceTitle: intl.formatMessage({\n        id: 'ManageListingCard.unsupportedPriceTitle'\n      }, {\n        currency: price.currency\n      })\n    };\n  }\n\n  return {};\n};\n\nconst createListingURL = (routes, listing) => {\n  const id = listing.id.uuid;\n  const slug = createSlug(listing.attributes.title);\n  const isPendingApproval = listing.attributes.state === LISTING_STATE_PENDING_APPROVAL;\n  const isDraft = listing.attributes.state === LISTING_STATE_DRAFT;\n  const variant = isDraft ? LISTING_PAGE_DRAFT_VARIANT : isPendingApproval ? LISTING_PAGE_PENDING_APPROVAL_VARIANT : null;\n  const linkProps = isPendingApproval || isDraft ? {\n    name: 'ListingPageVariant',\n    params: {\n      id,\n      slug,\n      variant\n    }\n  } : {\n    name: 'ListingPage',\n    params: {\n      id,\n      slug\n    }\n  };\n  return createResourceLocatorString(linkProps.name, routes, linkProps.params, {});\n}; // Cards are not fixed sizes - So, long words in title make flexboxed items to grow too big.\n// 1. We split title to an array of words and spaces.\n//    \"foo bar\".split(/([^\\s]+)/gi) => [\"\", \"foo\", \" \", \"bar\", \"\"]\n// 2. Then we break long words by adding a '<span>' with word-break: 'break-all';\n\n\nconst formatTitle = (title, maxLength) => {\n  const nonWhiteSpaceSequence = /([^\\s]+)/gi;\n  return title.split(nonWhiteSpaceSequence).map((word, index) => {\n    return word.length > maxLength ? /*#__PURE__*/React.createElement(\"span\", {\n      key: index,\n      style: {\n        wordBreak: 'break-all'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }\n    }, word) : word;\n  });\n};\n\nexport const ManageListingCardComponent = props => {\n  var _currentListing$curre, _currentListing$curre2, _firstImage$attribute;\n\n  const {\n    className,\n    rootClassName,\n    hasClosingError,\n    hasOpeningError,\n    history,\n    intl,\n    isMenuOpen,\n    actionsInProgressListingId,\n    listing,\n    onCloseListing,\n    onOpenListing,\n    onToggleMenu,\n    renderSizes\n  } = props;\n  const classes = classNames(rootClassName || css.root, className);\n  const currentListing = ensureOwnListing(listing);\n  const id = currentListing.id.uuid;\n  const {\n    title = '',\n    price,\n    state\n  } = currentListing.attributes;\n  const slug = createSlug(title);\n  const isPendingApproval = state === LISTING_STATE_PENDING_APPROVAL;\n  const isClosed = state === LISTING_STATE_CLOSED;\n  const isDraft = state === LISTING_STATE_DRAFT;\n  const currentStock = (_currentListing$curre = currentListing.currentStock) === null || _currentListing$curre === void 0 ? void 0 : (_currentListing$curre2 = _currentListing$curre.attributes) === null || _currentListing$curre2 === void 0 ? void 0 : _currentListing$curre2.quantity;\n  const isOutOfStock = currentStock === 0;\n  const showOutOfStockOverlay = isOutOfStock && !isPendingApproval && !isClosed && !isDraft;\n  const firstImage = currentListing.images && currentListing.images.length > 0 ? currentListing.images[0] : null;\n  const menuItemClasses = classNames(css.menuItem, {\n    [css.menuItemDisabled]: !!actionsInProgressListingId\n  });\n  const {\n    formattedPrice,\n    priceTitle\n  } = priceData(price, intl);\n  const hasError = hasOpeningError || hasClosingError;\n  const thisListingInProgress = actionsInProgressListingId && actionsInProgressListingId.uuid === id;\n\n  const onOverListingLink = () => {\n    // Enforce preloading of ListingPage (loadable component)\n    const {\n      component: Page\n    } = findRouteByRouteName('ListingPage', routeConfiguration()); // Loadable Component has a \"preload\" function.\n\n    if (Page.preload) {\n      Page.preload();\n    }\n  };\n\n  const titleClasses = classNames(css.title, {\n    [css.titlePending]: isPendingApproval,\n    [css.titleDraft]: isDraft\n  });\n  const editListingLinkType = isDraft ? LISTING_PAGE_PARAM_TYPE_DRAFT : LISTING_PAGE_PARAM_TYPE_EDIT;\n  const unitType = config.lineItemUnitType;\n  const isNightly = unitType === LINE_ITEM_NIGHT;\n  const isDaily = unitType === LINE_ITEM_DAY;\n  const unitTranslationKey = isNightly ? 'ManageListingCard.perNight' : isDaily ? 'ManageListingCard.perDay' : 'ManageListingCard.perUnit';\n  const {\n    aspectWidth = 1,\n    aspectHeight = 1,\n    variantPrefix = 'listing-card'\n  } = config.listing;\n  const variants = firstImage ? Object.keys(firstImage === null || firstImage === void 0 ? void 0 : (_firstImage$attribute = firstImage.attributes) === null || _firstImage$attribute === void 0 ? void 0 : _firstImage$attribute.variants).filter(k => k.startsWith(variantPrefix)) : [];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: css.clickWrapper,\n    tabIndex: 0,\n    onClick: event => {\n      event.preventDefault();\n      event.stopPropagation(); // ManageListingCard contains links, buttons and elements that are working with routing.\n      // This card doesn't work if <a> or <button> is used to wrap events that are card 'clicks'.\n      //\n      // NOTE: It might be better to absolute-position those buttons over a card-links.\n      // (So, that they have no parent-child relationship - like '<a>bla<a>blaa</a></a>')\n\n      history.push(createListingURL(routeConfiguration(), listing));\n    },\n    onMouseOver: onOverListingLink,\n    onTouchStart: onOverListingLink,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AspectRatioWrapper, {\n    width: aspectWidth,\n    height: aspectHeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ResponsiveImage, {\n    rootClassName: css.rootForImage,\n    alt: title,\n    image: firstImage,\n    variants: variants,\n    sizes: renderSizes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(css.menuOverlayWrapper, {\n      [css.menuOverlayOpen]: isMenuOpen\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(css.menuOverlay),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: css.menuOverlayContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"ManageListingCard.viewListing\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: css.menubarWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: css.menubarGradient,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: css.menubar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Menu, {\n    className: classNames(css.menu, {\n      [css.cardIsOpen]: !isClosed\n    }),\n    contentPlacementOffset: MENU_CONTENT_OFFSET,\n    contentPosition: \"left\",\n    useArrow: false,\n    onToggleActive: isOpen => {\n      const listingOpen = isOpen ? currentListing : null;\n      onToggleMenu(listingOpen);\n    },\n    isOpen: isMenuOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(MenuLabel, {\n    className: css.menuLabel,\n    isOpenClassName: css.listingMenuIsOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: css.iconWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(MenuIcon, {\n    className: css.menuIcon,\n    isActive: isMenuOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 19\n    }\n  }))), /*#__PURE__*/React.createElement(MenuContent, {\n    rootClassName: css.menuContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    key: \"close-listing\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(InlineTextButton, {\n    rootClassName: menuItemClasses,\n    onClick: event => {\n      event.preventDefault();\n      event.stopPropagation();\n\n      if (!actionsInProgressListingId) {\n        onToggleMenu(null);\n        onCloseListing(currentListing.id);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"ManageListingCard.closeListing\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 21\n    }\n  }))))))), isDraft ? /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames({\n      [css.draftNoImage]: !firstImage\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Overlay, {\n    message: intl.formatMessage({\n      id: 'ManageListingCard.draftOverlayText'\n    }, {\n      listingTitle: title\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(NamedLink, {\n    className: css.finishListingDraftLink,\n    name: \"EditListingPage\",\n    params: {\n      id,\n      slug,\n      type: LISTING_PAGE_PARAM_TYPE_DRAFT,\n      tab: 'photos'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"ManageListingCard.finishListingDraft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 17\n    }\n  })))) : null, isClosed ? /*#__PURE__*/React.createElement(Overlay, {\n    message: intl.formatMessage({\n      id: 'ManageListingCard.closedListing'\n    }, {\n      listingTitle: title\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: css.openListingButton,\n    disabled: !!actionsInProgressListingId,\n    onClick: event => {\n      event.preventDefault();\n      event.stopPropagation();\n\n      if (!actionsInProgressListingId) {\n        onOpenListing(currentListing.id);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"ManageListingCard.openListing\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 15\n    }\n  }))) : null, isPendingApproval ? /*#__PURE__*/React.createElement(Overlay, {\n    message: intl.formatMessage({\n      id: 'ManageListingCard.pendingApproval'\n    }, {\n      listingTitle: title\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 11\n    }\n  }) : null, showOutOfStockOverlay ? /*#__PURE__*/React.createElement(Overlay, {\n    message: intl.formatMessage({\n      id: 'ManageListingCard.outOfStockOverlayText'\n    }, {\n      listingTitle: title\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(NamedLink, {\n    className: css.finishListingDraftLink,\n    name: \"EditListingPage\",\n    params: {\n      id,\n      slug,\n      type: LISTING_PAGE_PARAM_TYPE_EDIT,\n      tab: 'pricing'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"ManageListingCard.setStock\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: css.closeListingTextLink,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 13\n    }\n  }, intl.formatMessage({\n    id: 'ManageListingCard.closeListingTextOr'\n  }, {\n    closeListingLink: /*#__PURE__*/React.createElement(InlineTextButton, {\n      key: \"closeListingLink\",\n      className: css.closeListingText,\n      disabled: !!actionsInProgressListingId,\n      onClick: () => {\n        if (!actionsInProgressListingId) {\n          onCloseListing(currentListing.id);\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"ManageListingCard.closeListingText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 23\n      }\n    }))\n  }))) : null, thisListingInProgress ? /*#__PURE__*/React.createElement(Overlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(IconSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 13\n    }\n  })) : hasError ? /*#__PURE__*/React.createElement(Overlay, {\n    errorMessage: intl.formatMessage({\n      id: 'ManageListingCard.actionFailed'\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 11\n    }\n  }) : null), /*#__PURE__*/React.createElement(\"div\", {\n    className: css.info,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: css.price,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 9\n    }\n  }, formattedPrice ? /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: css.priceValue,\n    title: priceTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 15\n    }\n  }, formattedPrice), config.listing.showUnitTypeTranslations ? /*#__PURE__*/React.createElement(\"div\", {\n    className: css.perUnit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: unitTranslationKey,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 19\n    }\n  })) : null) : /*#__PURE__*/React.createElement(\"div\", {\n    className: css.noPrice,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"ManageListingCard.priceNotSet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: css.mainInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: css.titleWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InlineTextButton, {\n    rootClassName: titleClasses,\n    onClick: event => {\n      event.preventDefault();\n      event.stopPropagation();\n      history.push(createListingURL(routeConfiguration(), listing));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 13\n    }\n  }, formatTitle(title, MAX_LENGTH_FOR_WORDS_IN_TITLE)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: css.manageLinks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(NamedLink, {\n    className: css.manageLink,\n    name: \"EditListingPage\",\n    params: {\n      id,\n      slug,\n      type: editListingLinkType,\n      tab: 'details'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"ManageListingCard.editListing\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    className: css.manageLinksSeparator,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 11\n    }\n  }, ' • '), /*#__PURE__*/React.createElement(NamedLink, {\n    className: css.manageLink,\n    name: \"EditListingPage\",\n    params: {\n      id,\n      slug,\n      type: editListingLinkType,\n      tab: 'pricing'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 11\n    }\n  }, isDraft || isPendingApproval ? intl.formatMessage({\n    id: 'ManageListingCard.setStock'\n  }) : intl.formatMessage({\n    id: 'ManageListingCard.manageStock'\n  }, {\n    currentStock\n  })))));\n};\n_c = ManageListingCardComponent;\nManageListingCardComponent.defaultProps = {\n  className: null,\n  rootClassName: null,\n  actionsInProgressListingId: null,\n  renderSizes: null\n};\nconst {\n  bool,\n  func,\n  shape,\n  string\n} = PropTypes;\nManageListingCardComponent.propTypes = {\n  className: string,\n  rootClassName: string,\n  hasClosingError: bool.isRequired,\n  hasOpeningError: bool.isRequired,\n  intl: intlShape.isRequired,\n  listing: propTypes.ownListing.isRequired,\n  isMenuOpen: bool.isRequired,\n  actionsInProgressListingId: shape({\n    uuid: string.isRequired\n  }),\n  onCloseListing: func.isRequired,\n  onOpenListing: func.isRequired,\n  onToggleMenu: func.isRequired,\n  // Responsive image sizes hint\n  renderSizes: string,\n  // from withRouter\n  history: shape({\n    push: func.isRequired\n  }).isRequired\n};\nexport default compose(withRouter, injectIntl)(ManageListingCardComponent);\n\nvar _c;\n\n$RefreshReg$(_c, \"ManageListingCardComponent\");","map":{"version":3,"sources":["/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/containers/ManageListingsPage/ManageListingCard/ManageListingCard.js"],"names":["React","PropTypes","compose","withRouter","classNames","config","routeConfiguration","FormattedMessage","intlShape","injectIntl","LINE_ITEM_NIGHT","LINE_ITEM_DAY","LISTING_STATE_PENDING_APPROVAL","LISTING_STATE_CLOSED","LISTING_STATE_DRAFT","propTypes","formatMoney","ensureOwnListing","LISTING_PAGE_PENDING_APPROVAL_VARIANT","LISTING_PAGE_DRAFT_VARIANT","LISTING_PAGE_PARAM_TYPE_DRAFT","LISTING_PAGE_PARAM_TYPE_EDIT","createSlug","createResourceLocatorString","findRouteByRouteName","AspectRatioWrapper","InlineTextButton","Menu","MenuLabel","MenuContent","MenuItem","NamedLink","IconSpinner","ResponsiveImage","MenuIcon","Overlay","css","MENU_CONTENT_OFFSET","MAX_LENGTH_FOR_WORDS_IN_TITLE","priceData","price","intl","currency","formattedPrice","priceTitle","formatMessage","id","createListingURL","routes","listing","uuid","slug","attributes","title","isPendingApproval","state","isDraft","variant","linkProps","name","params","formatTitle","maxLength","nonWhiteSpaceSequence","split","map","word","index","length","wordBreak","ManageListingCardComponent","props","className","rootClassName","hasClosingError","hasOpeningError","history","isMenuOpen","actionsInProgressListingId","onCloseListing","onOpenListing","onToggleMenu","renderSizes","classes","root","currentListing","isClosed","currentStock","quantity","isOutOfStock","showOutOfStockOverlay","firstImage","images","menuItemClasses","menuItem","menuItemDisabled","hasError","thisListingInProgress","onOverListingLink","component","Page","preload","titleClasses","titlePending","titleDraft","editListingLinkType","unitType","lineItemUnitType","isNightly","isDaily","unitTranslationKey","aspectWidth","aspectHeight","variantPrefix","variants","Object","keys","filter","k","startsWith","clickWrapper","event","preventDefault","stopPropagation","push","rootForImage","menuOverlayWrapper","menuOverlayOpen","menuOverlay","menuOverlayContent","menubarWrapper","menubarGradient","menubar","menu","cardIsOpen","isOpen","listingOpen","menuLabel","listingMenuIsOpen","iconWrapper","menuIcon","menuContent","draftNoImage","listingTitle","finishListingDraftLink","type","tab","openListingButton","closeListingTextLink","closeListingLink","closeListingText","info","priceValue","showUnitTypeTranslations","perUnit","noPrice","mainInfo","titleWrapper","manageLinks","manageLink","manageLinksSeparator","defaultProps","bool","func","shape","string","isRequired","ownListing"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport classNames from 'classnames';\n\nimport config from '../../../config';\nimport routeConfiguration from '../../../routing/routeConfiguration';\nimport { FormattedMessage, intlShape, injectIntl } from '../../../util/reactIntl';\nimport {\n  LINE_ITEM_NIGHT,\n  LINE_ITEM_DAY,\n  LISTING_STATE_PENDING_APPROVAL,\n  LISTING_STATE_CLOSED,\n  LISTING_STATE_DRAFT,\n  propTypes,\n} from '../../../util/types';\nimport { formatMoney } from '../../../util/currency';\nimport { ensureOwnListing } from '../../../util/data';\nimport {\n  LISTING_PAGE_PENDING_APPROVAL_VARIANT,\n  LISTING_PAGE_DRAFT_VARIANT,\n  LISTING_PAGE_PARAM_TYPE_DRAFT,\n  LISTING_PAGE_PARAM_TYPE_EDIT,\n  createSlug,\n} from '../../../util/urlHelpers';\nimport { createResourceLocatorString, findRouteByRouteName } from '../../../util/routes';\n\nimport {\n  AspectRatioWrapper,\n  InlineTextButton,\n  Menu,\n  MenuLabel,\n  MenuContent,\n  MenuItem,\n  NamedLink,\n  IconSpinner,\n  ResponsiveImage,\n} from '../../../components';\n\nimport MenuIcon from './MenuIcon';\nimport Overlay from './Overlay';\nimport css from './ManageListingCard.module.css';\n\n// Menu content needs the same padding\nconst MENU_CONTENT_OFFSET = -12;\nconst MAX_LENGTH_FOR_WORDS_IN_TITLE = 7;\n\nconst priceData = (price, intl) => {\n  if (price && price.currency === config.currency) {\n    const formattedPrice = formatMoney(intl, price);\n    return { formattedPrice, priceTitle: formattedPrice };\n  } else if (price) {\n    return {\n      formattedPrice: intl.formatMessage(\n        { id: 'ManageListingCard.unsupportedPrice' },\n        { currency: price.currency }\n      ),\n      priceTitle: intl.formatMessage(\n        { id: 'ManageListingCard.unsupportedPriceTitle' },\n        { currency: price.currency }\n      ),\n    };\n  }\n  return {};\n};\n\nconst createListingURL = (routes, listing) => {\n  const id = listing.id.uuid;\n  const slug = createSlug(listing.attributes.title);\n  const isPendingApproval = listing.attributes.state === LISTING_STATE_PENDING_APPROVAL;\n  const isDraft = listing.attributes.state === LISTING_STATE_DRAFT;\n  const variant = isDraft\n    ? LISTING_PAGE_DRAFT_VARIANT\n    : isPendingApproval\n    ? LISTING_PAGE_PENDING_APPROVAL_VARIANT\n    : null;\n\n  const linkProps =\n    isPendingApproval || isDraft\n      ? {\n          name: 'ListingPageVariant',\n          params: {\n            id,\n            slug,\n            variant,\n          },\n        }\n      : {\n          name: 'ListingPage',\n          params: { id, slug },\n        };\n\n  return createResourceLocatorString(linkProps.name, routes, linkProps.params, {});\n};\n\n// Cards are not fixed sizes - So, long words in title make flexboxed items to grow too big.\n// 1. We split title to an array of words and spaces.\n//    \"foo bar\".split(/([^\\s]+)/gi) => [\"\", \"foo\", \" \", \"bar\", \"\"]\n// 2. Then we break long words by adding a '<span>' with word-break: 'break-all';\nconst formatTitle = (title, maxLength) => {\n  const nonWhiteSpaceSequence = /([^\\s]+)/gi;\n  return title.split(nonWhiteSpaceSequence).map((word, index) => {\n    return word.length > maxLength ? (\n      <span key={index} style={{ wordBreak: 'break-all' }}>\n        {word}\n      </span>\n    ) : (\n      word\n    );\n  });\n};\n\nexport const ManageListingCardComponent = props => {\n  const {\n    className,\n    rootClassName,\n    hasClosingError,\n    hasOpeningError,\n    history,\n    intl,\n    isMenuOpen,\n    actionsInProgressListingId,\n    listing,\n    onCloseListing,\n    onOpenListing,\n    onToggleMenu,\n    renderSizes,\n  } = props;\n  const classes = classNames(rootClassName || css.root, className);\n  const currentListing = ensureOwnListing(listing);\n  const id = currentListing.id.uuid;\n  const { title = '', price, state } = currentListing.attributes;\n  const slug = createSlug(title);\n  const isPendingApproval = state === LISTING_STATE_PENDING_APPROVAL;\n  const isClosed = state === LISTING_STATE_CLOSED;\n  const isDraft = state === LISTING_STATE_DRAFT;\n\n  const currentStock = currentListing.currentStock?.attributes?.quantity;\n  const isOutOfStock = currentStock === 0;\n  const showOutOfStockOverlay = isOutOfStock && !isPendingApproval && !isClosed && !isDraft;\n\n  const firstImage =\n    currentListing.images && currentListing.images.length > 0 ? currentListing.images[0] : null;\n\n  const menuItemClasses = classNames(css.menuItem, {\n    [css.menuItemDisabled]: !!actionsInProgressListingId,\n  });\n\n  const { formattedPrice, priceTitle } = priceData(price, intl);\n\n  const hasError = hasOpeningError || hasClosingError;\n  const thisListingInProgress =\n    actionsInProgressListingId && actionsInProgressListingId.uuid === id;\n\n  const onOverListingLink = () => {\n    // Enforce preloading of ListingPage (loadable component)\n    const { component: Page } = findRouteByRouteName('ListingPage', routeConfiguration());\n    // Loadable Component has a \"preload\" function.\n    if (Page.preload) {\n      Page.preload();\n    }\n  };\n\n  const titleClasses = classNames(css.title, {\n    [css.titlePending]: isPendingApproval,\n    [css.titleDraft]: isDraft,\n  });\n\n  const editListingLinkType = isDraft\n    ? LISTING_PAGE_PARAM_TYPE_DRAFT\n    : LISTING_PAGE_PARAM_TYPE_EDIT;\n\n  const unitType = config.lineItemUnitType;\n  const isNightly = unitType === LINE_ITEM_NIGHT;\n  const isDaily = unitType === LINE_ITEM_DAY;\n\n  const unitTranslationKey = isNightly\n    ? 'ManageListingCard.perNight'\n    : isDaily\n    ? 'ManageListingCard.perDay'\n    : 'ManageListingCard.perUnit';\n\n  const { aspectWidth = 1, aspectHeight = 1, variantPrefix = 'listing-card' } = config.listing;\n  const variants = firstImage\n    ? Object.keys(firstImage?.attributes?.variants).filter(k => k.startsWith(variantPrefix))\n    : [];\n\n  return (\n    <div className={classes}>\n      <div\n        className={css.clickWrapper}\n        tabIndex={0}\n        onClick={event => {\n          event.preventDefault();\n          event.stopPropagation();\n\n          // ManageListingCard contains links, buttons and elements that are working with routing.\n          // This card doesn't work if <a> or <button> is used to wrap events that are card 'clicks'.\n          //\n          // NOTE: It might be better to absolute-position those buttons over a card-links.\n          // (So, that they have no parent-child relationship - like '<a>bla<a>blaa</a></a>')\n          history.push(createListingURL(routeConfiguration(), listing));\n        }}\n        onMouseOver={onOverListingLink}\n        onTouchStart={onOverListingLink}\n      >\n        <AspectRatioWrapper width={aspectWidth} height={aspectHeight}>\n          <ResponsiveImage\n            rootClassName={css.rootForImage}\n            alt={title}\n            image={firstImage}\n            variants={variants}\n            sizes={renderSizes}\n          />\n        </AspectRatioWrapper>\n        <div className={classNames(css.menuOverlayWrapper, { [css.menuOverlayOpen]: isMenuOpen })}>\n          <div className={classNames(css.menuOverlay)} />\n          <div className={css.menuOverlayContent}>\n            <FormattedMessage id=\"ManageListingCard.viewListing\" />\n          </div>\n        </div>\n        <div className={css.menubarWrapper}>\n          <div className={css.menubarGradient} />\n          <div className={css.menubar}>\n            <Menu\n              className={classNames(css.menu, { [css.cardIsOpen]: !isClosed })}\n              contentPlacementOffset={MENU_CONTENT_OFFSET}\n              contentPosition=\"left\"\n              useArrow={false}\n              onToggleActive={isOpen => {\n                const listingOpen = isOpen ? currentListing : null;\n                onToggleMenu(listingOpen);\n              }}\n              isOpen={isMenuOpen}\n            >\n              <MenuLabel className={css.menuLabel} isOpenClassName={css.listingMenuIsOpen}>\n                <div className={css.iconWrapper}>\n                  <MenuIcon className={css.menuIcon} isActive={isMenuOpen} />\n                </div>\n              </MenuLabel>\n              <MenuContent rootClassName={css.menuContent}>\n                <MenuItem key=\"close-listing\">\n                  <InlineTextButton\n                    rootClassName={menuItemClasses}\n                    onClick={event => {\n                      event.preventDefault();\n                      event.stopPropagation();\n                      if (!actionsInProgressListingId) {\n                        onToggleMenu(null);\n                        onCloseListing(currentListing.id);\n                      }\n                    }}\n                  >\n                    <FormattedMessage id=\"ManageListingCard.closeListing\" />\n                  </InlineTextButton>\n                </MenuItem>\n              </MenuContent>\n            </Menu>\n          </div>\n        </div>\n        {isDraft ? (\n          <React.Fragment>\n            <div className={classNames({ [css.draftNoImage]: !firstImage })} />\n            <Overlay\n              message={intl.formatMessage(\n                { id: 'ManageListingCard.draftOverlayText' },\n                { listingTitle: title }\n              )}\n            >\n              <NamedLink\n                className={css.finishListingDraftLink}\n                name=\"EditListingPage\"\n                params={{ id, slug, type: LISTING_PAGE_PARAM_TYPE_DRAFT, tab: 'photos' }}\n              >\n                <FormattedMessage id=\"ManageListingCard.finishListingDraft\" />\n              </NamedLink>\n            </Overlay>\n          </React.Fragment>\n        ) : null}\n        {isClosed ? (\n          <Overlay\n            message={intl.formatMessage(\n              { id: 'ManageListingCard.closedListing' },\n              { listingTitle: title }\n            )}\n          >\n            <button\n              className={css.openListingButton}\n              disabled={!!actionsInProgressListingId}\n              onClick={event => {\n                event.preventDefault();\n                event.stopPropagation();\n                if (!actionsInProgressListingId) {\n                  onOpenListing(currentListing.id);\n                }\n              }}\n            >\n              <FormattedMessage id=\"ManageListingCard.openListing\" />\n            </button>\n          </Overlay>\n        ) : null}\n        {isPendingApproval ? (\n          <Overlay\n            message={intl.formatMessage(\n              { id: 'ManageListingCard.pendingApproval' },\n              { listingTitle: title }\n            )}\n          />\n        ) : null}\n        {showOutOfStockOverlay ? (\n          <Overlay\n            message={intl.formatMessage(\n              { id: 'ManageListingCard.outOfStockOverlayText' },\n              { listingTitle: title }\n            )}\n          >\n            <NamedLink\n              className={css.finishListingDraftLink}\n              name=\"EditListingPage\"\n              params={{ id, slug, type: LISTING_PAGE_PARAM_TYPE_EDIT, tab: 'pricing' }}\n            >\n              <FormattedMessage id=\"ManageListingCard.setStock\" />\n            </NamedLink>\n\n            <div className={css.closeListingTextLink}>\n              {intl.formatMessage(\n                { id: 'ManageListingCard.closeListingTextOr' },\n                {\n                  closeListingLink: (\n                    <InlineTextButton\n                      key=\"closeListingLink\"\n                      className={css.closeListingText}\n                      disabled={!!actionsInProgressListingId}\n                      onClick={() => {\n                        if (!actionsInProgressListingId) {\n                          onCloseListing(currentListing.id);\n                        }\n                      }}\n                    >\n                      <FormattedMessage id=\"ManageListingCard.closeListingText\" />\n                    </InlineTextButton>\n                  ),\n                }\n              )}\n            </div>\n          </Overlay>\n        ) : null}\n        {thisListingInProgress ? (\n          <Overlay>\n            <IconSpinner />\n          </Overlay>\n        ) : hasError ? (\n          <Overlay errorMessage={intl.formatMessage({ id: 'ManageListingCard.actionFailed' })} />\n        ) : null}\n      </div>\n\n      <div className={css.info}>\n        <div className={css.price}>\n          {formattedPrice ? (\n            <React.Fragment>\n              <div className={css.priceValue} title={priceTitle}>\n                {formattedPrice}\n              </div>\n              {config.listing.showUnitTypeTranslations ? (\n                <div className={css.perUnit}>\n                  <FormattedMessage id={unitTranslationKey} />\n                </div>\n              ) : null}\n            </React.Fragment>\n          ) : (\n            <div className={css.noPrice}>\n              <FormattedMessage id=\"ManageListingCard.priceNotSet\" />\n            </div>\n          )}\n        </div>\n\n        <div className={css.mainInfo}>\n          <div className={css.titleWrapper}>\n            <InlineTextButton\n              rootClassName={titleClasses}\n              onClick={event => {\n                event.preventDefault();\n                event.stopPropagation();\n                history.push(createListingURL(routeConfiguration(), listing));\n              }}\n            >\n              {formatTitle(title, MAX_LENGTH_FOR_WORDS_IN_TITLE)}\n            </InlineTextButton>\n          </div>\n        </div>\n\n        <div className={css.manageLinks}>\n          <NamedLink\n            className={css.manageLink}\n            name=\"EditListingPage\"\n            params={{ id, slug, type: editListingLinkType, tab: 'details' }}\n          >\n            <FormattedMessage id=\"ManageListingCard.editListing\" />\n          </NamedLink>\n\n          <span className={css.manageLinksSeparator}>{' • '}</span>\n\n          <NamedLink\n            className={css.manageLink}\n            name=\"EditListingPage\"\n            params={{ id, slug, type: editListingLinkType, tab: 'pricing' }}\n          >\n            {isDraft || isPendingApproval\n              ? intl.formatMessage({ id: 'ManageListingCard.setStock' })\n              : intl.formatMessage({ id: 'ManageListingCard.manageStock' }, { currentStock })}\n          </NamedLink>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nManageListingCardComponent.defaultProps = {\n  className: null,\n  rootClassName: null,\n  actionsInProgressListingId: null,\n  renderSizes: null,\n};\n\nconst { bool, func, shape, string } = PropTypes;\n\nManageListingCardComponent.propTypes = {\n  className: string,\n  rootClassName: string,\n  hasClosingError: bool.isRequired,\n  hasOpeningError: bool.isRequired,\n  intl: intlShape.isRequired,\n  listing: propTypes.ownListing.isRequired,\n  isMenuOpen: bool.isRequired,\n  actionsInProgressListingId: shape({ uuid: string.isRequired }),\n  onCloseListing: func.isRequired,\n  onOpenListing: func.isRequired,\n  onToggleMenu: func.isRequired,\n\n  // Responsive image sizes hint\n  renderSizes: string,\n\n  // from withRouter\n  history: shape({\n    push: func.isRequired,\n  }).isRequired,\n};\n\nexport default compose(\n  withRouter,\n  injectIntl\n)(ManageListingCardComponent);\n"]},"metadata":{},"sourceType":"module"}