{"ast":null,"code":"var _jsxFileName = \"/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/containers/EmailVerificationPage/EmailVerificationPage.js\";\nimport React from 'react';\nimport { bool, func, shape, string } from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\nimport { propTypes } from '../../util/types';\nimport { parse } from '../../util/urlHelpers';\nimport { ensureCurrentUser } from '../../util/data';\nimport { verify } from '../../ducks/EmailVerification.duck';\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\nimport { Page, LayoutSingleColumn, LayoutWrapperTopbar, LayoutWrapperMain, LayoutWrapperFooter, Footer, NamedRedirect } from '../../components';\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\nimport EmailVerificationForm from './EmailVerificationForm/EmailVerificationForm';\nimport css from './EmailVerificationPage.module.css';\n/**\n  Parse verification token from URL\n\n  Returns stringified token, if the token is provided.\n\n  Returns `null` if verification token is not provided.\n\n  Please note that we need to explicitely stringify the token, because\n  the unwanted result of the `parse` method is that it automatically\n  parses the token to number.\n*/\n\nconst parseVerificationToken = search => {\n  const urlParams = parse(search);\n  const verificationToken = urlParams.t;\n\n  if (verificationToken) {\n    return `${verificationToken}`;\n  }\n\n  return null;\n};\n\nexport const EmailVerificationPageComponent = props => {\n  const {\n    currentUser,\n    intl,\n    scrollingDisabled,\n    submitVerification,\n    isVerified,\n    emailVerificationInProgress,\n    verificationError,\n    location\n  } = props;\n  const title = intl.formatMessage({\n    id: 'EmailVerificationPage.title'\n  });\n  const initialValues = {\n    verificationToken: parseVerificationToken(location ? location.search : null)\n  };\n  const user = ensureCurrentUser(currentUser); // The first attempt to verify email is done when the page is loaded\n  // If the verify API call is successfull and the user has verified email\n  // We can redirect user forward from email verification page.\n\n  if (isVerified && user && user.attributes.emailVerified) {\n    return /*#__PURE__*/React.createElement(NamedRedirect, {\n      name: \"LandingPage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Page, {\n    title: title,\n    scrollingDisabled: scrollingDisabled,\n    referrer: \"origin\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LayoutSingleColumn, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(LayoutWrapperTopbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TopbarContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(LayoutWrapperMain, {\n    className: css.layoutWrapperMain,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: css.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: css.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, user.id ? /*#__PURE__*/React.createElement(EmailVerificationForm, {\n    initialValues: initialValues,\n    onSubmit: submitVerification,\n    currentUser: user,\n    inProgress: emailVerificationInProgress,\n    verificationError: verificationError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }) : /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"EmailVerificationPage.loadingUserInformation\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  })))), /*#__PURE__*/React.createElement(LayoutWrapperFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }))));\n};\n_c = EmailVerificationPageComponent;\nEmailVerificationPageComponent.defaultProps = {\n  currentUser: null,\n  verificationError: null\n};\nEmailVerificationPageComponent.propTypes = {\n  currentUser: propTypes.currentUser,\n  scrollingDisabled: bool.isRequired,\n  submitVerification: func.isRequired,\n  isVerified: bool,\n  emailVerificationInProgress: bool.isRequired,\n  verificationError: propTypes.error,\n  // from withRouter\n  location: shape({\n    search: string\n  }).isRequired,\n  // from injectIntl\n  intl: intlShape.isRequired\n};\n\nconst mapStateToProps = state => {\n  const {\n    currentUser\n  } = state.user;\n  const {\n    isVerified,\n    verificationError,\n    verificationInProgress\n  } = state.EmailVerification;\n  return {\n    isVerified,\n    verificationError,\n    emailVerificationInProgress: verificationInProgress,\n    currentUser,\n    scrollingDisabled: isScrollingDisabled(state)\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  submitVerification: ({\n    verificationToken\n  }) => {\n    return dispatch(verify(verificationToken));\n  }\n}); // Note: it is important that the withRouter HOC is **outside** the\n// connect HOC, otherwise React Router won't rerender any Route\n// components since connect implements a shouldComponentUpdate\n// lifecycle hook.\n//\n// See: https://github.com/ReactTraining/react-router/issues/4671\n\n\nconst EmailVerificationPage = compose(withRouter, connect(mapStateToProps, mapDispatchToProps), injectIntl)(EmailVerificationPageComponent);\nexport default EmailVerificationPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmailVerificationPageComponent\");","map":{"version":3,"sources":["/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/containers/EmailVerificationPage/EmailVerificationPage.js"],"names":["React","bool","func","shape","string","compose","connect","withRouter","FormattedMessage","injectIntl","intlShape","propTypes","parse","ensureCurrentUser","verify","isScrollingDisabled","Page","LayoutSingleColumn","LayoutWrapperTopbar","LayoutWrapperMain","LayoutWrapperFooter","Footer","NamedRedirect","TopbarContainer","EmailVerificationForm","css","parseVerificationToken","search","urlParams","verificationToken","t","EmailVerificationPageComponent","props","currentUser","intl","scrollingDisabled","submitVerification","isVerified","emailVerificationInProgress","verificationError","location","title","formatMessage","id","initialValues","user","attributes","emailVerified","layoutWrapperMain","root","content","defaultProps","isRequired","error","mapStateToProps","state","verificationInProgress","EmailVerification","mapDispatchToProps","dispatch","EmailVerificationPage"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { bool, func, shape, string } from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\nimport { propTypes } from '../../util/types';\nimport { parse } from '../../util/urlHelpers';\nimport { ensureCurrentUser } from '../../util/data';\nimport { verify } from '../../ducks/EmailVerification.duck';\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\nimport {\n  Page,\n  LayoutSingleColumn,\n  LayoutWrapperTopbar,\n  LayoutWrapperMain,\n  LayoutWrapperFooter,\n  Footer,\n  NamedRedirect,\n} from '../../components';\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\n\nimport EmailVerificationForm from './EmailVerificationForm/EmailVerificationForm';\n\nimport css from './EmailVerificationPage.module.css';\n\n/**\n  Parse verification token from URL\n\n  Returns stringified token, if the token is provided.\n\n  Returns `null` if verification token is not provided.\n\n  Please note that we need to explicitely stringify the token, because\n  the unwanted result of the `parse` method is that it automatically\n  parses the token to number.\n*/\nconst parseVerificationToken = search => {\n  const urlParams = parse(search);\n  const verificationToken = urlParams.t;\n\n  if (verificationToken) {\n    return `${verificationToken}`;\n  }\n\n  return null;\n};\n\nexport const EmailVerificationPageComponent = props => {\n  const {\n    currentUser,\n    intl,\n    scrollingDisabled,\n    submitVerification,\n    isVerified,\n    emailVerificationInProgress,\n    verificationError,\n    location,\n  } = props;\n  const title = intl.formatMessage({\n    id: 'EmailVerificationPage.title',\n  });\n\n  const initialValues = {\n    verificationToken: parseVerificationToken(location ? location.search : null),\n  };\n  const user = ensureCurrentUser(currentUser);\n\n  // The first attempt to verify email is done when the page is loaded\n  // If the verify API call is successfull and the user has verified email\n  // We can redirect user forward from email verification page.\n  if (isVerified && user && user.attributes.emailVerified) {\n    return <NamedRedirect name=\"LandingPage\" />;\n  }\n\n  return (\n    <Page title={title} scrollingDisabled={scrollingDisabled} referrer=\"origin\">\n      <LayoutSingleColumn>\n        <LayoutWrapperTopbar>\n          <TopbarContainer />\n        </LayoutWrapperTopbar>\n        <LayoutWrapperMain className={css.layoutWrapperMain}>\n          <div className={css.root}>\n            <div className={css.content}>\n              {user.id ? (\n                <EmailVerificationForm\n                  initialValues={initialValues}\n                  onSubmit={submitVerification}\n                  currentUser={user}\n                  inProgress={emailVerificationInProgress}\n                  verificationError={verificationError}\n                />\n              ) : (\n                <FormattedMessage id=\"EmailVerificationPage.loadingUserInformation\" />\n              )}\n            </div>\n          </div>\n        </LayoutWrapperMain>\n        <LayoutWrapperFooter>\n          <Footer />\n        </LayoutWrapperFooter>\n      </LayoutSingleColumn>\n    </Page>\n  );\n};\n\nEmailVerificationPageComponent.defaultProps = {\n  currentUser: null,\n  verificationError: null,\n};\n\nEmailVerificationPageComponent.propTypes = {\n  currentUser: propTypes.currentUser,\n  scrollingDisabled: bool.isRequired,\n  submitVerification: func.isRequired,\n  isVerified: bool,\n  emailVerificationInProgress: bool.isRequired,\n  verificationError: propTypes.error,\n\n  // from withRouter\n  location: shape({\n    search: string,\n  }).isRequired,\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst mapStateToProps = state => {\n  const { currentUser } = state.user;\n  const { isVerified, verificationError, verificationInProgress } = state.EmailVerification;\n  return {\n    isVerified,\n    verificationError,\n    emailVerificationInProgress: verificationInProgress,\n    currentUser,\n    scrollingDisabled: isScrollingDisabled(state),\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  submitVerification: ({ verificationToken }) => {\n    return dispatch(verify(verificationToken));\n  },\n});\n\n// Note: it is important that the withRouter HOC is **outside** the\n// connect HOC, otherwise React Router won't rerender any Route\n// components since connect implements a shouldComponentUpdate\n// lifecycle hook.\n//\n// See: https://github.com/ReactTraining/react-router/issues/4671\nconst EmailVerificationPage = compose(\n  withRouter,\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  ),\n  injectIntl\n)(EmailVerificationPageComponent);\n\nexport default EmailVerificationPage;\n"]},"metadata":{},"sourceType":"module"}