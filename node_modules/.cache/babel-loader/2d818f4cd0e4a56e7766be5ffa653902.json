{"ast":null,"code":"import pick from 'lodash/pick';\nimport { createStripeAccount, updateStripeAccount, fetchStripeAccount } from '../../ducks/stripeConnectAccount.duck';\nimport { fetchCurrentUser } from '../../ducks/user.duck'; // ================ Action types ================ //\n\nexport const SET_INITIAL_VALUES = 'app/StripePayoutPage/SET_INITIAL_VALUES';\nexport const SAVE_PAYOUT_DETAILS_REQUEST = 'app/StripePayoutPage/SAVE_PAYOUT_DETAILS_REQUEST';\nexport const SAVE_PAYOUT_DETAILS_SUCCESS = 'app/StripePayoutPage/SAVE_PAYOUT_DETAILS_SUCCESS';\nexport const SAVE_PAYOUT_DETAILS_ERROR = 'app/StripePayoutPage/SAVE_PAYOUT_DETAILS_ERROR'; // ================ Reducer ================ //\n\nconst initialState = {\n  payoutDetailsSaveInProgress: false,\n  payoutDetailsSaved: false,\n  fromReturnURL: false\n};\nexport default function reducer(state = initialState, action = {}) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case SET_INITIAL_VALUES:\n      return { ...initialState,\n        ...payload\n      };\n\n    case SAVE_PAYOUT_DETAILS_REQUEST:\n      return { ...state,\n        payoutDetailsSaveInProgress: true\n      };\n\n    case SAVE_PAYOUT_DETAILS_ERROR:\n      return { ...state,\n        payoutDetailsSaveInProgress: false\n      };\n\n    case SAVE_PAYOUT_DETAILS_SUCCESS:\n      return { ...state,\n        payoutDetailsSaveInProgress: false,\n        payoutDetailsSaved: true\n      };\n\n    default:\n      return state;\n  }\n} // ================ Action creators ================ //\n\nexport const setInitialValues = initialValues => ({\n  type: SET_INITIAL_VALUES,\n  payload: pick(initialValues, Object.keys(initialState))\n});\nexport const savePayoutDetailsRequest = () => ({\n  type: SAVE_PAYOUT_DETAILS_REQUEST\n});\nexport const savePayoutDetailsError = () => ({\n  type: SAVE_PAYOUT_DETAILS_ERROR\n});\nexport const savePayoutDetailsSuccess = () => ({\n  type: SAVE_PAYOUT_DETAILS_SUCCESS\n}); // ================ Thunks ================ //\n\nexport const savePayoutDetails = (values, isUpdateCall) => (dispatch, getState, sdk) => {\n  const upsertThunk = isUpdateCall ? updateStripeAccount : createStripeAccount;\n  dispatch(savePayoutDetailsRequest());\n  return dispatch(upsertThunk(values, {\n    expand: true\n  })).then(response => {\n    dispatch(savePayoutDetailsSuccess());\n    return response;\n  }).catch(() => dispatch(savePayoutDetailsError()));\n};\nexport const loadData = () => (dispatch, getState, sdk) => {\n  // Clear state so that previously loaded data is not visible\n  // in case this page load fails.\n  dispatch(setInitialValues());\n  return dispatch(fetchCurrentUser()).then(response => {\n    const currentUser = getState().user.currentUser;\n\n    if (currentUser && currentUser.stripeAccount) {\n      dispatch(fetchStripeAccount());\n    }\n\n    return response;\n  });\n};","map":{"version":3,"sources":["/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/containers/StripePayoutPage/StripePayoutPage.duck.js"],"names":["pick","createStripeAccount","updateStripeAccount","fetchStripeAccount","fetchCurrentUser","SET_INITIAL_VALUES","SAVE_PAYOUT_DETAILS_REQUEST","SAVE_PAYOUT_DETAILS_SUCCESS","SAVE_PAYOUT_DETAILS_ERROR","initialState","payoutDetailsSaveInProgress","payoutDetailsSaved","fromReturnURL","reducer","state","action","type","payload","setInitialValues","initialValues","Object","keys","savePayoutDetailsRequest","savePayoutDetailsError","savePayoutDetailsSuccess","savePayoutDetails","values","isUpdateCall","dispatch","getState","sdk","upsertThunk","expand","then","response","catch","loadData","currentUser","user","stripeAccount"],"mappings":"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","sourcesContent":["import pick from 'lodash/pick';\nimport {\n  createStripeAccount,\n  updateStripeAccount,\n  fetchStripeAccount,\n} from '../../ducks/stripeConnectAccount.duck';\nimport { fetchCurrentUser } from '../../ducks/user.duck';\n\n// ================ Action types ================ //\n\nexport const SET_INITIAL_VALUES = 'app/StripePayoutPage/SET_INITIAL_VALUES';\nexport const SAVE_PAYOUT_DETAILS_REQUEST = 'app/StripePayoutPage/SAVE_PAYOUT_DETAILS_REQUEST';\nexport const SAVE_PAYOUT_DETAILS_SUCCESS = 'app/StripePayoutPage/SAVE_PAYOUT_DETAILS_SUCCESS';\nexport const SAVE_PAYOUT_DETAILS_ERROR = 'app/StripePayoutPage/SAVE_PAYOUT_DETAILS_ERROR';\n\n// ================ Reducer ================ //\n\nconst initialState = {\n  payoutDetailsSaveInProgress: false,\n  payoutDetailsSaved: false,\n  fromReturnURL: false,\n};\n\nexport default function reducer(state = initialState, action = {}) {\n  const { type, payload } = action;\n  switch (type) {\n    case SET_INITIAL_VALUES:\n      return { ...initialState, ...payload };\n\n    case SAVE_PAYOUT_DETAILS_REQUEST:\n      return { ...state, payoutDetailsSaveInProgress: true };\n    case SAVE_PAYOUT_DETAILS_ERROR:\n      return { ...state, payoutDetailsSaveInProgress: false };\n    case SAVE_PAYOUT_DETAILS_SUCCESS:\n      return { ...state, payoutDetailsSaveInProgress: false, payoutDetailsSaved: true };\n\n    default:\n      return state;\n  }\n}\n\n// ================ Action creators ================ //\n\nexport const setInitialValues = initialValues => ({\n  type: SET_INITIAL_VALUES,\n  payload: pick(initialValues, Object.keys(initialState)),\n});\n\nexport const savePayoutDetailsRequest = () => ({\n  type: SAVE_PAYOUT_DETAILS_REQUEST,\n});\nexport const savePayoutDetailsError = () => ({\n  type: SAVE_PAYOUT_DETAILS_ERROR,\n});\nexport const savePayoutDetailsSuccess = () => ({\n  type: SAVE_PAYOUT_DETAILS_SUCCESS,\n});\n\n// ================ Thunks ================ //\n\nexport const savePayoutDetails = (values, isUpdateCall) => (dispatch, getState, sdk) => {\n  const upsertThunk = isUpdateCall ? updateStripeAccount : createStripeAccount;\n  dispatch(savePayoutDetailsRequest());\n\n  return dispatch(upsertThunk(values, { expand: true }))\n    .then(response => {\n      dispatch(savePayoutDetailsSuccess());\n      return response;\n    })\n    .catch(() => dispatch(savePayoutDetailsError()));\n};\n\nexport const loadData = () => (dispatch, getState, sdk) => {\n  // Clear state so that previously loaded data is not visible\n  // in case this page load fails.\n  dispatch(setInitialValues());\n\n  return dispatch(fetchCurrentUser()).then(response => {\n    const currentUser = getState().user.currentUser;\n    if (currentUser && currentUser.stripeAccount) {\n      dispatch(fetchStripeAccount());\n    }\n    return response;\n  });\n};\n"]},"metadata":{},"sourceType":"module"}