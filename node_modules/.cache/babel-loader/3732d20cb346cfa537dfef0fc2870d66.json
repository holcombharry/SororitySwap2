{"ast":null,"code":"var _jsxFileName = \"/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/components/ModalMissingInformation/ModalMissingInformation.js\";\nimport React, { Component } from 'react';\nimport { bool, func, string } from 'prop-types';\nimport { FormattedMessage } from '../../util/reactIntl';\nimport classNames from 'classnames';\nimport routeConfiguration from '../../routing/routeConfiguration';\nimport { ensureCurrentUser } from '../../util/data';\nimport { propTypes } from '../../util/types';\nimport { pathByRouteName } from '../../util/routes';\nimport { Modal } from '../../components';\nimport EmailReminder from './EmailReminder';\nimport StripeAccountReminder from './StripeAccountReminder';\nimport css from './ModalMissingInformation.module.css';\nconst MISSING_INFORMATION_MODAL_WHITELIST = ['LoginPage', 'SignupPage', 'ContactDetailsPage', 'EmailVerificationPage', 'PasswordResetPage', 'StripePayoutPage'];\nconst EMAIL_VERIFICATION = 'EMAIL_VERIFICATION';\nconst STRIPE_ACCOUNT = 'STRIPE_ACCOUNT';\n\nclass ModalMissingInformation extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showMissingInformationReminder: null,\n      hasSeenMissingInformationReminder: false\n    };\n    this.handleMissingInformationReminder = this.handleMissingInformationReminder.bind(this);\n  }\n\n  componentDidUpdate() {\n    const {\n      currentUser,\n      currentUserHasListings,\n      currentUserHasOrders,\n      location\n    } = this.props;\n    const user = ensureCurrentUser(currentUser);\n    this.handleMissingInformationReminder(user, currentUserHasListings, currentUserHasOrders, location);\n  }\n\n  handleMissingInformationReminder(currentUser, currentUserHasListings, currentUserHasOrders, newLocation) {\n    const routes = routeConfiguration();\n    const whitelistedPaths = MISSING_INFORMATION_MODAL_WHITELIST.map(page => pathByRouteName(page, routes)); // Is the current page whitelisted?\n\n    const isPageWhitelisted = whitelistedPaths.includes(newLocation.pathname); // Track if path changes inside Page level component\n\n    const pathChanged = newLocation.pathname !== this.props.location.pathname;\n    const notRemindedYet = !this.state.showMissingInformationReminder && !this.state.hasSeenMissingInformationReminder; // Is the reminder already shown on current page\n\n    const showOnPathChange = notRemindedYet || pathChanged;\n\n    if (!isPageWhitelisted && showOnPathChange) {\n      // Emails are sent when order is initiated\n      // Customer is likely to get email soon when she books something\n      // Provider email should work - she should get an email when someone books a listing\n      const hasOrders = currentUserHasOrders === true;\n      const hasListingsOrOrders = currentUserHasListings || hasOrders;\n      const emailUnverified = !!currentUser.id && !currentUser.attributes.emailVerified;\n      const emailVerificationNeeded = hasListingsOrOrders && emailUnverified;\n      const stripeAccountMissing = !!currentUser.id && !currentUser.attributes.stripeConnected;\n      const stripeAccountNeeded = currentUserHasListings && stripeAccountMissing; // Show reminder\n\n      if (emailVerificationNeeded) {\n        this.setState({\n          showMissingInformationReminder: EMAIL_VERIFICATION\n        });\n      } else if (stripeAccountNeeded) {\n        this.setState({\n          showMissingInformationReminder: STRIPE_ACCOUNT\n        });\n      }\n    }\n  }\n\n  render() {\n    const {\n      rootClassName,\n      className,\n      containerClassName,\n      currentUser,\n      sendVerificationEmailInProgress,\n      sendVerificationEmailError,\n      onManageDisableScrolling,\n      onResendVerificationEmail\n    } = this.props;\n    const user = ensureCurrentUser(currentUser);\n    const classes = classNames(rootClassName || css.root, className);\n    let content = null;\n    const currentUserLoaded = user && user.id;\n\n    if (currentUserLoaded) {\n      if (this.state.showMissingInformationReminder === EMAIL_VERIFICATION) {\n        content = /*#__PURE__*/React.createElement(EmailReminder, {\n          className: classes,\n          user: user,\n          onResendVerificationEmail: onResendVerificationEmail,\n          sendVerificationEmailInProgress: sendVerificationEmailInProgress,\n          sendVerificationEmailError: sendVerificationEmailError,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 11\n          }\n        });\n      } else if (this.state.showMissingInformationReminder === STRIPE_ACCOUNT) {\n        content = /*#__PURE__*/React.createElement(StripeAccountReminder, {\n          className: classes,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 19\n          }\n        });\n      }\n    }\n\n    const closeButtonMessage = /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"ModalMissingInformation.closeVerifyEmailReminder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 7\n      }\n    });\n    return /*#__PURE__*/React.createElement(Modal, {\n      id: \"MissingInformationReminder\",\n      containerClassName: containerClassName,\n      isOpen: !!this.state.showMissingInformationReminder,\n      onClose: () => {\n        this.setState({\n          showMissingInformationReminder: null,\n          hasSeenMissingInformationReminder: true\n        });\n      },\n      usePortal: true,\n      onManageDisableScrolling: onManageDisableScrolling,\n      closeButtonMessage: closeButtonMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }\n    }, content);\n  }\n\n}\n\nModalMissingInformation.defaultProps = {\n  className: null,\n  rootClassName: null,\n  currentUser: null\n};\nModalMissingInformation.propTypes = {\n  id: string.isRequired,\n  className: string,\n  rootClassName: string,\n  containerClassName: string,\n  currentUser: propTypes.currentUser,\n  onManageDisableScrolling: func.isRequired,\n  sendVerificationEmailError: propTypes.error,\n  sendVerificationEmailInProgress: bool.isRequired\n};\nModalMissingInformation.displayName = 'ModalMissingInformation';\nexport default ModalMissingInformation;","map":{"version":3,"sources":["/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/components/ModalMissingInformation/ModalMissingInformation.js"],"names":["React","Component","bool","func","string","FormattedMessage","classNames","routeConfiguration","ensureCurrentUser","propTypes","pathByRouteName","Modal","EmailReminder","StripeAccountReminder","css","MISSING_INFORMATION_MODAL_WHITELIST","EMAIL_VERIFICATION","STRIPE_ACCOUNT","ModalMissingInformation","constructor","props","state","showMissingInformationReminder","hasSeenMissingInformationReminder","handleMissingInformationReminder","bind","componentDidUpdate","currentUser","currentUserHasListings","currentUserHasOrders","location","user","newLocation","routes","whitelistedPaths","map","page","isPageWhitelisted","includes","pathname","pathChanged","notRemindedYet","showOnPathChange","hasOrders","hasListingsOrOrders","emailUnverified","id","attributes","emailVerified","emailVerificationNeeded","stripeAccountMissing","stripeConnected","stripeAccountNeeded","setState","render","rootClassName","className","containerClassName","sendVerificationEmailInProgress","sendVerificationEmailError","onManageDisableScrolling","onResendVerificationEmail","classes","root","content","currentUserLoaded","closeButtonMessage","defaultProps","isRequired","error","displayName"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { bool, func, string } from 'prop-types';\nimport { FormattedMessage } from '../../util/reactIntl';\nimport classNames from 'classnames';\nimport routeConfiguration from '../../routing/routeConfiguration';\nimport { ensureCurrentUser } from '../../util/data';\nimport { propTypes } from '../../util/types';\nimport { pathByRouteName } from '../../util/routes';\nimport { Modal } from '../../components';\n\nimport EmailReminder from './EmailReminder';\nimport StripeAccountReminder from './StripeAccountReminder';\nimport css from './ModalMissingInformation.module.css';\n\nconst MISSING_INFORMATION_MODAL_WHITELIST = [\n  'LoginPage',\n  'SignupPage',\n  'ContactDetailsPage',\n  'EmailVerificationPage',\n  'PasswordResetPage',\n  'StripePayoutPage',\n];\n\nconst EMAIL_VERIFICATION = 'EMAIL_VERIFICATION';\nconst STRIPE_ACCOUNT = 'STRIPE_ACCOUNT';\n\nclass ModalMissingInformation extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showMissingInformationReminder: null,\n      hasSeenMissingInformationReminder: false,\n    };\n    this.handleMissingInformationReminder = this.handleMissingInformationReminder.bind(this);\n  }\n\n  componentDidUpdate() {\n    const { currentUser, currentUserHasListings, currentUserHasOrders, location } = this.props;\n    const user = ensureCurrentUser(currentUser);\n    this.handleMissingInformationReminder(\n      user,\n      currentUserHasListings,\n      currentUserHasOrders,\n      location\n    );\n  }\n\n  handleMissingInformationReminder(\n    currentUser,\n    currentUserHasListings,\n    currentUserHasOrders,\n    newLocation\n  ) {\n    const routes = routeConfiguration();\n    const whitelistedPaths = MISSING_INFORMATION_MODAL_WHITELIST.map(page =>\n      pathByRouteName(page, routes)\n    );\n\n    // Is the current page whitelisted?\n    const isPageWhitelisted = whitelistedPaths.includes(newLocation.pathname);\n\n    // Track if path changes inside Page level component\n    const pathChanged = newLocation.pathname !== this.props.location.pathname;\n    const notRemindedYet =\n      !this.state.showMissingInformationReminder && !this.state.hasSeenMissingInformationReminder;\n\n    // Is the reminder already shown on current page\n    const showOnPathChange = notRemindedYet || pathChanged;\n\n    if (!isPageWhitelisted && showOnPathChange) {\n      // Emails are sent when order is initiated\n      // Customer is likely to get email soon when she books something\n      // Provider email should work - she should get an email when someone books a listing\n      const hasOrders = currentUserHasOrders === true;\n      const hasListingsOrOrders = currentUserHasListings || hasOrders;\n\n      const emailUnverified = !!currentUser.id && !currentUser.attributes.emailVerified;\n      const emailVerificationNeeded = hasListingsOrOrders && emailUnverified;\n\n      const stripeAccountMissing = !!currentUser.id && !currentUser.attributes.stripeConnected;\n      const stripeAccountNeeded = currentUserHasListings && stripeAccountMissing;\n\n      // Show reminder\n      if (emailVerificationNeeded) {\n        this.setState({ showMissingInformationReminder: EMAIL_VERIFICATION });\n      } else if (stripeAccountNeeded) {\n        this.setState({ showMissingInformationReminder: STRIPE_ACCOUNT });\n      }\n    }\n  }\n\n  render() {\n    const {\n      rootClassName,\n      className,\n      containerClassName,\n      currentUser,\n      sendVerificationEmailInProgress,\n      sendVerificationEmailError,\n      onManageDisableScrolling,\n      onResendVerificationEmail,\n    } = this.props;\n\n    const user = ensureCurrentUser(currentUser);\n    const classes = classNames(rootClassName || css.root, className);\n\n    let content = null;\n\n    const currentUserLoaded = user && user.id;\n    if (currentUserLoaded) {\n      if (this.state.showMissingInformationReminder === EMAIL_VERIFICATION) {\n        content = (\n          <EmailReminder\n            className={classes}\n            user={user}\n            onResendVerificationEmail={onResendVerificationEmail}\n            sendVerificationEmailInProgress={sendVerificationEmailInProgress}\n            sendVerificationEmailError={sendVerificationEmailError}\n          />\n        );\n      } else if (this.state.showMissingInformationReminder === STRIPE_ACCOUNT) {\n        content = <StripeAccountReminder className={classes} />;\n      }\n    }\n\n    const closeButtonMessage = (\n      <FormattedMessage id=\"ModalMissingInformation.closeVerifyEmailReminder\" />\n    );\n\n    return (\n      <Modal\n        id=\"MissingInformationReminder\"\n        containerClassName={containerClassName}\n        isOpen={!!this.state.showMissingInformationReminder}\n        onClose={() => {\n          this.setState({\n            showMissingInformationReminder: null,\n            hasSeenMissingInformationReminder: true,\n          });\n        }}\n        usePortal\n        onManageDisableScrolling={onManageDisableScrolling}\n        closeButtonMessage={closeButtonMessage}\n      >\n        {content}\n      </Modal>\n    );\n  }\n}\n\nModalMissingInformation.defaultProps = {\n  className: null,\n  rootClassName: null,\n  currentUser: null,\n};\n\nModalMissingInformation.propTypes = {\n  id: string.isRequired,\n  className: string,\n  rootClassName: string,\n  containerClassName: string,\n\n  currentUser: propTypes.currentUser,\n  onManageDisableScrolling: func.isRequired,\n  sendVerificationEmailError: propTypes.error,\n  sendVerificationEmailInProgress: bool.isRequired,\n};\n\nModalMissingInformation.displayName = 'ModalMissingInformation';\n\nexport default ModalMissingInformation;\n"]},"metadata":{},"sourceType":"module"}