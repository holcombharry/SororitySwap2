{"ast":null,"code":"var _jsxFileName = \"/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/components/ModalInMobile/ModalInMobile.js\";\n\n/**\n * ModalInMobile gives possibility separate part of existing DOM so that in mobile views that\n * fragment is shown in a separate modal layer on top of the page.\n *\n * Currently, this does not implement resize listener for window.\n *\n * Example:\n * <Parent>\n *   <ModalInMobile isModalOpenOnMobile={this.state.modalOpen} onClose={handleClose}>\n *     <FormX />\n *   </ModalInMobile>\n * </Parent>\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Modal } from '../../components';\nimport { withViewport } from '../../util/contextHelpers';\nimport css from './ModalInMobile.module.css';\n\nclass ModalInMobileComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n    this.handleClose = this.handleClose.bind(this);\n    this.changeOpenStatus = this.changeOpenStatus.bind(this);\n  }\n\n  componentDidMount() {\n    const {\n      isModalOpenOnMobile,\n      showAsModalMaxWidth,\n      viewport\n    } = this.props; // After Mounting, component can adapt to responsive screen size\n\n    const isMobileLayout = viewport.width <= showAsModalMaxWidth;\n\n    if (isMobileLayout && isModalOpenOnMobile) {\n      this.changeOpenStatus(isModalOpenOnMobile);\n    }\n  }\n\n  componentDidUpdate() {\n    const {\n      isModalOpenOnMobile,\n      showAsModalMaxWidth,\n      viewport\n    } = this.props;\n    const isChanging = isModalOpenOnMobile !== this.state.isOpen;\n    const isMobileLayout = viewport.width <= showAsModalMaxWidth;\n    const shouldBeClosedAsModal = !isMobileLayout && !isModalOpenOnMobile; // Handle change if status is changing on mobile layout or it is closing (on desktop layout)\n\n    if (isChanging && (isMobileLayout || shouldBeClosedAsModal)) {\n      this.changeOpenStatus(isModalOpenOnMobile);\n    }\n  }\n\n  changeOpenStatus(isOpen) {\n    this.setState({\n      isOpen\n    });\n  }\n\n  handleClose(event) {\n    const {\n      onClose\n    } = this.props;\n    this.changeOpenStatus(false);\n\n    if (onClose) {\n      onClose(event);\n    }\n  }\n\n  render() {\n    const {\n      children,\n      className,\n      containerClassName,\n      id,\n      showAsModalMaxWidth,\n      closeButtonMessage,\n      onManageDisableScrolling,\n      viewport\n    } = this.props;\n    const isMobileLayout = viewport.width <= showAsModalMaxWidth;\n    const isOpenInMobile = this.state.isOpen;\n    const isClosedInMobile = isMobileLayout && !isOpenInMobile;\n    const isOpen = isOpenInMobile && isMobileLayout; // We have 3 view states:\n    // - default desktop layout (just an extra wrapper)\n    // - mobile layout: content visible inside modal popup\n    // - mobile layout: content hidden\n\n    const closedClassName = isClosedInMobile ? css.modalHidden : null;\n    const classes = classNames({\n      [css.modalInMobile]: isOpenInMobile\n    }, css.root, className);\n    return /*#__PURE__*/React.createElement(Modal, {\n      className: classes,\n      containerClassName: containerClassName || css.modalContainer,\n      contentClassName: css.modalContent,\n      id: id,\n      isOpen: isOpen,\n      isClosedClassName: closedClassName,\n      onClose: this.handleClose,\n      closeButtonMessage: closeButtonMessage,\n      onManageDisableScrolling: onManageDisableScrolling,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }\n    }, children);\n  }\n\n}\n\nModalInMobileComponent.defaultProps = {\n  children: null,\n  className: '',\n  containerClassName: null,\n  onClose: null,\n  showAsModalMaxWidth: 0,\n  closeButtonMessage: null\n};\nconst {\n  bool,\n  func,\n  node,\n  number,\n  string,\n  shape\n} = PropTypes;\nModalInMobileComponent.propTypes = {\n  children: node,\n  className: string,\n  containerClassName: string,\n  id: string.isRequired,\n  isModalOpenOnMobile: bool.isRequired,\n  onClose: func,\n  showAsModalMaxWidth: number,\n  closeButtonMessage: node,\n  // eslint-disable-next-line react/no-unused-prop-types\n  onManageDisableScrolling: func.isRequired,\n  // from withViewport\n  viewport: shape({\n    width: number.isRequired,\n    height: number.isRequired\n  }).isRequired\n};\nconst ModalInMobile = withViewport(ModalInMobileComponent);\n_c = ModalInMobile;\nexport default ModalInMobile;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalInMobile\");","map":{"version":3,"sources":["/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/components/ModalInMobile/ModalInMobile.js"],"names":["React","Component","PropTypes","classNames","Modal","withViewport","css","ModalInMobileComponent","constructor","props","state","isOpen","handleClose","bind","changeOpenStatus","componentDidMount","isModalOpenOnMobile","showAsModalMaxWidth","viewport","isMobileLayout","width","componentDidUpdate","isChanging","shouldBeClosedAsModal","setState","event","onClose","render","children","className","containerClassName","id","closeButtonMessage","onManageDisableScrolling","isOpenInMobile","isClosedInMobile","closedClassName","modalHidden","classes","modalInMobile","root","modalContainer","modalContent","defaultProps","bool","func","node","number","string","shape","propTypes","isRequired","height","ModalInMobile"],"mappings":"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","sourcesContent":["/**\n * ModalInMobile gives possibility separate part of existing DOM so that in mobile views that\n * fragment is shown in a separate modal layer on top of the page.\n *\n * Currently, this does not implement resize listener for window.\n *\n * Example:\n * <Parent>\n *   <ModalInMobile isModalOpenOnMobile={this.state.modalOpen} onClose={handleClose}>\n *     <FormX />\n *   </ModalInMobile>\n * </Parent>\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Modal } from '../../components';\nimport { withViewport } from '../../util/contextHelpers';\n\nimport css from './ModalInMobile.module.css';\n\nclass ModalInMobileComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false,\n    };\n    this.handleClose = this.handleClose.bind(this);\n    this.changeOpenStatus = this.changeOpenStatus.bind(this);\n  }\n\n  componentDidMount() {\n    const { isModalOpenOnMobile, showAsModalMaxWidth, viewport } = this.props;\n\n    // After Mounting, component can adapt to responsive screen size\n    const isMobileLayout = viewport.width <= showAsModalMaxWidth;\n\n    if (isMobileLayout && isModalOpenOnMobile) {\n      this.changeOpenStatus(isModalOpenOnMobile);\n    }\n  }\n\n  componentDidUpdate() {\n    const { isModalOpenOnMobile, showAsModalMaxWidth, viewport } = this.props;\n\n    const isChanging = isModalOpenOnMobile !== this.state.isOpen;\n    const isMobileLayout = viewport.width <= showAsModalMaxWidth;\n    const shouldBeClosedAsModal = !isMobileLayout && !isModalOpenOnMobile;\n\n    // Handle change if status is changing on mobile layout or it is closing (on desktop layout)\n    if (isChanging && (isMobileLayout || shouldBeClosedAsModal)) {\n      this.changeOpenStatus(isModalOpenOnMobile);\n    }\n  }\n\n  changeOpenStatus(isOpen) {\n    this.setState({ isOpen });\n  }\n\n  handleClose(event) {\n    const { onClose } = this.props;\n    this.changeOpenStatus(false);\n    if (onClose) {\n      onClose(event);\n    }\n  }\n\n  render() {\n    const {\n      children,\n      className,\n      containerClassName,\n      id,\n      showAsModalMaxWidth,\n      closeButtonMessage,\n      onManageDisableScrolling,\n      viewport,\n    } = this.props;\n\n    const isMobileLayout = viewport.width <= showAsModalMaxWidth;\n    const isOpenInMobile = this.state.isOpen;\n    const isClosedInMobile = isMobileLayout && !isOpenInMobile;\n    const isOpen = isOpenInMobile && isMobileLayout;\n\n    // We have 3 view states:\n    // - default desktop layout (just an extra wrapper)\n    // - mobile layout: content visible inside modal popup\n    // - mobile layout: content hidden\n    const closedClassName = isClosedInMobile ? css.modalHidden : null;\n    const classes = classNames({ [css.modalInMobile]: isOpenInMobile }, css.root, className);\n\n    return (\n      <Modal\n        className={classes}\n        containerClassName={containerClassName || css.modalContainer}\n        contentClassName={css.modalContent}\n        id={id}\n        isOpen={isOpen}\n        isClosedClassName={closedClassName}\n        onClose={this.handleClose}\n        closeButtonMessage={closeButtonMessage}\n        onManageDisableScrolling={onManageDisableScrolling}\n      >\n        {children}\n      </Modal>\n    );\n  }\n}\n\nModalInMobileComponent.defaultProps = {\n  children: null,\n  className: '',\n  containerClassName: null,\n  onClose: null,\n  showAsModalMaxWidth: 0,\n  closeButtonMessage: null,\n};\n\nconst { bool, func, node, number, string, shape } = PropTypes;\n\nModalInMobileComponent.propTypes = {\n  children: node,\n  className: string,\n  containerClassName: string,\n  id: string.isRequired,\n  isModalOpenOnMobile: bool.isRequired,\n  onClose: func,\n  showAsModalMaxWidth: number,\n  closeButtonMessage: node,\n  // eslint-disable-next-line react/no-unused-prop-types\n  onManageDisableScrolling: func.isRequired,\n\n  // from withViewport\n  viewport: shape({\n    width: number.isRequired,\n    height: number.isRequired,\n  }).isRequired,\n};\n\nconst ModalInMobile = withViewport(ModalInMobileComponent);\n\nexport default ModalInMobile;\n"]},"metadata":{},"sourceType":"module"}