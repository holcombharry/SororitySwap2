{"ast":null,"code":"var _jsxFileName = \"/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/components/StripeConnectAccountForm/StripeConnectAccountForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { bool, func, object, shape, string } from 'prop-types';\nimport { compose } from 'redux';\nimport { Form as FinalForm } from 'react-final-form';\nimport arrayMutators from 'final-form-arrays';\nimport classNames from 'classnames';\nimport config from '../../config';\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\nimport routeConfiguration from '../../routing/routeConfiguration';\nimport { createResourceLocatorString } from '../../util/routes';\nimport { isStripeError } from '../../util/errors';\nimport * as validators from '../../util/validators';\nimport { propTypes } from '../../util/types';\nimport { Button, ExternalLink, InlineTextButton, FieldSelect, FieldRadioButton, Form, StripeBankAccountTokenInputField } from '../../components';\nimport css from './StripeConnectAccountForm.module.css';\nconst supportedCountries = config.stripe.supportedCountries.map(c => c.code);\nexport const stripeCountryConfigs = countryCode => {\n  const country = config.stripe.supportedCountries.find(c => c.code === countryCode);\n\n  if (!country) {\n    throw new Error(`Country code not found in Stripe config ${countryCode}`);\n  }\n\n  return country;\n};\n\nconst countryCurrency = countryCode => {\n  const country = stripeCountryConfigs(countryCode);\n  return country.currency;\n};\n\nconst CreateStripeAccountFields = props => {\n  const {\n    disabled,\n    countryLabel,\n    showAsRequired,\n    form,\n    values,\n    intl,\n    currentUserId\n  } = props;\n  /*\n  We pass some default values to Stripe when creating a new Stripe account in order to reduce couple of steps from Connect Onboarding form.\n  - businessProfileURL: user's profile URL\n  - businessProfileMCC: default MCC code from stripe-config.js\n  - accountToken (https://stripe.com/docs/connect/account-tokens) with following information:\n    * accountType: individual or business\n    * tos_shown_and_accepted: true\n  Only country and bank account token are mandatory values. If you decide to remove the additional default values listed here, remember to update the `createStripeAccount` function in `ducks/stripeConnectAccount.duck.js`.\n  */\n\n  const individualAccountLabel = intl.formatMessage({\n    id: 'StripeConnectAccountForm.individualAccount'\n  });\n  const companyAccountLabel = intl.formatMessage({\n    id: 'StripeConnectAccountForm.companyAccount'\n  });\n  const hasBusinessURL = values && values.businessProfileURL; // Use user profile page as business_url on this marketplace\n  // or just fake it if it's dev environment using Stripe test endpoints\n  // because Stripe will not allow passing a localhost URL\n\n  if (!hasBusinessURL && currentUserId) {\n    const pathToProfilePage = uuid => createResourceLocatorString('ProfilePage', routeConfiguration(), {\n      id: uuid\n    }, {});\n\n    const hasCanonicalRootUrl = config && config.canonicalRootURL;\n    const rootUrl = hasCanonicalRootUrl ? config.canonicalRootURL.replace(/\\/$/, '') : null;\n    const defaultBusinessURL = hasCanonicalRootUrl && !rootUrl.includes('localhost') ? `${rootUrl}${pathToProfilePage(currentUserId.uuid)}` : `https://test-marketplace.com${pathToProfilePage(currentUserId.uuid)}`;\n    form.change('businessProfileURL', defaultBusinessURL);\n  }\n\n  const hasMCC = values && values.businessProfileMCC; // Use default merchant category code (MCC) from stripe-config.js\n\n  if (!hasMCC && config.stripe.defaultMCC) {\n    const defaultBusinessProfileMCC = config.stripe.defaultMCC;\n    form.change('businessProfileMCC', defaultBusinessProfileMCC);\n  }\n\n  const country = values.country;\n  const countryRequired = validators.required(intl.formatMessage({\n    id: 'StripeConnectAccountForm.countryRequired'\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: css.sectionContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: css.subTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"StripeConnectAccountForm.accountTypeTitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: css.radioButtonRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FieldRadioButton, {\n    id: \"individual\",\n    name: \"accountType\",\n    label: individualAccountLabel,\n    value: \"individual\",\n    showAsRequired: showAsRequired,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(FieldRadioButton, {\n    id: \"company\",\n    name: \"accountType\",\n    label: companyAccountLabel,\n    value: \"company\",\n    showAsRequired: showAsRequired,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(FieldSelect, {\n    id: \"country\",\n    name: \"country\",\n    disabled: disabled,\n    className: css.selectCountry,\n    autoComplete: \"country\",\n    label: countryLabel,\n    validate: countryRequired,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    disabled: true,\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, intl.formatMessage({\n    id: 'StripeConnectAccountForm.countryPlaceholder'\n  })), supportedCountries.map(c => /*#__PURE__*/React.createElement(\"option\", {\n    key: c,\n    value: c,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }\n  }, intl.formatMessage({\n    id: `StripeConnectAccountForm.countryNames.${c}`\n  })))), country ? /*#__PURE__*/React.createElement(StripeBankAccountTokenInputField, {\n    className: css.bankDetailsStripeField,\n    disabled: disabled,\n    name: \"bankAccountToken\",\n    formName: \"StripeConnectAccountForm\",\n    country: country,\n    currency: countryCurrency(country),\n    validate: validators.required(' '),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }) : null);\n};\n\n_c = CreateStripeAccountFields;\n\nconst UpdateStripeAccountFields = props => {\n  const {\n    disabled,\n    countryLabel,\n    savedCountry,\n    showCardUpdateInput,\n    submitInProgress,\n    setShowCardUpdateInput,\n    stripeBankAccountLastDigits\n  } = props;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: css.savedInformation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: css.accountInformationTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }, countryLabel), /*#__PURE__*/React.createElement(\"div\", {\n    className: css.savedCountry,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: `StripeConnectAccountForm.countryNames.${savedCountry}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"h3\", {\n    className: css.accountInformationTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"StripeConnectAccountForm.bankAccountLabel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }\n  })), showCardUpdateInput && savedCountry ? /*#__PURE__*/React.createElement(StripeBankAccountTokenInputField, {\n    className: css.bankDetailsStripeField,\n    disabled: disabled,\n    name: \"bankAccountToken\",\n    formName: \"StripeConnectAccountForm\",\n    country: savedCountry,\n    currency: countryCurrency(savedCountry),\n    validate: validators.required(' '),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }\n  }) : !submitInProgress ? /*#__PURE__*/React.createElement(InlineTextButton, {\n    className: css.savedBankAccount,\n    onClick: () => setShowCardUpdateInput(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }\n  }, \"\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022 \", stripeBankAccountLastDigits) : null);\n};\n\n_c2 = UpdateStripeAccountFields;\n\nconst ErrorsMaybe = props => {\n  const {\n    stripeAccountError,\n    stripeAccountLinkError\n  } = props;\n  const errorMessage = isStripeError(stripeAccountError) ? /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"StripeConnectAccountForm.createStripeAccountFailedWithStripeError\",\n    values: {\n      stripeMessage: stripeAccountError.apiErrors[0].meta.stripeMessage\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 5\n    }\n  }) : stripeAccountError ? /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"StripeConnectAccountForm.createStripeAccountFailed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 5\n    }\n  }) : isStripeError(stripeAccountLinkError) ? /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"StripeConnectAccountForm.createStripeAccountLinkFailedWithStripeError\",\n    values: {\n      stripeMessage: stripeAccountLinkError.apiErrors[0].meta.stripeMessage\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 5\n    }\n  }) : stripeAccountLinkError ? /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"StripeConnectAccountForm.createStripeAccountLinkFailed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 5\n    }\n  }) : null;\n  return errorMessage ? /*#__PURE__*/React.createElement(\"div\", {\n    className: css.error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 25\n    }\n  }, errorMessage) : null;\n};\n\n_c3 = ErrorsMaybe;\n\nconst StripeConnectAccountFormComponent = props => {\n  _s();\n\n  const [showCardUpdateInput, setShowCardUpdateInput] = useState(false);\n  const {\n    onSubmit,\n    ...restOfProps\n  } = props;\n  const isUpdate = props.stripeConnected;\n  return /*#__PURE__*/React.createElement(FinalForm, Object.assign({}, restOfProps, {\n    onSubmit: values => onSubmit(values, isUpdate),\n    mutators: { ...arrayMutators\n    },\n    render: fieldRenderProps => {\n      const {\n        className,\n        children,\n        stripeAccountError,\n        stripeAccountLinkError,\n        disabled,\n        handleSubmit,\n        inProgress,\n        intl,\n        invalid,\n        pristine,\n        ready,\n        savedCountry,\n        stripeAccountFetched,\n        stripeBankAccountLastDigits,\n        submitButtonText,\n        form,\n        values,\n        stripeConnected,\n        currentUser\n      } = fieldRenderProps;\n      const accountDataLoaded = stripeConnected && stripeAccountFetched && savedCountry;\n      const submitInProgress = inProgress;\n      const submitDisabled = pristine || invalid || disabled || submitInProgress;\n\n      const handleFormSubmit = event => {\n        // Close the bank account form when clicking \"save details\"\n        setShowCardUpdateInput(false);\n        handleSubmit(event);\n      };\n\n      const countryLabel = intl.formatMessage({\n        id: 'StripeConnectAccountForm.countryLabel'\n      });\n      const classes = classNames(css.root, className, {\n        [css.disabled]: disabled\n      });\n      const showAsRequired = pristine;\n      const currentUserId = currentUser ? currentUser.id : null; // If the user doesn't have Stripe connected account,\n      // show fields for country and bank account.\n      // Otherwise, show only possibility the edit bank account\n      // because Stripe doesn't allow user to change the country\n\n      const stripeAccountFields = !stripeConnected ? /*#__PURE__*/React.createElement(CreateStripeAccountFields, {\n        stripeConnected: stripeConnected,\n        disabled: disabled,\n        showAsRequired: showAsRequired,\n        countryLabel: countryLabel,\n        supportedCountries: supportedCountries,\n        currentUserId: currentUserId,\n        form: form,\n        values: values,\n        intl: intl,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }\n      }) : /*#__PURE__*/React.createElement(UpdateStripeAccountFields, {\n        disabled: disabled,\n        countryLabel: countryLabel,\n        savedCountry: savedCountry,\n        stripeBankAccountLastDigits: stripeBankAccountLastDigits,\n        showCardUpdateInput: showCardUpdateInput,\n        values: values,\n        submitInProgress: submitInProgress,\n        setShowCardUpdateInput: setShowCardUpdateInput,\n        intl: intl,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 11\n        }\n      });\n      const stripeConnectedAccountTermsLink = /*#__PURE__*/React.createElement(ExternalLink, {\n        href: \"https://stripe.com/connect-account/legal\",\n        className: css.termsLink,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"StripeConnectAccountForm.stripeConnectedAccountTermsLink\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 13\n        }\n      })); // Don't show the submit button while fetching the Stripe account data\n\n      const submitButtonMaybe = !stripeConnected || accountDataLoaded ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n        className: css.termsText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"StripeConnectAccountForm.stripeToSText\",\n        values: {\n          stripeConnectedAccountTermsLink\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        className: css.submitButton,\n        type: \"submit\",\n        inProgress: submitInProgress,\n        disabled: submitDisabled,\n        ready: ready,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 15\n        }\n      }, submitButtonText || /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"StripeConnectAccountForm.submitButtonText\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 19\n        }\n      }))) : null; // If the Stripe publishable key is not set up, don't show the form\n\n      return config.stripe.publishableKey ? /*#__PURE__*/React.createElement(Form, {\n        className: classes,\n        onSubmit: handleFormSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }\n      }, !stripeConnected || accountDataLoaded ? stripeAccountFields : /*#__PURE__*/React.createElement(\"div\", {\n        className: css.savedInformation,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"StripeConnectAccountForm.loadingStripeAccountData\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(ErrorsMaybe, {\n        stripeAccountError: stripeAccountError,\n        stripeAccountLinkError: stripeAccountLinkError,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 13\n        }\n      }), children, submitButtonMaybe) : /*#__PURE__*/React.createElement(\"div\", {\n        className: css.missingStripeKey,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"StripeConnectAccountForm.missingStripeKey\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 13\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 5\n    }\n  }));\n};\n\n_s(StripeConnectAccountFormComponent, \"yDCXk7u5+glQZhCQz3ZqsytxyLg=\");\n\n_c4 = StripeConnectAccountFormComponent;\nStripeConnectAccountFormComponent.defaultProps = {\n  className: null,\n  currentUser: null,\n  stripeAccountError: null,\n  disabled: false,\n  inProgress: false,\n  ready: false,\n  savedCountry: null,\n  stripeBankAccountLastDigits: null,\n  submitButtonText: null,\n  fieldRenderProps: null\n};\nStripeConnectAccountFormComponent.propTypes = {\n  currentUser: propTypes.currentUser,\n  className: string,\n  stripeAccountError: object,\n  disabled: bool,\n  inProgress: bool,\n  ready: bool,\n  savedCountry: string,\n  stripeBankAccountLastDigits: string,\n  stripeAccountFetched: bool.isRequired,\n  submitButtonText: string,\n  fieldRenderProps: shape({\n    handleSubmit: func,\n    invalid: bool,\n    pristine: bool,\n    values: object\n  }),\n  // from injectIntl\n  intl: intlShape.isRequired\n};\nconst StripeConnectAccountForm = compose(injectIntl)(StripeConnectAccountFormComponent);\nexport default StripeConnectAccountForm;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"CreateStripeAccountFields\");\n$RefreshReg$(_c2, \"UpdateStripeAccountFields\");\n$RefreshReg$(_c3, \"ErrorsMaybe\");\n$RefreshReg$(_c4, \"StripeConnectAccountFormComponent\");","map":{"version":3,"sources":["/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/components/StripeConnectAccountForm/StripeConnectAccountForm.js"],"names":["React","useState","bool","func","object","shape","string","compose","Form","FinalForm","arrayMutators","classNames","config","FormattedMessage","injectIntl","intlShape","routeConfiguration","createResourceLocatorString","isStripeError","validators","propTypes","Button","ExternalLink","InlineTextButton","FieldSelect","FieldRadioButton","StripeBankAccountTokenInputField","css","supportedCountries","stripe","map","c","code","stripeCountryConfigs","countryCode","country","find","Error","countryCurrency","currency","CreateStripeAccountFields","props","disabled","countryLabel","showAsRequired","form","values","intl","currentUserId","individualAccountLabel","formatMessage","id","companyAccountLabel","hasBusinessURL","businessProfileURL","pathToProfilePage","uuid","hasCanonicalRootUrl","canonicalRootURL","rootUrl","replace","defaultBusinessURL","includes","change","hasMCC","businessProfileMCC","defaultMCC","defaultBusinessProfileMCC","countryRequired","required","sectionContainer","subTitle","radioButtonRow","selectCountry","bankDetailsStripeField","UpdateStripeAccountFields","savedCountry","showCardUpdateInput","submitInProgress","setShowCardUpdateInput","stripeBankAccountLastDigits","savedInformation","accountInformationTitle","savedBankAccount","ErrorsMaybe","stripeAccountError","stripeAccountLinkError","errorMessage","stripeMessage","apiErrors","meta","error","StripeConnectAccountFormComponent","onSubmit","restOfProps","isUpdate","stripeConnected","fieldRenderProps","className","children","handleSubmit","inProgress","invalid","pristine","ready","stripeAccountFetched","submitButtonText","currentUser","accountDataLoaded","submitDisabled","handleFormSubmit","event","classes","root","stripeAccountFields","stripeConnectedAccountTermsLink","termsLink","submitButtonMaybe","termsText","submitButton","publishableKey","missingStripeKey","defaultProps","isRequired","StripeConnectAccountForm"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { bool, func, object, shape, string } from 'prop-types';\nimport { compose } from 'redux';\nimport { Form as FinalForm } from 'react-final-form';\nimport arrayMutators from 'final-form-arrays';\nimport classNames from 'classnames';\n\nimport config from '../../config';\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\nimport routeConfiguration from '../../routing/routeConfiguration';\nimport { createResourceLocatorString } from '../../util/routes';\nimport { isStripeError } from '../../util/errors';\nimport * as validators from '../../util/validators';\nimport { propTypes } from '../../util/types';\n\nimport {\n  Button,\n  ExternalLink,\n  InlineTextButton,\n  FieldSelect,\n  FieldRadioButton,\n  Form,\n  StripeBankAccountTokenInputField,\n} from '../../components';\n\nimport css from './StripeConnectAccountForm.module.css';\n\nconst supportedCountries = config.stripe.supportedCountries.map(c => c.code);\n\nexport const stripeCountryConfigs = countryCode => {\n  const country = config.stripe.supportedCountries.find(c => c.code === countryCode);\n\n  if (!country) {\n    throw new Error(`Country code not found in Stripe config ${countryCode}`);\n  }\n  return country;\n};\n\nconst countryCurrency = countryCode => {\n  const country = stripeCountryConfigs(countryCode);\n  return country.currency;\n};\n\nconst CreateStripeAccountFields = props => {\n  const { disabled, countryLabel, showAsRequired, form, values, intl, currentUserId } = props;\n\n  /*\n  We pass some default values to Stripe when creating a new Stripe account in order to reduce couple of steps from Connect Onboarding form.\n  - businessProfileURL: user's profile URL\n  - businessProfileMCC: default MCC code from stripe-config.js\n  - accountToken (https://stripe.com/docs/connect/account-tokens) with following information:\n    * accountType: individual or business\n    * tos_shown_and_accepted: true\n  Only country and bank account token are mandatory values. If you decide to remove the additional default values listed here, remember to update the `createStripeAccount` function in `ducks/stripeConnectAccount.duck.js`.\n  */\n\n  const individualAccountLabel = intl.formatMessage({\n    id: 'StripeConnectAccountForm.individualAccount',\n  });\n\n  const companyAccountLabel = intl.formatMessage({ id: 'StripeConnectAccountForm.companyAccount' });\n\n  const hasBusinessURL = values && values.businessProfileURL;\n  // Use user profile page as business_url on this marketplace\n  // or just fake it if it's dev environment using Stripe test endpoints\n  // because Stripe will not allow passing a localhost URL\n  if (!hasBusinessURL && currentUserId) {\n    const pathToProfilePage = uuid =>\n      createResourceLocatorString('ProfilePage', routeConfiguration(), { id: uuid }, {});\n    const hasCanonicalRootUrl = config && config.canonicalRootURL;\n    const rootUrl = hasCanonicalRootUrl ? config.canonicalRootURL.replace(/\\/$/, '') : null;\n    const defaultBusinessURL =\n      hasCanonicalRootUrl && !rootUrl.includes('localhost')\n        ? `${rootUrl}${pathToProfilePage(currentUserId.uuid)}`\n        : `https://test-marketplace.com${pathToProfilePage(currentUserId.uuid)}`;\n    form.change('businessProfileURL', defaultBusinessURL);\n  }\n\n  const hasMCC = values && values.businessProfileMCC;\n  // Use default merchant category code (MCC) from stripe-config.js\n  if (!hasMCC && config.stripe.defaultMCC) {\n    const defaultBusinessProfileMCC = config.stripe.defaultMCC;\n    form.change('businessProfileMCC', defaultBusinessProfileMCC);\n  }\n\n  const country = values.country;\n  const countryRequired = validators.required(\n    intl.formatMessage({\n      id: 'StripeConnectAccountForm.countryRequired',\n    })\n  );\n\n  return (\n    <div className={css.sectionContainer}>\n      <h3 className={css.subTitle}>\n        <FormattedMessage id=\"StripeConnectAccountForm.accountTypeTitle\" />\n      </h3>\n      <div className={css.radioButtonRow}>\n        <FieldRadioButton\n          id=\"individual\"\n          name=\"accountType\"\n          label={individualAccountLabel}\n          value=\"individual\"\n          showAsRequired={showAsRequired}\n        />\n        <FieldRadioButton\n          id=\"company\"\n          name=\"accountType\"\n          label={companyAccountLabel}\n          value=\"company\"\n          showAsRequired={showAsRequired}\n        />\n      </div>\n\n      <FieldSelect\n        id=\"country\"\n        name=\"country\"\n        disabled={disabled}\n        className={css.selectCountry}\n        autoComplete=\"country\"\n        label={countryLabel}\n        validate={countryRequired}\n      >\n        <option disabled value=\"\">\n          {intl.formatMessage({ id: 'StripeConnectAccountForm.countryPlaceholder' })}\n        </option>\n        {supportedCountries.map(c => (\n          <option key={c} value={c}>\n            {intl.formatMessage({ id: `StripeConnectAccountForm.countryNames.${c}` })}\n          </option>\n        ))}\n      </FieldSelect>\n\n      {country ? (\n        <StripeBankAccountTokenInputField\n          className={css.bankDetailsStripeField}\n          disabled={disabled}\n          name=\"bankAccountToken\"\n          formName=\"StripeConnectAccountForm\"\n          country={country}\n          currency={countryCurrency(country)}\n          validate={validators.required(' ')}\n        />\n      ) : null}\n    </div>\n  );\n};\n\nconst UpdateStripeAccountFields = props => {\n  const {\n    disabled,\n    countryLabel,\n    savedCountry,\n    showCardUpdateInput,\n    submitInProgress,\n    setShowCardUpdateInput,\n    stripeBankAccountLastDigits,\n  } = props;\n\n  return (\n    <div className={css.savedInformation}>\n      <h3 className={css.accountInformationTitle}>{countryLabel}</h3>\n      <div className={css.savedCountry}>\n        <FormattedMessage id={`StripeConnectAccountForm.countryNames.${savedCountry}`} />\n      </div>\n      <h3 className={css.accountInformationTitle}>\n        <FormattedMessage id=\"StripeConnectAccountForm.bankAccountLabel\" />\n      </h3>\n\n      {showCardUpdateInput && savedCountry ? (\n        <StripeBankAccountTokenInputField\n          className={css.bankDetailsStripeField}\n          disabled={disabled}\n          name=\"bankAccountToken\"\n          formName=\"StripeConnectAccountForm\"\n          country={savedCountry}\n          currency={countryCurrency(savedCountry)}\n          validate={validators.required(' ')}\n        />\n      ) : !submitInProgress ? (\n        <InlineTextButton\n          className={css.savedBankAccount}\n          onClick={() => setShowCardUpdateInput(true)}\n        >\n          •••••••••••••••••••••••• {stripeBankAccountLastDigits}\n        </InlineTextButton>\n      ) : null}\n    </div>\n  );\n};\n\nconst ErrorsMaybe = props => {\n  const { stripeAccountError, stripeAccountLinkError } = props;\n\n  const errorMessage = isStripeError(stripeAccountError) ? (\n    <FormattedMessage\n      id=\"StripeConnectAccountForm.createStripeAccountFailedWithStripeError\"\n      values={{ stripeMessage: stripeAccountError.apiErrors[0].meta.stripeMessage }}\n    />\n  ) : stripeAccountError ? (\n    <FormattedMessage id=\"StripeConnectAccountForm.createStripeAccountFailed\" />\n  ) : isStripeError(stripeAccountLinkError) ? (\n    <FormattedMessage\n      id=\"StripeConnectAccountForm.createStripeAccountLinkFailedWithStripeError\"\n      values={{ stripeMessage: stripeAccountLinkError.apiErrors[0].meta.stripeMessage }}\n    />\n  ) : stripeAccountLinkError ? (\n    <FormattedMessage id=\"StripeConnectAccountForm.createStripeAccountLinkFailed\" />\n  ) : null;\n\n  return errorMessage ? <div className={css.error}>{errorMessage}</div> : null;\n};\n\nconst StripeConnectAccountFormComponent = props => {\n  const [showCardUpdateInput, setShowCardUpdateInput] = useState(false);\n  const { onSubmit, ...restOfProps } = props;\n  const isUpdate = props.stripeConnected;\n\n  return (\n    <FinalForm\n      {...restOfProps}\n      onSubmit={values => onSubmit(values, isUpdate)}\n      mutators={{\n        ...arrayMutators,\n      }}\n      render={fieldRenderProps => {\n        const {\n          className,\n          children,\n          stripeAccountError,\n          stripeAccountLinkError,\n          disabled,\n          handleSubmit,\n          inProgress,\n          intl,\n          invalid,\n          pristine,\n          ready,\n          savedCountry,\n          stripeAccountFetched,\n          stripeBankAccountLastDigits,\n          submitButtonText,\n          form,\n          values,\n          stripeConnected,\n          currentUser,\n        } = fieldRenderProps;\n\n        const accountDataLoaded = stripeConnected && stripeAccountFetched && savedCountry;\n        const submitInProgress = inProgress;\n        const submitDisabled = pristine || invalid || disabled || submitInProgress;\n\n        const handleFormSubmit = event => {\n          // Close the bank account form when clicking \"save details\"\n          setShowCardUpdateInput(false);\n          handleSubmit(event);\n        };\n\n        const countryLabel = intl.formatMessage({ id: 'StripeConnectAccountForm.countryLabel' });\n        const classes = classNames(css.root, className, {\n          [css.disabled]: disabled,\n        });\n\n        const showAsRequired = pristine;\n\n        const currentUserId = currentUser ? currentUser.id : null;\n\n        // If the user doesn't have Stripe connected account,\n        // show fields for country and bank account.\n        // Otherwise, show only possibility the edit bank account\n        // because Stripe doesn't allow user to change the country\n        const stripeAccountFields = !stripeConnected ? (\n          <CreateStripeAccountFields\n            stripeConnected={stripeConnected}\n            disabled={disabled}\n            showAsRequired={showAsRequired}\n            countryLabel={countryLabel}\n            supportedCountries={supportedCountries}\n            currentUserId={currentUserId}\n            form={form}\n            values={values}\n            intl={intl}\n          />\n        ) : (\n          <UpdateStripeAccountFields\n            disabled={disabled}\n            countryLabel={countryLabel}\n            savedCountry={savedCountry}\n            stripeBankAccountLastDigits={stripeBankAccountLastDigits}\n            showCardUpdateInput={showCardUpdateInput}\n            values={values}\n            submitInProgress={submitInProgress}\n            setShowCardUpdateInput={setShowCardUpdateInput}\n            intl={intl}\n          />\n        );\n\n        const stripeConnectedAccountTermsLink = (\n          <ExternalLink href=\"https://stripe.com/connect-account/legal\" className={css.termsLink}>\n            <FormattedMessage id=\"StripeConnectAccountForm.stripeConnectedAccountTermsLink\" />\n          </ExternalLink>\n        );\n\n        // Don't show the submit button while fetching the Stripe account data\n        const submitButtonMaybe =\n          !stripeConnected || accountDataLoaded ? (\n            <>\n              <p className={css.termsText}>\n                <FormattedMessage\n                  id=\"StripeConnectAccountForm.stripeToSText\"\n                  values={{ stripeConnectedAccountTermsLink }}\n                />\n              </p>\n\n              <Button\n                className={css.submitButton}\n                type=\"submit\"\n                inProgress={submitInProgress}\n                disabled={submitDisabled}\n                ready={ready}\n              >\n                {submitButtonText || (\n                  <FormattedMessage id=\"StripeConnectAccountForm.submitButtonText\" />\n                )}\n              </Button>\n            </>\n          ) : null;\n\n        // If the Stripe publishable key is not set up, don't show the form\n        return config.stripe.publishableKey ? (\n          <Form className={classes} onSubmit={handleFormSubmit}>\n            {!stripeConnected || accountDataLoaded ? (\n              stripeAccountFields\n            ) : (\n              <div className={css.savedInformation}>\n                <FormattedMessage id=\"StripeConnectAccountForm.loadingStripeAccountData\" />\n              </div>\n            )}\n\n            <ErrorsMaybe\n              stripeAccountError={stripeAccountError}\n              stripeAccountLinkError={stripeAccountLinkError}\n            />\n\n            {children}\n\n            {submitButtonMaybe}\n          </Form>\n        ) : (\n          <div className={css.missingStripeKey}>\n            <FormattedMessage id=\"StripeConnectAccountForm.missingStripeKey\" />\n          </div>\n        );\n      }}\n    />\n  );\n};\n\nStripeConnectAccountFormComponent.defaultProps = {\n  className: null,\n  currentUser: null,\n  stripeAccountError: null,\n  disabled: false,\n  inProgress: false,\n  ready: false,\n  savedCountry: null,\n  stripeBankAccountLastDigits: null,\n  submitButtonText: null,\n  fieldRenderProps: null,\n};\n\nStripeConnectAccountFormComponent.propTypes = {\n  currentUser: propTypes.currentUser,\n  className: string,\n  stripeAccountError: object,\n  disabled: bool,\n  inProgress: bool,\n  ready: bool,\n  savedCountry: string,\n  stripeBankAccountLastDigits: string,\n  stripeAccountFetched: bool.isRequired,\n  submitButtonText: string,\n  fieldRenderProps: shape({\n    handleSubmit: func,\n    invalid: bool,\n    pristine: bool,\n    values: object,\n  }),\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst StripeConnectAccountForm = compose(injectIntl)(StripeConnectAccountFormComponent);\n\nexport default StripeConnectAccountForm;\n"]},"metadata":{},"sourceType":"module"}