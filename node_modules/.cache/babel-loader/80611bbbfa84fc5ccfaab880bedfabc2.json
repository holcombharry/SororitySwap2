{"ast":null,"code":"var _jsxFileName = \"/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/components/Modal/Modal.js\";\n\n/**\n * Modal creates popup which on mobile layout fills the entire visible page.\n *\n * Example:\n * <Parent>\n *   <Modal id=\"UniqueIdForThisModal\" isOpen={this.state.modalIsOpen} onClose={handleClose}>\n *     <FormX />\n *   </Modal>\n * </Parent>\n */\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { FormattedMessage, intlShape, injectIntl } from '../../util/reactIntl';\nimport { Button, IconClose } from '../../components';\nimport css from './Modal.module.css';\nconst KEY_CODE_ESCAPE = 27;\n\nclass Portal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.el = document.createElement('div');\n  }\n\n  componentDidMount() {\n    // The portal element is inserted in the DOM tree after\n    // the Modal's children are mounted, meaning that children\n    // will be mounted on a detached DOM node. If a child\n    // component requires to be attached to the DOM tree\n    // immediately when mounted, for example to measure a\n    // DOM node, or uses 'autoFocus' in a descendant, add\n    // state to Modal and only render the children when Modal\n    // is inserted in the DOM tree.\n    this.props.portalRoot.appendChild(this.el);\n  }\n\n  componentWillUnmount() {\n    this.props.portalRoot.removeChild(this.el);\n  }\n\n  render() {\n    return /*#__PURE__*/ReactDOM.createPortal(this.props.children, this.el);\n  }\n\n}\n\nexport class ModalComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.handleBodyKeyUp = this.handleBodyKeyUp.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.handleResize = this.handleResize.bind(this);\n    this.refDiv = /*#__PURE__*/React.createRef();\n    this.vh = null;\n    this.state = {\n      portalRoot: null\n    };\n  }\n\n  componentDidMount() {\n    const {\n      id,\n      isOpen,\n      onManageDisableScrolling\n    } = this.props;\n    onManageDisableScrolling(id, isOpen);\n    window.document.body.addEventListener('keyup', this.handleBodyKeyUp); // A hack to update container height for mobile Safari,\n    // when resizing happens due to scroll.\n    // css.isOpenInPortal has \"height: calc(var(--vh, 1vh) * 100)\"\n\n    this.vh = window.innerHeight * 0.01;\n    window.document.documentElement.style.setProperty('--vh', `${this.vh}px`);\n    window.addEventListener('resize', this.handleResize);\n    this.setState({\n      portalRoot: document.getElementById('portal-root')\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      id,\n      isOpen,\n      onManageDisableScrolling\n    } = prevProps;\n\n    if (this.props.isOpen !== isOpen) {\n      onManageDisableScrolling(id, this.props.isOpen); // Because we are using portal,\n      // we need to set the focus inside Modal manually\n\n      if (this.props.usePortal && this.props.isOpen) {\n        this.refDiv.current.focus();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    const {\n      id,\n      onManageDisableScrolling\n    } = this.props;\n    window.document.body.removeEventListener('keyup', this.handleBodyKeyUp);\n    window.document.body.removeEventListener('resize', this.handleResize);\n    onManageDisableScrolling(id, false);\n  }\n\n  handleBodyKeyUp(event) {\n    const {\n      isOpen\n    } = this.props;\n\n    if (event.keyCode === KEY_CODE_ESCAPE && isOpen) {\n      this.handleClose(event);\n    }\n  }\n\n  handleClose(event) {\n    const {\n      id,\n      onClose,\n      onManageDisableScrolling\n    } = this.props;\n    onManageDisableScrolling(id, false);\n    onClose(event);\n  }\n\n  handleResize() {\n    this.vh = window.innerHeight * 0.01;\n    window.document.documentElement.style.setProperty('--vh', `${this.vh}px`);\n  }\n\n  render() {\n    const {\n      children,\n      className,\n      scrollLayerClassName,\n      closeButtonMessage,\n      containerClassName,\n      contentClassName,\n      lightCloseButton,\n      intl,\n      isClosedClassName,\n      isOpen,\n      usePortal\n    } = this.props;\n    const closeModalMessage = intl.formatMessage({\n      id: 'Modal.closeModal'\n    });\n    const closeButtonClasses = classNames(css.close, {\n      [css.closeLight]: lightCloseButton\n    });\n    const closeBtn = isOpen ? /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleClose,\n      rootClassName: closeButtonClasses,\n      title: closeModalMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: css.closeText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }\n    }, closeButtonMessage || /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"Modal.close\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 34\n      }\n    })), /*#__PURE__*/React.createElement(IconClose, {\n      rootClassName: css.closeIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }\n    })) : null; // Modal uses given styles to wrap child components.\n    // If props doesn't contain isClosedClassName, styles default to css.isClosed\n    // This makes it possible to create ModalInMobile on top of Modal where style modes are:\n    // visible, hidden, or none (ModalInMobile's children are always visible on desktop layout.)\n\n    const isOpenClass = usePortal ? css.isOpenInPortal : css.isOpenInPlace;\n    const modalClass = isOpen ? isOpenClass : isClosedClassName;\n    const classes = classNames(modalClass, className);\n    const scrollLayerClasses = scrollLayerClassName || css.scrollLayer;\n    const containerClasses = containerClassName || css.container;\n    const portalRoot = this.state.portalRoot; // If you want to use Portal https://reactjs.org/docs/portals.html\n    // you need to use 'userPortal' flag.\n    // ModalInMobile component needs to use the old Modal without the portal\n    // because it's relying that the content is rendered inside\n    // the DOM hierarchy of the parent component unlike Modal inside Portal.\n\n    return !usePortal ? /*#__PURE__*/React.createElement(\"div\", {\n      className: classes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: scrollLayerClasses,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: containerClasses,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }\n    }, closeBtn, /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames(contentClassName || css.content),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }\n    }, children)))) : portalRoot ? /*#__PURE__*/React.createElement(Portal, {\n      portalRoot: portalRoot,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: scrollLayerClasses,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames(containerClasses, css.focusedDiv),\n      ref: this.refDiv,\n      tabIndex: \"-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }\n    }, closeBtn, /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames(contentClassName || css.content),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 15\n      }\n    }, children))))) : null;\n  }\n\n}\nModalComponent.defaultProps = {\n  children: null,\n  className: null,\n  scrollLayerClassName: null,\n  closeButtonMessage: null,\n  containerClassName: null,\n  contentClassName: null,\n  lightCloseButton: false,\n  isClosedClassName: css.isClosed,\n  isOpen: false,\n  onClose: null,\n  usePortal: false\n};\nconst {\n  bool,\n  func,\n  node,\n  string\n} = PropTypes;\nModalComponent.propTypes = {\n  children: node,\n  className: string,\n  scrollLayerClassName: string,\n  closeButtonMessage: node,\n  containerClassName: string,\n  contentClassName: string,\n  lightCloseButton: bool,\n  id: string.isRequired,\n  intl: intlShape.isRequired,\n  isClosedClassName: string,\n  isOpen: bool,\n  onClose: func.isRequired,\n  usePortal: bool,\n  // eslint-disable-next-line react/no-unused-prop-types\n  onManageDisableScrolling: func.isRequired\n};\nexport default _c = injectIntl(ModalComponent);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/components/Modal/Modal.js"],"names":["React","Component","ReactDOM","PropTypes","classNames","FormattedMessage","intlShape","injectIntl","Button","IconClose","css","KEY_CODE_ESCAPE","Portal","constructor","props","el","document","createElement","componentDidMount","portalRoot","appendChild","componentWillUnmount","removeChild","render","createPortal","children","ModalComponent","handleBodyKeyUp","bind","handleClose","handleResize","refDiv","createRef","vh","state","id","isOpen","onManageDisableScrolling","window","body","addEventListener","innerHeight","documentElement","style","setProperty","setState","getElementById","componentDidUpdate","prevProps","usePortal","current","focus","removeEventListener","event","keyCode","onClose","className","scrollLayerClassName","closeButtonMessage","containerClassName","contentClassName","lightCloseButton","intl","isClosedClassName","closeModalMessage","formatMessage","closeButtonClasses","close","closeLight","closeBtn","closeText","closeIcon","isOpenClass","isOpenInPortal","isOpenInPlace","modalClass","classes","scrollLayerClasses","scrollLayer","containerClasses","container","content","focusedDiv","defaultProps","isClosed","bool","func","node","string","propTypes","isRequired"],"mappings":"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","sourcesContent":["/**\n * Modal creates popup which on mobile layout fills the entire visible page.\n *\n * Example:\n * <Parent>\n *   <Modal id=\"UniqueIdForThisModal\" isOpen={this.state.modalIsOpen} onClose={handleClose}>\n *     <FormX />\n *   </Modal>\n * </Parent>\n */\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { FormattedMessage, intlShape, injectIntl } from '../../util/reactIntl';\nimport { Button, IconClose } from '../../components';\n\nimport css from './Modal.module.css';\n\nconst KEY_CODE_ESCAPE = 27;\n\nclass Portal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.el = document.createElement('div');\n  }\n\n  componentDidMount() {\n    // The portal element is inserted in the DOM tree after\n    // the Modal's children are mounted, meaning that children\n    // will be mounted on a detached DOM node. If a child\n    // component requires to be attached to the DOM tree\n    // immediately when mounted, for example to measure a\n    // DOM node, or uses 'autoFocus' in a descendant, add\n    // state to Modal and only render the children when Modal\n    // is inserted in the DOM tree.\n    this.props.portalRoot.appendChild(this.el);\n  }\n\n  componentWillUnmount() {\n    this.props.portalRoot.removeChild(this.el);\n  }\n\n  render() {\n    return ReactDOM.createPortal(this.props.children, this.el);\n  }\n}\n\nexport class ModalComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.handleBodyKeyUp = this.handleBodyKeyUp.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.handleResize = this.handleResize.bind(this);\n\n    this.refDiv = React.createRef();\n    this.vh = null;\n\n    this.state = {\n      portalRoot: null,\n    };\n  }\n\n  componentDidMount() {\n    const { id, isOpen, onManageDisableScrolling } = this.props;\n    onManageDisableScrolling(id, isOpen);\n    window.document.body.addEventListener('keyup', this.handleBodyKeyUp);\n\n    // A hack to update container height for mobile Safari,\n    // when resizing happens due to scroll.\n    // css.isOpenInPortal has \"height: calc(var(--vh, 1vh) * 100)\"\n    this.vh = window.innerHeight * 0.01;\n    window.document.documentElement.style.setProperty('--vh', `${this.vh}px`);\n    window.addEventListener('resize', this.handleResize);\n\n    this.setState({\n      portalRoot: document.getElementById('portal-root'),\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const { id, isOpen, onManageDisableScrolling } = prevProps;\n    if (this.props.isOpen !== isOpen) {\n      onManageDisableScrolling(id, this.props.isOpen);\n\n      // Because we are using portal,\n      // we need to set the focus inside Modal manually\n      if (this.props.usePortal && this.props.isOpen) {\n        this.refDiv.current.focus();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    const { id, onManageDisableScrolling } = this.props;\n    window.document.body.removeEventListener('keyup', this.handleBodyKeyUp);\n    window.document.body.removeEventListener('resize', this.handleResize);\n    onManageDisableScrolling(id, false);\n  }\n\n  handleBodyKeyUp(event) {\n    const { isOpen } = this.props;\n    if (event.keyCode === KEY_CODE_ESCAPE && isOpen) {\n      this.handleClose(event);\n    }\n  }\n\n  handleClose(event) {\n    const { id, onClose, onManageDisableScrolling } = this.props;\n    onManageDisableScrolling(id, false);\n    onClose(event);\n  }\n\n  handleResize() {\n    this.vh = window.innerHeight * 0.01;\n    window.document.documentElement.style.setProperty('--vh', `${this.vh}px`);\n  }\n\n  render() {\n    const {\n      children,\n      className,\n      scrollLayerClassName,\n      closeButtonMessage,\n      containerClassName,\n      contentClassName,\n      lightCloseButton,\n      intl,\n      isClosedClassName,\n      isOpen,\n      usePortal,\n    } = this.props;\n\n    const closeModalMessage = intl.formatMessage({ id: 'Modal.closeModal' });\n    const closeButtonClasses = classNames(css.close, {\n      [css.closeLight]: lightCloseButton,\n    });\n    const closeBtn = isOpen ? (\n      <Button\n        onClick={this.handleClose}\n        rootClassName={closeButtonClasses}\n        title={closeModalMessage}\n      >\n        <span className={css.closeText}>\n          {closeButtonMessage || <FormattedMessage id=\"Modal.close\" />}\n        </span>\n        <IconClose rootClassName={css.closeIcon} />\n      </Button>\n    ) : null;\n\n    // Modal uses given styles to wrap child components.\n    // If props doesn't contain isClosedClassName, styles default to css.isClosed\n    // This makes it possible to create ModalInMobile on top of Modal where style modes are:\n    // visible, hidden, or none (ModalInMobile's children are always visible on desktop layout.)\n    const isOpenClass = usePortal ? css.isOpenInPortal : css.isOpenInPlace;\n    const modalClass = isOpen ? isOpenClass : isClosedClassName;\n    const classes = classNames(modalClass, className);\n    const scrollLayerClasses = scrollLayerClassName || css.scrollLayer;\n    const containerClasses = containerClassName || css.container;\n    const portalRoot = this.state.portalRoot;\n\n    // If you want to use Portal https://reactjs.org/docs/portals.html\n    // you need to use 'userPortal' flag.\n    // ModalInMobile component needs to use the old Modal without the portal\n    // because it's relying that the content is rendered inside\n    // the DOM hierarchy of the parent component unlike Modal inside Portal.\n\n    return !usePortal ? (\n      <div className={classes}>\n        <div className={scrollLayerClasses}>\n          <div className={containerClasses}>\n            {closeBtn}\n            <div className={classNames(contentClassName || css.content)}>{children}</div>\n          </div>\n        </div>\n      </div>\n    ) : portalRoot ? (\n      <Portal portalRoot={portalRoot}>\n        <div className={classes}>\n          <div className={scrollLayerClasses}>\n            <div\n              className={classNames(containerClasses, css.focusedDiv)}\n              ref={this.refDiv}\n              tabIndex=\"-1\"\n            >\n              {closeBtn}\n              <div className={classNames(contentClassName || css.content)}>{children}</div>\n            </div>\n          </div>\n        </div>\n      </Portal>\n    ) : null;\n  }\n}\n\nModalComponent.defaultProps = {\n  children: null,\n  className: null,\n  scrollLayerClassName: null,\n  closeButtonMessage: null,\n  containerClassName: null,\n  contentClassName: null,\n  lightCloseButton: false,\n  isClosedClassName: css.isClosed,\n  isOpen: false,\n  onClose: null,\n  usePortal: false,\n};\n\nconst { bool, func, node, string } = PropTypes;\n\nModalComponent.propTypes = {\n  children: node,\n  className: string,\n  scrollLayerClassName: string,\n  closeButtonMessage: node,\n  containerClassName: string,\n  contentClassName: string,\n  lightCloseButton: bool,\n  id: string.isRequired,\n  intl: intlShape.isRequired,\n  isClosedClassName: string,\n  isOpen: bool,\n  onClose: func.isRequired,\n  usePortal: bool,\n\n  // eslint-disable-next-line react/no-unused-prop-types\n  onManageDisableScrolling: func.isRequired,\n};\n\nexport default injectIntl(ModalComponent);\n"]},"metadata":{},"sourceType":"module"}