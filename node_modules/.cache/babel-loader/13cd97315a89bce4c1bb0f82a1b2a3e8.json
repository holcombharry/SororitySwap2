{"ast":null,"code":"/**\n * ================ API error handling utilities ================\n *\n * This module exports helpers that can be used to check if API\n * response errors are some specific error cases.\n *\n * NOTE: most of the functions are tied to an endpoint, and should not\n * be used to check error responses from any other endpoint. Check the\n * name and the docstring of the function to ensure correct usage.\n */\nimport { ERROR_CODE_TRANSACTION_LISTING_NOT_FOUND, ERROR_CODE_TRANSACTION_INVALID_TRANSITION, ERROR_CODE_TRANSACTION_ALREADY_REVIEWED_BY_CUSTOMER, ERROR_CODE_TRANSACTION_ALREADY_REVIEWED_BY_PROVIDER, ERROR_CODE_PAYMENT_FAILED, ERROR_CODE_CHARGE_ZERO_PAYIN, ERROR_CODE_EMAIL_TAKEN, ERROR_CODE_EMAIL_NOT_FOUND, ERROR_CODE_TOO_MANY_VERIFICATION_REQUESTS, ERROR_CODE_UPLOAD_OVER_LIMIT, ERROR_CODE_MISSING_STRIPE_ACCOUNT, ERROR_CODE_TRANSACTION_BOOKING_TIME_NOT_AVAILABLE, ERROR_CODE_TRANSACTION_LISTING_INSUFFICIENT_STOCK, ERROR_CODE_STOCK_OLD_TOTAL_MISMATCH } from './types';\n\nconst errorAPIErrors = error => {\n  return error && error.apiErrors ? error.apiErrors : [];\n};\n\nconst hasErrorWithCode = (error, code) => {\n  return errorAPIErrors(error).some(apiError => {\n    return apiError.code === code;\n  });\n};\n/**\n * return apiErrors from error response\n */\n\n\nconst responseAPIErrors = error => {\n  return error && error.data && error.data.errors ? error.data.errors : [];\n};\n/**\n * Check if the given API error (from `sdk.currentuser.create()`) is\n * due to the email address already being in use.\n */\n\n\nexport const isSignupEmailTakenError = error => hasErrorWithCode(error, ERROR_CODE_EMAIL_TAKEN);\n/**\n * Check if the given API error (from `sdk.currentuser.changeEmail()`) is\n * due to the email address already being in use.\n */\n\nexport const isChangeEmailTakenError = error => hasErrorWithCode(error, ERROR_CODE_EMAIL_TAKEN);\n/**\n * Check if the given API error (from\n * `sdk.currentUser.sendVerificationEmail()`) is due to too many\n * active email verification requests.\n *\n * There qre only a specific amount of active verification requests\n * allowed, and the user has to wait for them to expire to be able to\n * request sending new verification emails.\n */\n\nexport const isTooManyEmailVerificationRequestsError = error => hasErrorWithCode(error, ERROR_CODE_TOO_MANY_VERIFICATION_REQUESTS);\n/**\n * Check if the given API error (from\n * `sdk.images.upload()`) is due to the image being over\n * the size limit.\n */\n\nexport const isUploadImageOverLimitError = error => hasErrorWithCode(error, ERROR_CODE_UPLOAD_OVER_LIMIT);\n/**\n * Check if the given API error (from\n * `sdk.stock.compareAndSet()`) is due to the oldTotal being wrong.\n */\n\nexport const isOldTotalMismatchStockError = error => hasErrorWithCode(error, ERROR_CODE_STOCK_OLD_TOTAL_MISMATCH);\n/**\n * Check if the given API error (from `sdk.passwordReset.request()`)\n * is due to no user having the given email address.\n */\n\nexport const isPasswordRecoveryEmailNotFoundError = error => hasErrorWithCode(error, ERROR_CODE_EMAIL_NOT_FOUND);\n/**\n * Check if the given API error (from `sdk.transaction.initiate()` or\n * `sdk.transaction.initiateSpeculative()`) is due to the listing\n * being closed or deleted.\n */\n\nexport const isTransactionInitiateListingNotFoundError = error => hasErrorWithCode(error, ERROR_CODE_TRANSACTION_LISTING_NOT_FOUND);\n/**\n * Check if the given API error (from `sdk.transaction.initiate()` or\n * `sdk.transaction.initiateSpeculative()`) is due to missign Stripe\n * connection from the listing author.\n */\n\nexport const isTransactionInitiateMissingStripeAccountError = error => hasErrorWithCode(error, ERROR_CODE_MISSING_STRIPE_ACCOUNT);\n/**\n * Check if the given API error (from `sdk.transaction.initiate()` or\n * `sdk.transaction.initiateSpeculative()`) is due to selected booking\n * time already being booked.\n */\n\nexport const isTransactionInitiateBookingTimeNotAvailableError = error => hasErrorWithCode(error, ERROR_CODE_TRANSACTION_BOOKING_TIME_NOT_AVAILABLE);\n/**\n * Check if the given API error (from `sdk.transaction.initiate()` or\n * `sdk.transaction.initiateSpeculative()`) is due to insufficient stock.\n */\n\nexport const isTransactionInitiateListingInsufficientStockError = error => hasErrorWithCode(error, ERROR_CODE_TRANSACTION_LISTING_INSUFFICIENT_STOCK);\n/**\n * Check if the given API error (from `sdk.transaction.initiate()` or\n * `sdk.transaction.initiateSpeculative()`) is due to payment being zero.\n */\n\nexport const isTransactionZeroPaymentError = error => hasErrorWithCode(error, ERROR_CODE_CHARGE_ZERO_PAYIN);\n/**\n * Check if the given API error (from `sdk.transaction.initiate()`) is\n * due to the transaction total amount being too low for Stripe.\n */\n\nexport const isTransactionInitiateAmountTooLowError = error => {\n  const isZeroPayment = isTransactionZeroPaymentError(error);\n  const tooLowAmount = errorAPIErrors(error).some(apiError => {\n    const isPaymentFailedError = apiError.status === 402 && apiError.code === ERROR_CODE_PAYMENT_FAILED;\n    let isAmountTooLow = false;\n\n    try {\n      // TODO: This is a temporary solution until a proper error code\n      // for this specific error is received in the response.\n      const msg = apiError.meta.stripeMessage;\n      isAmountTooLow = msg.startsWith('Amount must be at least') || msg.startsWith('Amount must convert to at least');\n    } catch (e) {// Ignore\n    }\n\n    return isPaymentFailedError && isAmountTooLow;\n  });\n  return isZeroPayment || tooLowAmount;\n};\n/**\n * Check if the given API error (from `sdk.transaction.initiate()`) is\n * due to the transaction charge creation disabled by Stripe.\n */\n\nexport const isTransactionChargeDisabledError = error => {\n  const chargeCreationDisabled = errorAPIErrors(error).some(apiError => {\n    const isPaymentFailedError = apiError.status === 402 && apiError.code === ERROR_CODE_PAYMENT_FAILED;\n    let isChargeCreationDisabled = false;\n\n    try {\n      const msg = apiError.meta.stripeMessage;\n      isChargeCreationDisabled = msg.startsWith('Your account cannot currently make charges.') || msg.match(/verification.disabled_reason/);\n    } catch (e) {// Ignore\n    }\n\n    return isPaymentFailedError && isChargeCreationDisabled;\n  });\n  return chargeCreationDisabled;\n};\n/**\n * Check if the given API error (from `sdk.transaction.initiate()`) is\n * due to other error in Stripe.\n */\n\nexport const transactionInitiateOrderStripeErrors = error => {\n  if (error) {\n    return errorAPIErrors(error).reduce((messages, apiError) => {\n      const isPaymentFailedError = apiError.status === 402 && apiError.code === ERROR_CODE_PAYMENT_FAILED;\n      const hasStripeError = apiError && apiError.meta && apiError.meta.stripeMessage;\n      const stripeMessageMaybe = isPaymentFailedError && hasStripeError ? [apiError.meta.stripeMessage] : [];\n      return [...messages, ...stripeMessageMaybe];\n    }, []);\n  }\n\n  return null;\n};\n/**\n * Check if the given API error (from `sdk.transactions.transition(id, transition, params)`)\n * is due to invalid transition attempt.\n */\n\nexport const isTransactionsTransitionInvalidTransition = error => error && error.status === 409 && hasErrorWithCode(error, ERROR_CODE_TRANSACTION_INVALID_TRANSITION);\n/**\n * Check if the given API error (from `sdk.transactions.transition(id, transition, params)`)\n * is due to already sent review.\n */\n\nexport const isTransactionsTransitionAlreadyReviewed = error => error && error.status === 409 && (hasErrorWithCode(error, ERROR_CODE_TRANSACTION_ALREADY_REVIEWED_BY_CUSTOMER) || hasErrorWithCode(error, ERROR_CODE_TRANSACTION_ALREADY_REVIEWED_BY_PROVIDER));\n/**\n * Check if the given API error (from `sdk.currentUser.changeEmail(params)`)\n * is due to giving wrong password.\n */\n\nexport const isChangeEmailWrongPassword = error => error && error.status === 403;\n/**\n * Check if the given API error (from `sdk.currentUser.changePassword(params)`)\n * is due to giving wrong password.\n */\n\nexport const isChangePasswordWrongPassword = error => error && error.status === 403;\n/**\n * Check if the given API error (from\n * 'sdk.stripeAccount.create(payoutDetails)') is due to\n * invalid postal code in the given country.\n */\n\nexport const isStripeInvalidPostalCode = error => {\n  const msgRe = /^Invalid [A-Z]{2} postal code$/;\n  return errorAPIErrors(error).some(apiError => {\n    // Stripe doesn't seem to give an error code for this specific\n    // case, so we have to recognize it from the message.\n    const msg = apiError.meta && apiError.meta.stripeMessage ? apiError.meta.stripeMessage : '';\n    return msgRe.test(msg);\n  });\n};\nexport const isStripeError = error => {\n  return errorAPIErrors(error).some(apiError => {\n    // Stripe doesn't seem to give an error code for this specific\n    // case, so we have to recognize it from the message.\n    return !!(apiError.meta && apiError.meta.stripeMessage);\n  });\n};\n/**\n * Check if the given transition error is\n * due to no quantity information in the transition params.\n */\n\nexport const isTransitionQuantityInfoMissingError = error => (error === null || error === void 0 ? void 0 : error.status) === 400 && (error === null || error === void 0 ? void 0 : error.statusText.startsWith('Error: transition should contain quantity information'));\nexport const storableError = err => {\n  const error = err || {};\n  const {\n    name,\n    message,\n    status,\n    statusText\n  } = error; // Status, statusText, and data.errors are (possibly) added to the error object by SDK\n\n  const apiErrors = responseAPIErrors(error); // Returned object is the same as prop type check in util/types -> error\n\n  return {\n    type: 'error',\n    name,\n    message,\n    status,\n    statusText,\n    apiErrors\n  };\n};\nexport const responseApiErrorInfo = err => responseAPIErrors(err).map(e => ({\n  status: e.status,\n  code: e.code,\n  meta: e.meta\n}));","map":{"version":3,"sources":["/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/util/errors.js"],"names":["ERROR_CODE_TRANSACTION_LISTING_NOT_FOUND","ERROR_CODE_TRANSACTION_INVALID_TRANSITION","ERROR_CODE_TRANSACTION_ALREADY_REVIEWED_BY_CUSTOMER","ERROR_CODE_TRANSACTION_ALREADY_REVIEWED_BY_PROVIDER","ERROR_CODE_PAYMENT_FAILED","ERROR_CODE_CHARGE_ZERO_PAYIN","ERROR_CODE_EMAIL_TAKEN","ERROR_CODE_EMAIL_NOT_FOUND","ERROR_CODE_TOO_MANY_VERIFICATION_REQUESTS","ERROR_CODE_UPLOAD_OVER_LIMIT","ERROR_CODE_MISSING_STRIPE_ACCOUNT","ERROR_CODE_TRANSACTION_BOOKING_TIME_NOT_AVAILABLE","ERROR_CODE_TRANSACTION_LISTING_INSUFFICIENT_STOCK","ERROR_CODE_STOCK_OLD_TOTAL_MISMATCH","errorAPIErrors","error","apiErrors","hasErrorWithCode","code","some","apiError","responseAPIErrors","data","errors","isSignupEmailTakenError","isChangeEmailTakenError","isTooManyEmailVerificationRequestsError","isUploadImageOverLimitError","isOldTotalMismatchStockError","isPasswordRecoveryEmailNotFoundError","isTransactionInitiateListingNotFoundError","isTransactionInitiateMissingStripeAccountError","isTransactionInitiateBookingTimeNotAvailableError","isTransactionInitiateListingInsufficientStockError","isTransactionZeroPaymentError","isTransactionInitiateAmountTooLowError","isZeroPayment","tooLowAmount","isPaymentFailedError","status","isAmountTooLow","msg","meta","stripeMessage","startsWith","e","isTransactionChargeDisabledError","chargeCreationDisabled","isChargeCreationDisabled","match","transactionInitiateOrderStripeErrors","reduce","messages","hasStripeError","stripeMessageMaybe","isTransactionsTransitionInvalidTransition","isTransactionsTransitionAlreadyReviewed","isChangeEmailWrongPassword","isChangePasswordWrongPassword","isStripeInvalidPostalCode","msgRe","test","isStripeError","isTransitionQuantityInfoMissingError","statusText","storableError","err","name","message","type","responseApiErrorInfo","map"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SACEA,wCADF,EAEEC,yCAFF,EAGEC,mDAHF,EAIEC,mDAJF,EAKEC,yBALF,EAMEC,4BANF,EAOEC,sBAPF,EAQEC,0BARF,EASEC,yCATF,EAUEC,4BAVF,EAWEC,iCAXF,EAYEC,iDAZF,EAaEC,iDAbF,EAcEC,mCAdF,QAeO,SAfP;;AAiBA,MAAMC,cAAc,GAAGC,KAAK,IAAI;AAC9B,SAAOA,KAAK,IAAIA,KAAK,CAACC,SAAf,GAA2BD,KAAK,CAACC,SAAjC,GAA6C,EAApD;AACD,CAFD;;AAIA,MAAMC,gBAAgB,GAAG,CAACF,KAAD,EAAQG,IAAR,KAAiB;AACxC,SAAOJ,cAAc,CAACC,KAAD,CAAd,CAAsBI,IAAtB,CAA2BC,QAAQ,IAAI;AAC5C,WAAOA,QAAQ,CAACF,IAAT,KAAkBA,IAAzB;AACD,GAFM,CAAP;AAGD,CAJD;AAMA;AACA;AACA;;;AACA,MAAMG,iBAAiB,GAAGN,KAAK,IAAI;AACjC,SAAOA,KAAK,IAAIA,KAAK,CAACO,IAAf,IAAuBP,KAAK,CAACO,IAAN,CAAWC,MAAlC,GAA2CR,KAAK,CAACO,IAAN,CAAWC,MAAtD,GAA+D,EAAtE;AACD,CAFD;AAIA;AACA;AACA;AACA;;;AACA,OAAO,MAAMC,uBAAuB,GAAGT,KAAK,IAAIE,gBAAgB,CAACF,KAAD,EAAQT,sBAAR,CAAzD;AAEP;AACA;AACA;AACA;;AACA,OAAO,MAAMmB,uBAAuB,GAAGV,KAAK,IAAIE,gBAAgB,CAACF,KAAD,EAAQT,sBAAR,CAAzD;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMoB,uCAAuC,GAAGX,KAAK,IAC1DE,gBAAgB,CAACF,KAAD,EAAQP,yCAAR,CADX;AAGP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMmB,2BAA2B,GAAGZ,KAAK,IAC9CE,gBAAgB,CAACF,KAAD,EAAQN,4BAAR,CADX;AAGP;AACA;AACA;AACA;;AACA,OAAO,MAAMmB,4BAA4B,GAAGb,KAAK,IAC/CE,gBAAgB,CAACF,KAAD,EAAQF,mCAAR,CADX;AAGP;AACA;AACA;AACA;;AACA,OAAO,MAAMgB,oCAAoC,GAAGd,KAAK,IACvDE,gBAAgB,CAACF,KAAD,EAAQR,0BAAR,CADX;AAGP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMuB,yCAAyC,GAAGf,KAAK,IAC5DE,gBAAgB,CAACF,KAAD,EAAQf,wCAAR,CADX;AAGP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAM+B,8CAA8C,GAAGhB,KAAK,IACjEE,gBAAgB,CAACF,KAAD,EAAQL,iCAAR,CADX;AAGP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMsB,iDAAiD,GAAGjB,KAAK,IACpEE,gBAAgB,CAACF,KAAD,EAAQJ,iDAAR,CADX;AAGP;AACA;AACA;AACA;;AACA,OAAO,MAAMsB,kDAAkD,GAAGlB,KAAK,IACrEE,gBAAgB,CAACF,KAAD,EAAQH,iDAAR,CADX;AAGP;AACA;AACA;AACA;;AACA,OAAO,MAAMsB,6BAA6B,GAAGnB,KAAK,IAChDE,gBAAgB,CAACF,KAAD,EAAQV,4BAAR,CADX;AAGP;AACA;AACA;AACA;;AACA,OAAO,MAAM8B,sCAAsC,GAAGpB,KAAK,IAAI;AAC7D,QAAMqB,aAAa,GAAGF,6BAA6B,CAACnB,KAAD,CAAnD;AAEA,QAAMsB,YAAY,GAAGvB,cAAc,CAACC,KAAD,CAAd,CAAsBI,IAAtB,CAA2BC,QAAQ,IAAI;AAC1D,UAAMkB,oBAAoB,GACxBlB,QAAQ,CAACmB,MAAT,KAAoB,GAApB,IAA2BnB,QAAQ,CAACF,IAAT,KAAkBd,yBAD/C;AAEA,QAAIoC,cAAc,GAAG,KAArB;;AAEA,QAAI;AACF;AACA;AACA,YAAMC,GAAG,GAAGrB,QAAQ,CAACsB,IAAT,CAAcC,aAA1B;AACAH,MAAAA,cAAc,GACZC,GAAG,CAACG,UAAJ,CAAe,yBAAf,KACAH,GAAG,CAACG,UAAJ,CAAe,iCAAf,CAFF;AAGD,KAPD,CAOE,OAAOC,CAAP,EAAU,CACV;AACD;;AAED,WAAOP,oBAAoB,IAAIE,cAA/B;AACD,GAjBoB,CAArB;AAmBA,SAAOJ,aAAa,IAAIC,YAAxB;AACD,CAvBM;AAyBP;AACA;AACA;AACA;;AACA,OAAO,MAAMS,gCAAgC,GAAG/B,KAAK,IAAI;AACvD,QAAMgC,sBAAsB,GAAGjC,cAAc,CAACC,KAAD,CAAd,CAAsBI,IAAtB,CAA2BC,QAAQ,IAAI;AACpE,UAAMkB,oBAAoB,GACxBlB,QAAQ,CAACmB,MAAT,KAAoB,GAApB,IAA2BnB,QAAQ,CAACF,IAAT,KAAkBd,yBAD/C;AAGA,QAAI4C,wBAAwB,GAAG,KAA/B;;AACA,QAAI;AACF,YAAMP,GAAG,GAAGrB,QAAQ,CAACsB,IAAT,CAAcC,aAA1B;AACAK,MAAAA,wBAAwB,GACtBP,GAAG,CAACG,UAAJ,CAAe,6CAAf,KACAH,GAAG,CAACQ,KAAJ,CAAU,8BAAV,CAFF;AAGD,KALD,CAKE,OAAOJ,CAAP,EAAU,CACV;AACD;;AAED,WAAOP,oBAAoB,IAAIU,wBAA/B;AACD,GAf8B,CAA/B;AAiBA,SAAOD,sBAAP;AACD,CAnBM;AAqBP;AACA;AACA;AACA;;AACA,OAAO,MAAMG,oCAAoC,GAAGnC,KAAK,IAAI;AAC3D,MAAIA,KAAJ,EAAW;AACT,WAAOD,cAAc,CAACC,KAAD,CAAd,CAAsBoC,MAAtB,CAA6B,CAACC,QAAD,EAAWhC,QAAX,KAAwB;AAC1D,YAAMkB,oBAAoB,GACxBlB,QAAQ,CAACmB,MAAT,KAAoB,GAApB,IAA2BnB,QAAQ,CAACF,IAAT,KAAkBd,yBAD/C;AAEA,YAAMiD,cAAc,GAAGjC,QAAQ,IAAIA,QAAQ,CAACsB,IAArB,IAA6BtB,QAAQ,CAACsB,IAAT,CAAcC,aAAlE;AACA,YAAMW,kBAAkB,GACtBhB,oBAAoB,IAAIe,cAAxB,GAAyC,CAACjC,QAAQ,CAACsB,IAAT,CAAcC,aAAf,CAAzC,GAAyE,EAD3E;AAEA,aAAO,CAAC,GAAGS,QAAJ,EAAc,GAAGE,kBAAjB,CAAP;AACD,KAPM,EAOJ,EAPI,CAAP;AAQD;;AACD,SAAO,IAAP;AACD,CAZM;AAcP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,yCAAyC,GAAGxC,KAAK,IAC5DA,KAAK,IACLA,KAAK,CAACwB,MAAN,KAAiB,GADjB,IAEAtB,gBAAgB,CAACF,KAAD,EAAQd,yCAAR,CAHX;AAKP;AACA;AACA;AACA;;AACA,OAAO,MAAMuD,uCAAuC,GAAGzC,KAAK,IAC1DA,KAAK,IACLA,KAAK,CAACwB,MAAN,KAAiB,GADjB,KAECtB,gBAAgB,CAACF,KAAD,EAAQb,mDAAR,CAAhB,IACCe,gBAAgB,CAACF,KAAD,EAAQZ,mDAAR,CAHlB,CADK;AAMP;AACA;AACA;AACA;;AACA,OAAO,MAAMsD,0BAA0B,GAAG1C,KAAK,IAAIA,KAAK,IAAIA,KAAK,CAACwB,MAAN,KAAiB,GAAtE;AAEP;AACA;AACA;AACA;;AACA,OAAO,MAAMmB,6BAA6B,GAAG3C,KAAK,IAAIA,KAAK,IAAIA,KAAK,CAACwB,MAAN,KAAiB,GAAzE;AAEP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMoB,yBAAyB,GAAG5C,KAAK,IAAI;AAChD,QAAM6C,KAAK,GAAG,gCAAd;AACA,SAAO9C,cAAc,CAACC,KAAD,CAAd,CAAsBI,IAAtB,CAA2BC,QAAQ,IAAI;AAC5C;AACA;AACA,UAAMqB,GAAG,GAAGrB,QAAQ,CAACsB,IAAT,IAAiBtB,QAAQ,CAACsB,IAAT,CAAcC,aAA/B,GAA+CvB,QAAQ,CAACsB,IAAT,CAAcC,aAA7D,GAA6E,EAAzF;AACA,WAAOiB,KAAK,CAACC,IAAN,CAAWpB,GAAX,CAAP;AACD,GALM,CAAP;AAMD,CARM;AAUP,OAAO,MAAMqB,aAAa,GAAG/C,KAAK,IAAI;AACpC,SAAOD,cAAc,CAACC,KAAD,CAAd,CAAsBI,IAAtB,CAA2BC,QAAQ,IAAI;AAC5C;AACA;AACA,WAAO,CAAC,EAAEA,QAAQ,CAACsB,IAAT,IAAiBtB,QAAQ,CAACsB,IAAT,CAAcC,aAAjC,CAAR;AACD,GAJM,CAAP;AAKD,CANM;AAQP;AACA;AACA;AACA;;AACA,OAAO,MAAMoB,oCAAoC,GAAGhD,KAAK,IACvD,CAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEwB,MAAP,MAAkB,GAAlB,KACAxB,KADA,aACAA,KADA,uBACAA,KAAK,CAAEiD,UAAP,CAAkBpB,UAAlB,CAA6B,uDAA7B,CADA,CADK;AAIP,OAAO,MAAMqB,aAAa,GAAGC,GAAG,IAAI;AAClC,QAAMnD,KAAK,GAAGmD,GAAG,IAAI,EAArB;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiB7B,IAAAA,MAAjB;AAAyByB,IAAAA;AAAzB,MAAwCjD,KAA9C,CAFkC,CAGlC;;AACA,QAAMC,SAAS,GAAGK,iBAAiB,CAACN,KAAD,CAAnC,CAJkC,CAMlC;;AACA,SAAO;AACLsD,IAAAA,IAAI,EAAE,OADD;AAELF,IAAAA,IAFK;AAGLC,IAAAA,OAHK;AAIL7B,IAAAA,MAJK;AAKLyB,IAAAA,UALK;AAMLhD,IAAAA;AANK,GAAP;AAQD,CAfM;AAiBP,OAAO,MAAMsD,oBAAoB,GAAGJ,GAAG,IACrC7C,iBAAiB,CAAC6C,GAAD,CAAjB,CAAuBK,GAAvB,CAA2B1B,CAAC,KAAK;AAC/BN,EAAAA,MAAM,EAAEM,CAAC,CAACN,MADqB;AAE/BrB,EAAAA,IAAI,EAAE2B,CAAC,CAAC3B,IAFuB;AAG/BwB,EAAAA,IAAI,EAAEG,CAAC,CAACH;AAHuB,CAAL,CAA5B,CADK","sourcesContent":["/**\n * ================ API error handling utilities ================\n *\n * This module exports helpers that can be used to check if API\n * response errors are some specific error cases.\n *\n * NOTE: most of the functions are tied to an endpoint, and should not\n * be used to check error responses from any other endpoint. Check the\n * name and the docstring of the function to ensure correct usage.\n */\n\nimport {\n  ERROR_CODE_TRANSACTION_LISTING_NOT_FOUND,\n  ERROR_CODE_TRANSACTION_INVALID_TRANSITION,\n  ERROR_CODE_TRANSACTION_ALREADY_REVIEWED_BY_CUSTOMER,\n  ERROR_CODE_TRANSACTION_ALREADY_REVIEWED_BY_PROVIDER,\n  ERROR_CODE_PAYMENT_FAILED,\n  ERROR_CODE_CHARGE_ZERO_PAYIN,\n  ERROR_CODE_EMAIL_TAKEN,\n  ERROR_CODE_EMAIL_NOT_FOUND,\n  ERROR_CODE_TOO_MANY_VERIFICATION_REQUESTS,\n  ERROR_CODE_UPLOAD_OVER_LIMIT,\n  ERROR_CODE_MISSING_STRIPE_ACCOUNT,\n  ERROR_CODE_TRANSACTION_BOOKING_TIME_NOT_AVAILABLE,\n  ERROR_CODE_TRANSACTION_LISTING_INSUFFICIENT_STOCK,\n  ERROR_CODE_STOCK_OLD_TOTAL_MISMATCH,\n} from './types';\n\nconst errorAPIErrors = error => {\n  return error && error.apiErrors ? error.apiErrors : [];\n};\n\nconst hasErrorWithCode = (error, code) => {\n  return errorAPIErrors(error).some(apiError => {\n    return apiError.code === code;\n  });\n};\n\n/**\n * return apiErrors from error response\n */\nconst responseAPIErrors = error => {\n  return error && error.data && error.data.errors ? error.data.errors : [];\n};\n\n/**\n * Check if the given API error (from `sdk.currentuser.create()`) is\n * due to the email address already being in use.\n */\nexport const isSignupEmailTakenError = error => hasErrorWithCode(error, ERROR_CODE_EMAIL_TAKEN);\n\n/**\n * Check if the given API error (from `sdk.currentuser.changeEmail()`) is\n * due to the email address already being in use.\n */\nexport const isChangeEmailTakenError = error => hasErrorWithCode(error, ERROR_CODE_EMAIL_TAKEN);\n\n/**\n * Check if the given API error (from\n * `sdk.currentUser.sendVerificationEmail()`) is due to too many\n * active email verification requests.\n *\n * There qre only a specific amount of active verification requests\n * allowed, and the user has to wait for them to expire to be able to\n * request sending new verification emails.\n */\nexport const isTooManyEmailVerificationRequestsError = error =>\n  hasErrorWithCode(error, ERROR_CODE_TOO_MANY_VERIFICATION_REQUESTS);\n\n/**\n * Check if the given API error (from\n * `sdk.images.upload()`) is due to the image being over\n * the size limit.\n */\nexport const isUploadImageOverLimitError = error =>\n  hasErrorWithCode(error, ERROR_CODE_UPLOAD_OVER_LIMIT);\n\n/**\n * Check if the given API error (from\n * `sdk.stock.compareAndSet()`) is due to the oldTotal being wrong.\n */\nexport const isOldTotalMismatchStockError = error =>\n  hasErrorWithCode(error, ERROR_CODE_STOCK_OLD_TOTAL_MISMATCH);\n\n/**\n * Check if the given API error (from `sdk.passwordReset.request()`)\n * is due to no user having the given email address.\n */\nexport const isPasswordRecoveryEmailNotFoundError = error =>\n  hasErrorWithCode(error, ERROR_CODE_EMAIL_NOT_FOUND);\n\n/**\n * Check if the given API error (from `sdk.transaction.initiate()` or\n * `sdk.transaction.initiateSpeculative()`) is due to the listing\n * being closed or deleted.\n */\nexport const isTransactionInitiateListingNotFoundError = error =>\n  hasErrorWithCode(error, ERROR_CODE_TRANSACTION_LISTING_NOT_FOUND);\n\n/**\n * Check if the given API error (from `sdk.transaction.initiate()` or\n * `sdk.transaction.initiateSpeculative()`) is due to missign Stripe\n * connection from the listing author.\n */\nexport const isTransactionInitiateMissingStripeAccountError = error =>\n  hasErrorWithCode(error, ERROR_CODE_MISSING_STRIPE_ACCOUNT);\n\n/**\n * Check if the given API error (from `sdk.transaction.initiate()` or\n * `sdk.transaction.initiateSpeculative()`) is due to selected booking\n * time already being booked.\n */\nexport const isTransactionInitiateBookingTimeNotAvailableError = error =>\n  hasErrorWithCode(error, ERROR_CODE_TRANSACTION_BOOKING_TIME_NOT_AVAILABLE);\n\n/**\n * Check if the given API error (from `sdk.transaction.initiate()` or\n * `sdk.transaction.initiateSpeculative()`) is due to insufficient stock.\n */\nexport const isTransactionInitiateListingInsufficientStockError = error =>\n  hasErrorWithCode(error, ERROR_CODE_TRANSACTION_LISTING_INSUFFICIENT_STOCK);\n\n/**\n * Check if the given API error (from `sdk.transaction.initiate()` or\n * `sdk.transaction.initiateSpeculative()`) is due to payment being zero.\n */\nexport const isTransactionZeroPaymentError = error =>\n  hasErrorWithCode(error, ERROR_CODE_CHARGE_ZERO_PAYIN);\n\n/**\n * Check if the given API error (from `sdk.transaction.initiate()`) is\n * due to the transaction total amount being too low for Stripe.\n */\nexport const isTransactionInitiateAmountTooLowError = error => {\n  const isZeroPayment = isTransactionZeroPaymentError(error);\n\n  const tooLowAmount = errorAPIErrors(error).some(apiError => {\n    const isPaymentFailedError =\n      apiError.status === 402 && apiError.code === ERROR_CODE_PAYMENT_FAILED;\n    let isAmountTooLow = false;\n\n    try {\n      // TODO: This is a temporary solution until a proper error code\n      // for this specific error is received in the response.\n      const msg = apiError.meta.stripeMessage;\n      isAmountTooLow =\n        msg.startsWith('Amount must be at least') ||\n        msg.startsWith('Amount must convert to at least');\n    } catch (e) {\n      // Ignore\n    }\n\n    return isPaymentFailedError && isAmountTooLow;\n  });\n\n  return isZeroPayment || tooLowAmount;\n};\n\n/**\n * Check if the given API error (from `sdk.transaction.initiate()`) is\n * due to the transaction charge creation disabled by Stripe.\n */\nexport const isTransactionChargeDisabledError = error => {\n  const chargeCreationDisabled = errorAPIErrors(error).some(apiError => {\n    const isPaymentFailedError =\n      apiError.status === 402 && apiError.code === ERROR_CODE_PAYMENT_FAILED;\n\n    let isChargeCreationDisabled = false;\n    try {\n      const msg = apiError.meta.stripeMessage;\n      isChargeCreationDisabled =\n        msg.startsWith('Your account cannot currently make charges.') ||\n        msg.match(/verification.disabled_reason/);\n    } catch (e) {\n      // Ignore\n    }\n\n    return isPaymentFailedError && isChargeCreationDisabled;\n  });\n\n  return chargeCreationDisabled;\n};\n\n/**\n * Check if the given API error (from `sdk.transaction.initiate()`) is\n * due to other error in Stripe.\n */\nexport const transactionInitiateOrderStripeErrors = error => {\n  if (error) {\n    return errorAPIErrors(error).reduce((messages, apiError) => {\n      const isPaymentFailedError =\n        apiError.status === 402 && apiError.code === ERROR_CODE_PAYMENT_FAILED;\n      const hasStripeError = apiError && apiError.meta && apiError.meta.stripeMessage;\n      const stripeMessageMaybe =\n        isPaymentFailedError && hasStripeError ? [apiError.meta.stripeMessage] : [];\n      return [...messages, ...stripeMessageMaybe];\n    }, []);\n  }\n  return null;\n};\n\n/**\n * Check if the given API error (from `sdk.transactions.transition(id, transition, params)`)\n * is due to invalid transition attempt.\n */\nexport const isTransactionsTransitionInvalidTransition = error =>\n  error &&\n  error.status === 409 &&\n  hasErrorWithCode(error, ERROR_CODE_TRANSACTION_INVALID_TRANSITION);\n\n/**\n * Check if the given API error (from `sdk.transactions.transition(id, transition, params)`)\n * is due to already sent review.\n */\nexport const isTransactionsTransitionAlreadyReviewed = error =>\n  error &&\n  error.status === 409 &&\n  (hasErrorWithCode(error, ERROR_CODE_TRANSACTION_ALREADY_REVIEWED_BY_CUSTOMER) ||\n    hasErrorWithCode(error, ERROR_CODE_TRANSACTION_ALREADY_REVIEWED_BY_PROVIDER));\n\n/**\n * Check if the given API error (from `sdk.currentUser.changeEmail(params)`)\n * is due to giving wrong password.\n */\nexport const isChangeEmailWrongPassword = error => error && error.status === 403;\n\n/**\n * Check if the given API error (from `sdk.currentUser.changePassword(params)`)\n * is due to giving wrong password.\n */\nexport const isChangePasswordWrongPassword = error => error && error.status === 403;\n\n/**\n * Check if the given API error (from\n * 'sdk.stripeAccount.create(payoutDetails)') is due to\n * invalid postal code in the given country.\n */\nexport const isStripeInvalidPostalCode = error => {\n  const msgRe = /^Invalid [A-Z]{2} postal code$/;\n  return errorAPIErrors(error).some(apiError => {\n    // Stripe doesn't seem to give an error code for this specific\n    // case, so we have to recognize it from the message.\n    const msg = apiError.meta && apiError.meta.stripeMessage ? apiError.meta.stripeMessage : '';\n    return msgRe.test(msg);\n  });\n};\n\nexport const isStripeError = error => {\n  return errorAPIErrors(error).some(apiError => {\n    // Stripe doesn't seem to give an error code for this specific\n    // case, so we have to recognize it from the message.\n    return !!(apiError.meta && apiError.meta.stripeMessage);\n  });\n};\n\n/**\n * Check if the given transition error is\n * due to no quantity information in the transition params.\n */\nexport const isTransitionQuantityInfoMissingError = error =>\n  error?.status === 400 &&\n  error?.statusText.startsWith('Error: transition should contain quantity information');\n\nexport const storableError = err => {\n  const error = err || {};\n  const { name, message, status, statusText } = error;\n  // Status, statusText, and data.errors are (possibly) added to the error object by SDK\n  const apiErrors = responseAPIErrors(error);\n\n  // Returned object is the same as prop type check in util/types -> error\n  return {\n    type: 'error',\n    name,\n    message,\n    status,\n    statusText,\n    apiErrors,\n  };\n};\n\nexport const responseApiErrorInfo = err =>\n  responseAPIErrors(err).map(e => ({\n    status: e.status,\n    code: e.code,\n    meta: e.meta,\n  }));\n"]},"metadata":{},"sourceType":"module"}