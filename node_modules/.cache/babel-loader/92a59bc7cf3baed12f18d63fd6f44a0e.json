{"ast":null,"code":"var _jsxFileName = \"/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/components/LayoutWrapperAccountSettingsSideNav/LayoutWrapperAccountSettingsSideNav.js\",\n    _s = $RefreshSig$();\n\n/**\n * This is a wrapper component for different Layouts.\n * Navigational 'aside' content should be added to this wrapper.\n */\nimport React, { useEffect } from 'react';\nimport { node, number, string, shape } from 'prop-types';\nimport { compose } from 'redux';\nimport { FormattedMessage } from '../../util/reactIntl';\nimport { withViewport } from '../../util/contextHelpers';\nimport { LayoutWrapperSideNav } from '../../components';\nimport { createGlobalState } from './hookGlobalState';\nconst MAX_HORIZONTAL_NAV_SCREEN_WIDTH = 1023; // Add global state for tab scrolling effect\n\nconst initialScrollState = {\n  scrollLeft: 0\n};\nconst {\n  useGlobalState\n} = createGlobalState(initialScrollState); // Horizontal scroll animation using element.scrollTo()\n\nconst scrollToTab = (currentTab, scrollLeft, setScrollLeft) => {\n  const el = document.querySelector(`#${currentTab}Tab`);\n\n  if (el) {\n    // el.scrollIntoView doesn't work with Safari and it considers vertical positioning too.\n    // This scroll behaviour affects horizontal scrolling only\n    // and it expects that the immediate parent element is scrollable.\n    const parent = el.parentElement;\n    const parentRect = parent.getBoundingClientRect();\n    const maxScrollDistance = parent.scrollWidth - parentRect.width;\n    const hasParentScrolled = parent.scrollLeft > 0;\n    const scrollPositionCurrent = hasParentScrolled ? parent.scrollLeft : scrollLeft;\n    const tabRect = el.getBoundingClientRect();\n    const diffLeftBetweenTabAndParent = tabRect.left - parentRect.left;\n    const tabScrollPosition = parent.scrollLeft + diffLeftBetweenTabAndParent;\n    const scrollPositionNew = tabScrollPosition > maxScrollDistance ? maxScrollDistance : parent.scrollLeft + diffLeftBetweenTabAndParent;\n    const needsSmoothScroll = scrollPositionCurrent !== scrollPositionNew;\n\n    if (!hasParentScrolled || hasParentScrolled && needsSmoothScroll) {\n      // Ensure that smooth scroll animation uses old position as starting point after navigation.\n      parent.scrollTo({\n        left: scrollPositionCurrent\n      }); // Scroll to new position\n\n      parent.scrollTo({\n        left: scrollPositionNew,\n        behavior: 'smooth'\n      });\n    } // Always keep track of new position (even if smooth scrolling is not applied)\n\n\n    setScrollLeft(scrollPositionNew);\n  }\n};\n\nconst LayoutWrapperAccountSettingsSideNavComponent = props => {\n  _s();\n\n  const [scrollLeft, setScrollLeft] = useGlobalState('scrollLeft');\n  useEffect(() => {\n    const {\n      currentTab,\n      viewport\n    } = props;\n    const {\n      width\n    } = viewport;\n    const hasViewport = width > 0;\n    const hasHorizontalTabLayout = hasViewport && width <= MAX_HORIZONTAL_NAV_SCREEN_WIDTH;\n    const hasFontsLoaded = hasViewport && document.documentElement.classList.contains('fontsLoaded'); // Check if scrollToTab call is needed (tab is not visible on mobile)\n\n    if (hasHorizontalTabLayout && hasFontsLoaded) {\n      scrollToTab(currentTab, scrollLeft, setScrollLeft);\n    }\n\n    return () => {\n      // Update scroll position when unmounting\n      const el = document.querySelector(`#${currentTab}Tab`);\n      setScrollLeft(el.parentElement.scrollLeft);\n    };\n  });\n  const {\n    currentTab\n  } = props;\n  const tabs = [{\n    text: /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"LayoutWrapperAccountSettingsSideNav.contactDetailsTabTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    }),\n    selected: currentTab === 'ContactDetailsPage',\n    id: 'ContactDetailsPageTab',\n    linkProps: {\n      name: 'ContactDetailsPage'\n    }\n  }, {\n    text: /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"LayoutWrapperAccountSettingsSideNav.passwordTabTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }),\n    selected: currentTab === 'PasswordChangePage',\n    id: 'PasswordChangePageTab',\n    linkProps: {\n      name: 'PasswordChangePage'\n    }\n  }, {\n    text: /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"LayoutWrapperAccountSettingsSideNav.paymentsTabTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }\n    }),\n    selected: currentTab === 'StripePayoutPage',\n    id: 'StripePayoutPageTab',\n    linkProps: {\n      name: 'StripePayoutPage'\n    }\n  }, {\n    text: /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"LayoutWrapperAccountSettingsSideNav.paymentMethodsTabTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }),\n    selected: currentTab === 'PaymentMethodsPage',\n    id: 'PaymentMethodsPageTab',\n    linkProps: {\n      name: 'PaymentMethodsPage'\n    }\n  }];\n  return /*#__PURE__*/React.createElement(LayoutWrapperSideNav, {\n    tabs: tabs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 10\n    }\n  });\n};\n\n_s(LayoutWrapperAccountSettingsSideNavComponent, \"zXqoB0093KZGr9Jf4bG+G0p2QM4=\", false, function () {\n  return [useGlobalState];\n});\n\n_c = LayoutWrapperAccountSettingsSideNavComponent;\nLayoutWrapperAccountSettingsSideNavComponent.defaultProps = {\n  className: null,\n  rootClassName: null,\n  children: null,\n  currentTab: null\n};\nLayoutWrapperAccountSettingsSideNavComponent.propTypes = {\n  children: node,\n  className: string,\n  rootClassName: string,\n  currentTab: string,\n  // from withViewport\n  viewport: shape({\n    width: number.isRequired,\n    height: number.isRequired\n  }).isRequired\n};\nconst LayoutWrapperAccountSettingsSideNav = compose(withViewport)(LayoutWrapperAccountSettingsSideNavComponent);\nexport default LayoutWrapperAccountSettingsSideNav;\n\nvar _c;\n\n$RefreshReg$(_c, \"LayoutWrapperAccountSettingsSideNavComponent\");","map":{"version":3,"sources":["/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/components/LayoutWrapperAccountSettingsSideNav/LayoutWrapperAccountSettingsSideNav.js"],"names":["React","useEffect","node","number","string","shape","compose","FormattedMessage","withViewport","LayoutWrapperSideNav","createGlobalState","MAX_HORIZONTAL_NAV_SCREEN_WIDTH","initialScrollState","scrollLeft","useGlobalState","scrollToTab","currentTab","setScrollLeft","el","document","querySelector","parent","parentElement","parentRect","getBoundingClientRect","maxScrollDistance","scrollWidth","width","hasParentScrolled","scrollPositionCurrent","tabRect","diffLeftBetweenTabAndParent","left","tabScrollPosition","scrollPositionNew","needsSmoothScroll","scrollTo","behavior","LayoutWrapperAccountSettingsSideNavComponent","props","viewport","hasViewport","hasHorizontalTabLayout","hasFontsLoaded","documentElement","classList","contains","tabs","text","selected","id","linkProps","name","defaultProps","className","rootClassName","children","propTypes","isRequired","height","LayoutWrapperAccountSettingsSideNav"],"mappings":"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","sourcesContent":["/**\n * This is a wrapper component for different Layouts.\n * Navigational 'aside' content should be added to this wrapper.\n */\nimport React, { useEffect } from 'react';\nimport { node, number, string, shape } from 'prop-types';\nimport { compose } from 'redux';\n\nimport { FormattedMessage } from '../../util/reactIntl';\nimport { withViewport } from '../../util/contextHelpers';\nimport { LayoutWrapperSideNav } from '../../components';\n\nimport { createGlobalState } from './hookGlobalState';\n\nconst MAX_HORIZONTAL_NAV_SCREEN_WIDTH = 1023;\n\n// Add global state for tab scrolling effect\nconst initialScrollState = { scrollLeft: 0 };\nconst { useGlobalState } = createGlobalState(initialScrollState);\n\n// Horizontal scroll animation using element.scrollTo()\nconst scrollToTab = (currentTab, scrollLeft, setScrollLeft) => {\n  const el = document.querySelector(`#${currentTab}Tab`);\n\n  if (el) {\n    // el.scrollIntoView doesn't work with Safari and it considers vertical positioning too.\n    // This scroll behaviour affects horizontal scrolling only\n    // and it expects that the immediate parent element is scrollable.\n    const parent = el.parentElement;\n    const parentRect = parent.getBoundingClientRect();\n    const maxScrollDistance = parent.scrollWidth - parentRect.width;\n\n    const hasParentScrolled = parent.scrollLeft > 0;\n    const scrollPositionCurrent = hasParentScrolled ? parent.scrollLeft : scrollLeft;\n\n    const tabRect = el.getBoundingClientRect();\n    const diffLeftBetweenTabAndParent = tabRect.left - parentRect.left;\n    const tabScrollPosition = parent.scrollLeft + diffLeftBetweenTabAndParent;\n\n    const scrollPositionNew =\n      tabScrollPosition > maxScrollDistance\n        ? maxScrollDistance\n        : parent.scrollLeft + diffLeftBetweenTabAndParent;\n\n    const needsSmoothScroll = scrollPositionCurrent !== scrollPositionNew;\n\n    if (!hasParentScrolled || (hasParentScrolled && needsSmoothScroll)) {\n      // Ensure that smooth scroll animation uses old position as starting point after navigation.\n      parent.scrollTo({ left: scrollPositionCurrent });\n      // Scroll to new position\n      parent.scrollTo({ left: scrollPositionNew, behavior: 'smooth' });\n    }\n    // Always keep track of new position (even if smooth scrolling is not applied)\n    setScrollLeft(scrollPositionNew);\n  }\n};\n\nconst LayoutWrapperAccountSettingsSideNavComponent = props => {\n  const [scrollLeft, setScrollLeft] = useGlobalState('scrollLeft');\n  useEffect(() => {\n    const { currentTab, viewport } = props;\n\n    const { width } = viewport;\n    const hasViewport = width > 0;\n    const hasHorizontalTabLayout = hasViewport && width <= MAX_HORIZONTAL_NAV_SCREEN_WIDTH;\n    const hasFontsLoaded =\n      hasViewport && document.documentElement.classList.contains('fontsLoaded');\n\n    // Check if scrollToTab call is needed (tab is not visible on mobile)\n    if (hasHorizontalTabLayout && hasFontsLoaded) {\n      scrollToTab(currentTab, scrollLeft, setScrollLeft);\n    }\n\n    return () => {\n      // Update scroll position when unmounting\n      const el = document.querySelector(`#${currentTab}Tab`);\n      setScrollLeft(el.parentElement.scrollLeft);\n    };\n  });\n\n  const { currentTab } = props;\n\n  const tabs = [\n    {\n      text: <FormattedMessage id=\"LayoutWrapperAccountSettingsSideNav.contactDetailsTabTitle\" />,\n      selected: currentTab === 'ContactDetailsPage',\n      id: 'ContactDetailsPageTab',\n      linkProps: {\n        name: 'ContactDetailsPage',\n      },\n    },\n    {\n      text: <FormattedMessage id=\"LayoutWrapperAccountSettingsSideNav.passwordTabTitle\" />,\n      selected: currentTab === 'PasswordChangePage',\n      id: 'PasswordChangePageTab',\n      linkProps: {\n        name: 'PasswordChangePage',\n      },\n    },\n    {\n      text: <FormattedMessage id=\"LayoutWrapperAccountSettingsSideNav.paymentsTabTitle\" />,\n      selected: currentTab === 'StripePayoutPage',\n      id: 'StripePayoutPageTab',\n      linkProps: {\n        name: 'StripePayoutPage',\n      },\n    },\n    {\n      text: <FormattedMessage id=\"LayoutWrapperAccountSettingsSideNav.paymentMethodsTabTitle\" />,\n      selected: currentTab === 'PaymentMethodsPage',\n      id: 'PaymentMethodsPageTab',\n      linkProps: {\n        name: 'PaymentMethodsPage',\n      },\n    },\n  ];\n\n  return <LayoutWrapperSideNav tabs={tabs} />;\n};\n\nLayoutWrapperAccountSettingsSideNavComponent.defaultProps = {\n  className: null,\n  rootClassName: null,\n  children: null,\n  currentTab: null,\n};\n\nLayoutWrapperAccountSettingsSideNavComponent.propTypes = {\n  children: node,\n  className: string,\n  rootClassName: string,\n  currentTab: string,\n\n  // from withViewport\n  viewport: shape({\n    width: number.isRequired,\n    height: number.isRequired,\n  }).isRequired,\n};\n\nconst LayoutWrapperAccountSettingsSideNav = compose(withViewport)(\n  LayoutWrapperAccountSettingsSideNavComponent\n);\n\nexport default LayoutWrapperAccountSettingsSideNav;\n"]},"metadata":{},"sourceType":"module"}