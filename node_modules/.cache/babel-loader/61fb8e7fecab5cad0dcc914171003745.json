{"ast":null,"code":"import isArray from 'lodash/isArray';\nimport reduce from 'lodash/reduce';\nimport { sanitizeEntity } from './sanitize';\n/**\n * Combine the given relationships objects\n *\n * See: http://jsonapi.org/format/#document-resource-object-relationships\n */\n\nexport const combinedRelationships = (oldRels, newRels) => {\n  if (!oldRels && !newRels) {\n    // Special case to avoid adding an empty relationships object when\n    // none of the resource objects had any relationships.\n    return null;\n  }\n\n  return { ...oldRels,\n    ...newRels\n  };\n};\n/**\n * Combine the given resource objects\n *\n * See: http://jsonapi.org/format/#document-resource-objects\n */\n\nexport const combinedResourceObjects = (oldRes, newRes) => {\n  const {\n    id,\n    type\n  } = oldRes;\n\n  if (newRes.id.uuid !== id.uuid || newRes.type !== type) {\n    throw new Error('Cannot merge resource objects with different ids or types');\n  }\n\n  const attributes = newRes.attributes || oldRes.attributes;\n  const attributesOld = oldRes.attributes || {};\n  const attributesNew = newRes.attributes || {}; // Allow (potentially) sparse attributes to update only relevant fields\n\n  const attrs = attributes ? {\n    attributes: { ...attributesOld,\n      ...attributesNew\n    }\n  } : null;\n  const relationships = combinedRelationships(oldRes.relationships, newRes.relationships);\n  const rels = relationships ? {\n    relationships\n  } : null;\n  return {\n    id,\n    type,\n    ...attrs,\n    ...rels\n  };\n};\n/**\n * Combine the resource objects form the given api response to the\n * existing entities.\n */\n\nexport const updatedEntities = (oldEntities, apiResponse) => {\n  const {\n    data,\n    included = []\n  } = apiResponse;\n  const objects = (Array.isArray(data) ? data : [data]).concat(included);\n  const newEntities = objects.reduce((entities, curr) => {\n    const {\n      id,\n      type\n    } = curr; // Some entities (e.g. listing and user) might include extended data,\n    // you should check if src/util/sanitize.js needs to be updated.\n\n    const current = sanitizeEntity(curr);\n    entities[type] = entities[type] || {};\n    const entity = entities[type][id.uuid];\n    entities[type][id.uuid] = entity ? combinedResourceObjects({ ...entity\n    }, current) : current;\n    return entities;\n  }, oldEntities);\n  return newEntities;\n};\n/**\n * Denormalise the entities with the resources from the entities object\n *\n * This function calculates the dernormalised tree structure from the\n * normalised entities object with all the relationships joined in.\n *\n * @param {Object} entities entities object in the SDK Redux store\n * @param {Array<{ id, type }} resources array of objects\n * with id and type\n * @param {Boolean} throwIfNotFound wheather to skip a resource that\n * is not found (false), or to throw an Error (true)\n *\n * @return {Array} the given resource objects denormalised that were\n * found in the entities\n */\n\nexport const denormalisedEntities = (entities, resources, throwIfNotFound = true) => {\n  const denormalised = resources.map(res => {\n    const {\n      id,\n      type\n    } = res;\n    const entityFound = entities[type] && id && entities[type][id.uuid];\n\n    if (!entityFound) {\n      if (throwIfNotFound) {\n        throw new Error(`Entity with type \"${type}\" and id \"${id ? id.uuid : id}\" not found`);\n      }\n\n      return null;\n    }\n\n    const entity = entities[type][id.uuid];\n    const {\n      relationships,\n      ...entityData\n    } = entity;\n\n    if (relationships) {\n      // Recursively join in all the relationship entities\n      return reduce(relationships, (ent, relRef, relName) => {\n        // A relationship reference can be either a single object or\n        // an array of objects. We want to keep that form in the final\n        // result.\n        const hasMultipleRefs = Array.isArray(relRef.data);\n        const multipleRefsEmpty = hasMultipleRefs && relRef.data.length === 0;\n\n        if (!relRef.data || multipleRefsEmpty) {\n          ent[relName] = hasMultipleRefs ? [] : null;\n        } else {\n          const refs = hasMultipleRefs ? relRef.data : [relRef.data]; // If a relationship is not found, an Error should be thrown\n\n          const rels = denormalisedEntities(entities, refs, true);\n          ent[relName] = hasMultipleRefs ? rels : rels[0];\n        }\n\n        return ent;\n      }, entityData);\n    }\n\n    return entityData;\n  });\n  return denormalised.filter(e => !!e);\n};\n/**\n * Denormalise the data from the given SDK response\n *\n * @param {Object} sdkResponse response object from an SDK call\n *\n * @return {Array} entities in the response with relationships\n * denormalised from the included data\n */\n\nexport const denormalisedResponseEntities = sdkResponse => {\n  const apiResponse = sdkResponse.data;\n  const data = apiResponse.data;\n  const resources = Array.isArray(data) ? data : [data];\n\n  if (!data || resources.length === 0) {\n    return [];\n  }\n\n  const entities = updatedEntities({}, apiResponse);\n  return denormalisedEntities(entities, resources);\n};\n/**\n * Create shell objects to ensure that attributes etc. exists.\n *\n * @param {Object} transaction entity object, which is to be ensured against null values\n */\n\nexport const ensureTransaction = (transaction, booking = null, listing = null, provider = null) => {\n  const empty = {\n    id: null,\n    type: 'transaction',\n    attributes: {},\n    booking,\n    listing,\n    provider\n  };\n  return { ...empty,\n    ...transaction\n  };\n};\n/**\n * Create shell objects to ensure that attributes etc. exists.\n *\n * @param {Object} booking entity object, which is to be ensured against null values\n */\n\nexport const ensureBooking = booking => {\n  const empty = {\n    id: null,\n    type: 'booking',\n    attributes: {}\n  };\n  return { ...empty,\n    ...booking\n  };\n};\n/**\n * Create shell objects to ensure that attributes etc. exists.\n *\n * @param {Object} listing entity object, which is to be ensured against null values\n */\n\nexport const ensureListing = listing => {\n  const empty = {\n    id: null,\n    type: 'listing',\n    attributes: {\n      publicData: {}\n    },\n    images: []\n  };\n  return { ...empty,\n    ...listing\n  };\n};\n/**\n * Create shell objects to ensure that attributes etc. exists.\n *\n * @param {Object} listing entity object, which is to be ensured against null values\n */\n\nexport const ensureOwnListing = listing => {\n  const empty = {\n    id: null,\n    type: 'ownListing',\n    attributes: {\n      publicData: {}\n    },\n    images: []\n  };\n  return { ...empty,\n    ...listing\n  };\n};\n/**\n * Create shell objects to ensure that attributes etc. exists.\n *\n * @param {Object} user entity object, which is to be ensured against null values\n */\n\nexport const ensureUser = user => {\n  const empty = {\n    id: null,\n    type: 'user',\n    attributes: {\n      profile: {}\n    }\n  };\n  return { ...empty,\n    ...user\n  };\n};\n/**\n * Create shell objects to ensure that attributes etc. exists.\n *\n * @param {Object} current user entity object, which is to be ensured against null values\n */\n\nexport const ensureCurrentUser = user => {\n  const empty = {\n    id: null,\n    type: 'currentUser',\n    attributes: {\n      profile: {}\n    },\n    profileImage: {}\n  };\n  return { ...empty,\n    ...user\n  };\n};\n/**\n * Create shell objects to ensure that attributes etc. exists.\n *\n * @param {Object} time slot entity object, which is to be ensured against null values\n */\n\nexport const ensureTimeSlot = timeSlot => {\n  const empty = {\n    id: null,\n    type: 'timeSlot',\n    attributes: {}\n  };\n  return { ...empty,\n    ...timeSlot\n  };\n};\n/**\n * Create shell objects to ensure that attributes etc. exists.\n *\n * @param {Object} availability exception entity object, which is to be ensured against null values\n */\n\nexport const ensureDayAvailabilityPlan = availabilityPlan => {\n  const empty = {\n    type: 'availability-plan/day',\n    entries: []\n  };\n  return { ...empty,\n    ...availabilityPlan\n  };\n};\n/**\n * Create shell objects to ensure that attributes etc. exists.\n *\n * @param {Object} availability exception entity object, which is to be ensured against null values\n */\n\nexport const ensureAvailabilityException = availabilityException => {\n  const empty = {\n    id: null,\n    type: 'availabilityException',\n    attributes: {}\n  };\n  return { ...empty,\n    ...availabilityException\n  };\n};\n/**\n * Create shell objects to ensure that attributes etc. exists.\n *\n * @param {Object} stripeCustomer entity from API, which is to be ensured against null values\n */\n\nexport const ensureStripeCustomer = stripeCustomer => {\n  const empty = {\n    id: null,\n    type: 'stripeCustomer',\n    attributes: {}\n  };\n  return { ...empty,\n    ...stripeCustomer\n  };\n};\n/**\n * Create shell objects to ensure that attributes etc. exists.\n *\n * @param {Object} stripeCustomer entity from API, which is to be ensured against null values\n */\n\nexport const ensurePaymentMethodCard = stripePaymentMethod => {\n  const empty = {\n    id: null,\n    type: 'stripePaymentMethod',\n    attributes: {\n      type: 'stripe-payment-method/card',\n      card: {}\n    }\n  };\n  const cardPaymentMethod = { ...empty,\n    ...stripePaymentMethod\n  };\n\n  if (cardPaymentMethod.attributes.type !== 'stripe-payment-method/card') {\n    throw new Error(`'ensurePaymentMethodCard' got payment method with wrong type.\n      'stripe-payment-method/card' was expected, received ${cardPaymentMethod.attributes.type}`);\n  }\n\n  return cardPaymentMethod;\n};\n/**\n * Get the display name of the given user as string. This function handles\n * missing data (e.g. when the user object is still being downloaded),\n * fully loaded users, as well as banned users.\n *\n * For banned or deleted users, a translated name should be provided.\n *\n * @param {propTypes.user} user\n * @param {String} defaultUserDisplayName\n *\n * @return {String} display name that can be rendered in the UI\n */\n\nexport const userDisplayNameAsString = (user, defaultUserDisplayName) => {\n  const hasAttributes = user && user.attributes;\n  const hasProfile = hasAttributes && user.attributes.profile;\n  const hasDisplayName = hasProfile && user.attributes.profile.displayName;\n\n  if (hasDisplayName) {\n    return user.attributes.profile.displayName;\n  } else {\n    return defaultUserDisplayName || '';\n  }\n};\n/**\n * DEPRECATED: Use userDisplayNameAsString function or UserDisplayName component instead\n *\n * @param {propTypes.user} user\n * @param {String} bannedUserDisplayName\n *\n * @return {String} display name that can be rendered in the UI\n */\n\nexport const userDisplayName = (user, bannedUserDisplayName) => {\n  console.warn(`Function userDisplayName is deprecated!\nUser function userDisplayNameAsString or component UserDisplayName instead.`);\n  return userDisplayNameAsString(user, bannedUserDisplayName);\n};\n/**\n * Get the abbreviated name of the given user. This function handles\n * missing data (e.g. when the user object is still being downloaded),\n * fully loaded users, as well as banned users.\n *\n * For banned  or deleted users, a default abbreviated name should be provided.\n *\n * @param {propTypes.user} user\n * @param {String} defaultUserAbbreviatedName\n *\n * @return {String} abbreviated name that can be rendered in the UI\n * (e.g. in Avatar initials)\n */\n\nexport const userAbbreviatedName = (user, defaultUserAbbreviatedName) => {\n  const hasAttributes = user && user.attributes;\n  const hasProfile = hasAttributes && user.attributes.profile;\n  const hasDisplayName = hasProfile && user.attributes.profile.abbreviatedName;\n\n  if (hasDisplayName) {\n    return user.attributes.profile.abbreviatedName;\n  } else {\n    return defaultUserAbbreviatedName || '';\n  }\n};\n/**\n * A customizer function to be used with the\n * mergeWith function from lodash.\n *\n * Works like merge in every way exept that on case of\n * an array the old value is completely overridden with\n * the new value.\n *\n * @param {Object} objValue Value of current field, denoted by key\n * @param {Object} srcValue New value\n * @param {String} key Key of the field currently being merged\n * @param {Object} object Target object that is receiving values from source\n * @param {Object} source Source object that is merged into object param\n * @param {Object} stack Tracks merged values\n *\n * @return {Object} New value for objValue if the original is an array,\n * otherwise undefined is returned, which results in mergeWith using the\n * standard merging function\n */\n\nexport const overrideArrays = (objValue, srcValue, key, object, source, stack) => {\n  if (isArray(objValue)) {\n    return srcValue;\n  }\n};\n/**\n * Humanizes a line item code. Strips the \"line-item/\" namespace\n * definition from the beginnign, replaces dashes with spaces and\n * capitalizes the first character.\n *\n * @param {string} code a line item code\n *\n * @return {string} returns the line item code humanized\n */\n\nexport const humanizeLineItemCode = code => {\n  if (!/^line-item\\/.+/.test(code)) {\n    throw new Error(`Invalid line item code: ${code}`);\n  }\n\n  const lowercase = code.replace(/^line-item\\//, '').replace(/-/g, ' ');\n  return lowercase.charAt(0).toUpperCase() + lowercase.slice(1);\n};","map":{"version":3,"sources":["/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/util/data.js"],"names":["isArray","reduce","sanitizeEntity","combinedRelationships","oldRels","newRels","combinedResourceObjects","oldRes","newRes","id","type","uuid","Error","attributes","attributesOld","attributesNew","attrs","relationships","rels","updatedEntities","oldEntities","apiResponse","data","included","objects","Array","concat","newEntities","entities","curr","current","entity","denormalisedEntities","resources","throwIfNotFound","denormalised","map","res","entityFound","entityData","ent","relRef","relName","hasMultipleRefs","multipleRefsEmpty","length","refs","filter","e","denormalisedResponseEntities","sdkResponse","ensureTransaction","transaction","booking","listing","provider","empty","ensureBooking","ensureListing","publicData","images","ensureOwnListing","ensureUser","user","profile","ensureCurrentUser","profileImage","ensureTimeSlot","timeSlot","ensureDayAvailabilityPlan","availabilityPlan","entries","ensureAvailabilityException","availabilityException","ensureStripeCustomer","stripeCustomer","ensurePaymentMethodCard","stripePaymentMethod","card","cardPaymentMethod","userDisplayNameAsString","defaultUserDisplayName","hasAttributes","hasProfile","hasDisplayName","displayName","userDisplayName","bannedUserDisplayName","console","warn","userAbbreviatedName","defaultUserAbbreviatedName","abbreviatedName","overrideArrays","objValue","srcValue","key","object","source","stack","humanizeLineItemCode","code","test","lowercase","replace","charAt","toUpperCase","slice"],"mappings":"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","sourcesContent":["import isArray from 'lodash/isArray';\nimport reduce from 'lodash/reduce';\nimport { sanitizeEntity } from './sanitize';\n\n/**\n * Combine the given relationships objects\n *\n * See: http://jsonapi.org/format/#document-resource-object-relationships\n */\nexport const combinedRelationships = (oldRels, newRels) => {\n  if (!oldRels && !newRels) {\n    // Special case to avoid adding an empty relationships object when\n    // none of the resource objects had any relationships.\n    return null;\n  }\n  return { ...oldRels, ...newRels };\n};\n\n/**\n * Combine the given resource objects\n *\n * See: http://jsonapi.org/format/#document-resource-objects\n */\nexport const combinedResourceObjects = (oldRes, newRes) => {\n  const { id, type } = oldRes;\n  if (newRes.id.uuid !== id.uuid || newRes.type !== type) {\n    throw new Error('Cannot merge resource objects with different ids or types');\n  }\n  const attributes = newRes.attributes || oldRes.attributes;\n  const attributesOld = oldRes.attributes || {};\n  const attributesNew = newRes.attributes || {};\n  // Allow (potentially) sparse attributes to update only relevant fields\n  const attrs = attributes ? { attributes: { ...attributesOld, ...attributesNew } } : null;\n  const relationships = combinedRelationships(oldRes.relationships, newRes.relationships);\n  const rels = relationships ? { relationships } : null;\n  return { id, type, ...attrs, ...rels };\n};\n\n/**\n * Combine the resource objects form the given api response to the\n * existing entities.\n */\nexport const updatedEntities = (oldEntities, apiResponse) => {\n  const { data, included = [] } = apiResponse;\n  const objects = (Array.isArray(data) ? data : [data]).concat(included);\n\n  const newEntities = objects.reduce((entities, curr) => {\n    const { id, type } = curr;\n\n    // Some entities (e.g. listing and user) might include extended data,\n    // you should check if src/util/sanitize.js needs to be updated.\n    const current = sanitizeEntity(curr);\n\n    entities[type] = entities[type] || {};\n    const entity = entities[type][id.uuid];\n    entities[type][id.uuid] = entity ? combinedResourceObjects({ ...entity }, current) : current;\n\n    return entities;\n  }, oldEntities);\n\n  return newEntities;\n};\n\n/**\n * Denormalise the entities with the resources from the entities object\n *\n * This function calculates the dernormalised tree structure from the\n * normalised entities object with all the relationships joined in.\n *\n * @param {Object} entities entities object in the SDK Redux store\n * @param {Array<{ id, type }} resources array of objects\n * with id and type\n * @param {Boolean} throwIfNotFound wheather to skip a resource that\n * is not found (false), or to throw an Error (true)\n *\n * @return {Array} the given resource objects denormalised that were\n * found in the entities\n */\nexport const denormalisedEntities = (entities, resources, throwIfNotFound = true) => {\n  const denormalised = resources.map(res => {\n    const { id, type } = res;\n    const entityFound = entities[type] && id && entities[type][id.uuid];\n    if (!entityFound) {\n      if (throwIfNotFound) {\n        throw new Error(`Entity with type \"${type}\" and id \"${id ? id.uuid : id}\" not found`);\n      }\n      return null;\n    }\n    const entity = entities[type][id.uuid];\n    const { relationships, ...entityData } = entity;\n\n    if (relationships) {\n      // Recursively join in all the relationship entities\n      return reduce(\n        relationships,\n        (ent, relRef, relName) => {\n          // A relationship reference can be either a single object or\n          // an array of objects. We want to keep that form in the final\n          // result.\n          const hasMultipleRefs = Array.isArray(relRef.data);\n          const multipleRefsEmpty = hasMultipleRefs && relRef.data.length === 0;\n          if (!relRef.data || multipleRefsEmpty) {\n            ent[relName] = hasMultipleRefs ? [] : null;\n          } else {\n            const refs = hasMultipleRefs ? relRef.data : [relRef.data];\n\n            // If a relationship is not found, an Error should be thrown\n            const rels = denormalisedEntities(entities, refs, true);\n\n            ent[relName] = hasMultipleRefs ? rels : rels[0];\n          }\n          return ent;\n        },\n        entityData\n      );\n    }\n    return entityData;\n  });\n  return denormalised.filter(e => !!e);\n};\n\n/**\n * Denormalise the data from the given SDK response\n *\n * @param {Object} sdkResponse response object from an SDK call\n *\n * @return {Array} entities in the response with relationships\n * denormalised from the included data\n */\nexport const denormalisedResponseEntities = sdkResponse => {\n  const apiResponse = sdkResponse.data;\n  const data = apiResponse.data;\n  const resources = Array.isArray(data) ? data : [data];\n\n  if (!data || resources.length === 0) {\n    return [];\n  }\n\n  const entities = updatedEntities({}, apiResponse);\n  return denormalisedEntities(entities, resources);\n};\n\n/**\n * Create shell objects to ensure that attributes etc. exists.\n *\n * @param {Object} transaction entity object, which is to be ensured against null values\n */\nexport const ensureTransaction = (transaction, booking = null, listing = null, provider = null) => {\n  const empty = {\n    id: null,\n    type: 'transaction',\n    attributes: {},\n    booking,\n    listing,\n    provider,\n  };\n  return { ...empty, ...transaction };\n};\n\n/**\n * Create shell objects to ensure that attributes etc. exists.\n *\n * @param {Object} booking entity object, which is to be ensured against null values\n */\nexport const ensureBooking = booking => {\n  const empty = { id: null, type: 'booking', attributes: {} };\n  return { ...empty, ...booking };\n};\n\n/**\n * Create shell objects to ensure that attributes etc. exists.\n *\n * @param {Object} listing entity object, which is to be ensured against null values\n */\nexport const ensureListing = listing => {\n  const empty = {\n    id: null,\n    type: 'listing',\n    attributes: { publicData: {} },\n    images: [],\n  };\n  return { ...empty, ...listing };\n};\n\n/**\n * Create shell objects to ensure that attributes etc. exists.\n *\n * @param {Object} listing entity object, which is to be ensured against null values\n */\nexport const ensureOwnListing = listing => {\n  const empty = {\n    id: null,\n    type: 'ownListing',\n    attributes: { publicData: {} },\n    images: [],\n  };\n  return { ...empty, ...listing };\n};\n\n/**\n * Create shell objects to ensure that attributes etc. exists.\n *\n * @param {Object} user entity object, which is to be ensured against null values\n */\nexport const ensureUser = user => {\n  const empty = { id: null, type: 'user', attributes: { profile: {} } };\n  return { ...empty, ...user };\n};\n\n/**\n * Create shell objects to ensure that attributes etc. exists.\n *\n * @param {Object} current user entity object, which is to be ensured against null values\n */\nexport const ensureCurrentUser = user => {\n  const empty = { id: null, type: 'currentUser', attributes: { profile: {} }, profileImage: {} };\n  return { ...empty, ...user };\n};\n\n/**\n * Create shell objects to ensure that attributes etc. exists.\n *\n * @param {Object} time slot entity object, which is to be ensured against null values\n */\nexport const ensureTimeSlot = timeSlot => {\n  const empty = { id: null, type: 'timeSlot', attributes: {} };\n  return { ...empty, ...timeSlot };\n};\n\n/**\n * Create shell objects to ensure that attributes etc. exists.\n *\n * @param {Object} availability exception entity object, which is to be ensured against null values\n */\nexport const ensureDayAvailabilityPlan = availabilityPlan => {\n  const empty = { type: 'availability-plan/day', entries: [] };\n  return { ...empty, ...availabilityPlan };\n};\n\n/**\n * Create shell objects to ensure that attributes etc. exists.\n *\n * @param {Object} availability exception entity object, which is to be ensured against null values\n */\nexport const ensureAvailabilityException = availabilityException => {\n  const empty = { id: null, type: 'availabilityException', attributes: {} };\n  return { ...empty, ...availabilityException };\n};\n\n/**\n * Create shell objects to ensure that attributes etc. exists.\n *\n * @param {Object} stripeCustomer entity from API, which is to be ensured against null values\n */\nexport const ensureStripeCustomer = stripeCustomer => {\n  const empty = { id: null, type: 'stripeCustomer', attributes: {} };\n  return { ...empty, ...stripeCustomer };\n};\n\n/**\n * Create shell objects to ensure that attributes etc. exists.\n *\n * @param {Object} stripeCustomer entity from API, which is to be ensured against null values\n */\nexport const ensurePaymentMethodCard = stripePaymentMethod => {\n  const empty = {\n    id: null,\n    type: 'stripePaymentMethod',\n    attributes: { type: 'stripe-payment-method/card', card: {} },\n  };\n  const cardPaymentMethod = { ...empty, ...stripePaymentMethod };\n\n  if (cardPaymentMethod.attributes.type !== 'stripe-payment-method/card') {\n    throw new Error(`'ensurePaymentMethodCard' got payment method with wrong type.\n      'stripe-payment-method/card' was expected, received ${cardPaymentMethod.attributes.type}`);\n  }\n\n  return cardPaymentMethod;\n};\n\n/**\n * Get the display name of the given user as string. This function handles\n * missing data (e.g. when the user object is still being downloaded),\n * fully loaded users, as well as banned users.\n *\n * For banned or deleted users, a translated name should be provided.\n *\n * @param {propTypes.user} user\n * @param {String} defaultUserDisplayName\n *\n * @return {String} display name that can be rendered in the UI\n */\nexport const userDisplayNameAsString = (user, defaultUserDisplayName) => {\n  const hasAttributes = user && user.attributes;\n  const hasProfile = hasAttributes && user.attributes.profile;\n  const hasDisplayName = hasProfile && user.attributes.profile.displayName;\n\n  if (hasDisplayName) {\n    return user.attributes.profile.displayName;\n  } else {\n    return defaultUserDisplayName || '';\n  }\n};\n\n/**\n * DEPRECATED: Use userDisplayNameAsString function or UserDisplayName component instead\n *\n * @param {propTypes.user} user\n * @param {String} bannedUserDisplayName\n *\n * @return {String} display name that can be rendered in the UI\n */\nexport const userDisplayName = (user, bannedUserDisplayName) => {\n  console.warn(\n    `Function userDisplayName is deprecated!\nUser function userDisplayNameAsString or component UserDisplayName instead.`\n  );\n\n  return userDisplayNameAsString(user, bannedUserDisplayName);\n};\n\n/**\n * Get the abbreviated name of the given user. This function handles\n * missing data (e.g. when the user object is still being downloaded),\n * fully loaded users, as well as banned users.\n *\n * For banned  or deleted users, a default abbreviated name should be provided.\n *\n * @param {propTypes.user} user\n * @param {String} defaultUserAbbreviatedName\n *\n * @return {String} abbreviated name that can be rendered in the UI\n * (e.g. in Avatar initials)\n */\nexport const userAbbreviatedName = (user, defaultUserAbbreviatedName) => {\n  const hasAttributes = user && user.attributes;\n  const hasProfile = hasAttributes && user.attributes.profile;\n  const hasDisplayName = hasProfile && user.attributes.profile.abbreviatedName;\n\n  if (hasDisplayName) {\n    return user.attributes.profile.abbreviatedName;\n  } else {\n    return defaultUserAbbreviatedName || '';\n  }\n};\n\n/**\n * A customizer function to be used with the\n * mergeWith function from lodash.\n *\n * Works like merge in every way exept that on case of\n * an array the old value is completely overridden with\n * the new value.\n *\n * @param {Object} objValue Value of current field, denoted by key\n * @param {Object} srcValue New value\n * @param {String} key Key of the field currently being merged\n * @param {Object} object Target object that is receiving values from source\n * @param {Object} source Source object that is merged into object param\n * @param {Object} stack Tracks merged values\n *\n * @return {Object} New value for objValue if the original is an array,\n * otherwise undefined is returned, which results in mergeWith using the\n * standard merging function\n */\nexport const overrideArrays = (objValue, srcValue, key, object, source, stack) => {\n  if (isArray(objValue)) {\n    return srcValue;\n  }\n};\n\n/**\n * Humanizes a line item code. Strips the \"line-item/\" namespace\n * definition from the beginnign, replaces dashes with spaces and\n * capitalizes the first character.\n *\n * @param {string} code a line item code\n *\n * @return {string} returns the line item code humanized\n */\nexport const humanizeLineItemCode = code => {\n  if (!/^line-item\\/.+/.test(code)) {\n    throw new Error(`Invalid line item code: ${code}`);\n  }\n  const lowercase = code.replace(/^line-item\\//, '').replace(/-/g, ' ');\n\n  return lowercase.charAt(0).toUpperCase() + lowercase.slice(1);\n};\n"]},"metadata":{},"sourceType":"module"}