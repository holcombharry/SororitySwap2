{"ast":null,"code":"var _jsxFileName = \"/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/containers/ContactDetailsPage/ContactDetailsForm/ContactDetailsForm.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport isEqual from 'lodash/isEqual';\nimport classNames from 'classnames';\nimport { Form as FinalForm } from 'react-final-form';\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\nimport { propTypes } from '../../../util/types';\nimport * as validators from '../../../util/validators';\nimport { ensureCurrentUser } from '../../../util/data';\nimport { isChangeEmailTakenError, isChangeEmailWrongPassword, isTooManyEmailVerificationRequestsError } from '../../../util/errors';\nimport { FieldPhoneNumberInput, Form, PrimaryButton, FieldTextInput } from '../../../components';\nimport css from './ContactDetailsForm.module.css';\nconst SHOW_EMAIL_SENT_TIMEOUT = 2000;\n\nclass ContactDetailsFormComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showVerificationEmailSentMessage: false,\n      showResetPasswordMessage: false\n    };\n    this.emailSentTimeoutId = null;\n    this.handleResendVerificationEmail = this.handleResendVerificationEmail.bind(this);\n    this.handleResetPassword = this.handleResetPassword.bind(this);\n    this.submittedValues = {};\n  }\n\n  componentWillUnmount() {\n    window.clearTimeout(this.emailSentTimeoutId);\n  }\n\n  handleResendVerificationEmail() {\n    this.setState({\n      showVerificationEmailSentMessage: true\n    });\n    this.props.onResendVerificationEmail().then(() => {\n      // show \"verification email sent\" text for a bit longer.\n      this.emailSentTimeoutId = window.setTimeout(() => {\n        this.setState({\n          showVerificationEmailSentMessage: false\n        });\n      }, SHOW_EMAIL_SENT_TIMEOUT);\n    });\n  }\n\n  handleResetPassword() {\n    this.setState({\n      showResetPasswordMessage: true\n    });\n    const email = this.props.currentUser.attributes.email;\n    this.props.onResetPassword(email);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(FinalForm, Object.assign({}, this.props, {\n      render: fieldRenderProps => {\n        const {\n          rootClassName,\n          className,\n          saveEmailError,\n          savePhoneNumberError,\n          currentUser,\n          formId,\n          handleSubmit,\n          inProgress,\n          intl,\n          invalid,\n          sendVerificationEmailError,\n          sendVerificationEmailInProgress,\n          resetPasswordInProgress,\n          values\n        } = fieldRenderProps;\n        const {\n          email,\n          phoneNumber\n        } = values;\n        const user = ensureCurrentUser(currentUser);\n\n        if (!user.id) {\n          return null;\n        }\n\n        const {\n          email: currentEmail,\n          emailVerified,\n          pendingEmail,\n          profile\n        } = user.attributes; // email\n        // has the email changed\n\n        const emailChanged = currentEmail !== email;\n        const emailLabel = intl.formatMessage({\n          id: 'ContactDetailsForm.emailLabel'\n        });\n        const emailPlaceholder = currentEmail || '';\n        const emailRequiredMessage = intl.formatMessage({\n          id: 'ContactDetailsForm.emailRequired'\n        });\n        const emailRequired = validators.required(emailRequiredMessage);\n        const emailInvalidMessage = intl.formatMessage({\n          id: 'ContactDetailsForm.emailInvalid'\n        });\n        const emailValid = validators.emailFormatValid(emailInvalidMessage);\n        const tooManyVerificationRequests = isTooManyEmailVerificationRequestsError(sendVerificationEmailError);\n        const emailTouched = this.submittedValues.email !== values.email;\n        const emailTakenErrorText = isChangeEmailTakenError(saveEmailError) ? intl.formatMessage({\n          id: 'ContactDetailsForm.emailTakenError'\n        }) : null;\n        let resendEmailMessage = null;\n\n        if (tooManyVerificationRequests) {\n          resendEmailMessage = /*#__PURE__*/React.createElement(\"span\", {\n            className: css.tooMany,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(FormattedMessage, {\n            id: \"ContactDetailsForm.tooManyVerificationRequests\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 17\n            }\n          }));\n        } else if (sendVerificationEmailInProgress || this.state.showVerificationEmailSentMessage) {\n          resendEmailMessage = /*#__PURE__*/React.createElement(\"span\", {\n            className: css.emailSent,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(FormattedMessage, {\n            id: \"ContactDetailsForm.emailSent\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 17\n            }\n          }));\n        } else {\n          resendEmailMessage = /*#__PURE__*/React.createElement(\"span\", {\n            className: css.helperLink,\n            onClick: this.handleResendVerificationEmail,\n            role: \"button\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(FormattedMessage, {\n            id: \"ContactDetailsForm.resendEmailVerificationText\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 17\n            }\n          }));\n        } // Email status info: unverified, verified and pending email (aka changed unverified email)\n\n\n        let emailVerifiedInfo = null;\n\n        if (emailVerified && !pendingEmail && !emailChanged) {\n          // Current email is verified and there's no pending unverified email\n          emailVerifiedInfo = /*#__PURE__*/React.createElement(\"span\", {\n            className: css.emailVerified,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(FormattedMessage, {\n            id: \"ContactDetailsForm.emailVerified\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 17\n            }\n          }));\n        } else if (!emailVerified && !pendingEmail) {\n          // Current email is unverified. This is the email given in sign up form\n          emailVerifiedInfo = /*#__PURE__*/React.createElement(\"span\", {\n            className: css.emailUnverified,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(FormattedMessage, {\n            id: \"ContactDetailsForm.emailUnverified\",\n            values: {\n              resendEmailMessage\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 17\n            }\n          }));\n        } else if (pendingEmail) {\n          // Current email has been tried to change, but the new address is not yet verified\n          const pendingEmailStyled = /*#__PURE__*/React.createElement(\"span\", {\n            className: css.emailStyle,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 40\n            }\n          }, pendingEmail);\n          const pendingEmailCheckInbox = /*#__PURE__*/React.createElement(\"span\", {\n            className: css.checkInbox,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(FormattedMessage, {\n            id: \"ContactDetailsForm.pendingEmailCheckInbox\",\n            values: {\n              pendingEmail: pendingEmailStyled\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 17\n            }\n          }));\n          emailVerifiedInfo = /*#__PURE__*/React.createElement(\"span\", {\n            className: css.pendingEmailUnverified,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(FormattedMessage, {\n            id: \"ContactDetailsForm.pendingEmailUnverified\",\n            values: {\n              pendingEmailCheckInbox,\n              resendEmailMessage\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 17\n            }\n          }));\n        } // phone\n\n\n        const protectedData = profile.protectedData || {};\n        const currentPhoneNumber = protectedData.phoneNumber; // has the phone number changed\n\n        const phoneNumberChanged = currentPhoneNumber !== phoneNumber;\n        const phonePlaceholder = intl.formatMessage({\n          id: 'ContactDetailsForm.phonePlaceholder'\n        });\n        const phoneLabel = intl.formatMessage({\n          id: 'ContactDetailsForm.phoneLabel'\n        }); // password\n\n        const passwordLabel = intl.formatMessage({\n          id: 'ContactDetailsForm.passwordLabel'\n        });\n        const passwordPlaceholder = intl.formatMessage({\n          id: 'ContactDetailsForm.passwordPlaceholder'\n        });\n        const passwordRequiredMessage = intl.formatMessage({\n          id: 'ContactDetailsForm.passwordRequired'\n        });\n        const passwordRequired = validators.requiredStringNoTrim(passwordRequiredMessage);\n        const passwordMinLengthMessage = intl.formatMessage({\n          id: 'ContactDetailsForm.passwordTooShort'\n        }, {\n          minLength: validators.PASSWORD_MIN_LENGTH\n        });\n        const passwordMinLength = validators.minLength(passwordMinLengthMessage, validators.PASSWORD_MIN_LENGTH);\n        const passwordValidators = emailChanged ? validators.composeValidators(passwordRequired, passwordMinLength) : null;\n        const passwordFailedMessage = intl.formatMessage({\n          id: 'ContactDetailsForm.passwordFailed'\n        });\n        const passwordTouched = this.submittedValues.currentPassword !== values.currentPassword;\n        const passwordErrorText = isChangeEmailWrongPassword(saveEmailError) ? passwordFailedMessage : null;\n        const confirmClasses = classNames(css.confirmChangesSection, {\n          [css.confirmChangesSectionVisible]: emailChanged\n        }); // generic error\n\n        const isGenericEmailError = saveEmailError && !(emailTakenErrorText || passwordErrorText);\n        let genericError = null;\n\n        if (isGenericEmailError && savePhoneNumberError) {\n          genericError = /*#__PURE__*/React.createElement(\"span\", {\n            className: css.error,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(FormattedMessage, {\n            id: \"ContactDetailsForm.genericFailure\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 17\n            }\n          }));\n        } else if (isGenericEmailError) {\n          genericError = /*#__PURE__*/React.createElement(\"span\", {\n            className: css.error,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(FormattedMessage, {\n            id: \"ContactDetailsForm.genericEmailFailure\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 17\n            }\n          }));\n        } else if (savePhoneNumberError) {\n          genericError = /*#__PURE__*/React.createElement(\"span\", {\n            className: css.error,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(FormattedMessage, {\n            id: \"ContactDetailsForm.genericPhoneNumberFailure\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 17\n            }\n          }));\n        }\n\n        const sendPasswordLink = /*#__PURE__*/React.createElement(\"span\", {\n          className: css.helperLink,\n          onClick: this.handleResetPassword,\n          role: \"button\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"ContactDetailsForm.resetPasswordLinkText\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 15\n          }\n        }));\n        const resendPasswordLink = /*#__PURE__*/React.createElement(\"span\", {\n          className: css.helperLink,\n          onClick: this.handleResetPassword,\n          role: \"button\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"ContactDetailsForm.resendPasswordLinkText\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 15\n          }\n        }));\n        const resetPasswordLink = this.state.showResetPasswordMessage || resetPasswordInProgress ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"ContactDetailsForm.resetPasswordLinkSent\",\n          values: {\n            email: /*#__PURE__*/React.createElement(\"span\", {\n              className: css.emailStyle,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 285,\n                columnNumber: 28\n              }\n            }, currentUser.attributes.email)\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 17\n          }\n        }), ' ', resendPasswordLink) : sendPasswordLink;\n        const classes = classNames(rootClassName || css.root, className);\n        const submittedOnce = Object.keys(this.submittedValues).length > 0;\n        const pristineSinceLastSubmit = submittedOnce && isEqual(values, this.submittedValues);\n        const submitDisabled = invalid || pristineSinceLastSubmit || inProgress || !(emailChanged || phoneNumberChanged);\n        return /*#__PURE__*/React.createElement(Form, {\n          className: classes,\n          onSubmit: e => {\n            this.submittedValues = values;\n            handleSubmit(e);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: css.contactDetailsSection,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(FieldTextInput, {\n          type: \"email\",\n          name: \"email\",\n          id: formId ? `${formId}.email` : 'email',\n          label: emailLabel,\n          placeholder: emailPlaceholder,\n          validate: validators.composeValidators(emailRequired, emailValid),\n          customErrorText: emailTouched ? null : emailTakenErrorText,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 17\n          }\n        }), emailVerifiedInfo, /*#__PURE__*/React.createElement(FieldPhoneNumberInput, {\n          className: css.phone,\n          name: \"phoneNumber\",\n          id: formId ? `${formId}.phoneNumber` : 'phoneNumber',\n          label: phoneLabel,\n          placeholder: phonePlaceholder,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 17\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          className: confirmClasses,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(\"h3\", {\n          className: css.confirmChangesTitle,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"ContactDetailsForm.confirmChangesTitle\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 19\n          }\n        })), /*#__PURE__*/React.createElement(\"p\", {\n          className: css.confirmChangesInfo,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"ContactDetailsForm.confirmChangesInfo\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 19\n          }\n        }), /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 19\n          }\n        }), /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"ContactDetailsForm.resetPasswordInfo\",\n          values: {\n            resetPasswordLink\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 19\n          }\n        })), /*#__PURE__*/React.createElement(FieldTextInput, {\n          className: css.password,\n          type: \"password\",\n          name: \"currentPassword\",\n          id: formId ? `${formId}.currentPassword` : 'currentPassword',\n          autoComplete: \"current-password\",\n          label: passwordLabel,\n          placeholder: passwordPlaceholder,\n          validate: passwordValidators,\n          customErrorText: passwordTouched ? null : passwordErrorText,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 17\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          className: css.bottomWrapper,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 15\n          }\n        }, genericError, /*#__PURE__*/React.createElement(PrimaryButton, {\n          type: \"submit\",\n          inProgress: inProgress,\n          ready: pristineSinceLastSubmit,\n          disabled: submitDisabled,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"ContactDetailsForm.saveChanges\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 19\n          }\n        }))));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}\n\nContactDetailsFormComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  formId: null,\n  saveEmailError: null,\n  savePhoneNumberError: null,\n  inProgress: false,\n  sendVerificationEmailError: null,\n  sendVerificationEmailInProgress: false,\n  email: null,\n  phoneNumber: null,\n  resetPasswordInProgress: false,\n  resetPasswordError: null\n};\nconst {\n  bool,\n  func,\n  string\n} = PropTypes;\nContactDetailsFormComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  formId: string,\n  saveEmailError: propTypes.error,\n  savePhoneNumberError: propTypes.error,\n  inProgress: bool,\n  intl: intlShape.isRequired,\n  onResendVerificationEmail: func.isRequired,\n  ready: bool.isRequired,\n  sendVerificationEmailError: propTypes.error,\n  sendVerificationEmailInProgress: bool,\n  resetPasswordInProgress: bool,\n  resetPasswordError: propTypes.error\n};\nconst ContactDetailsForm = compose(injectIntl)(ContactDetailsFormComponent);\nContactDetailsForm.displayName = 'ContactDetailsForm';\nexport default ContactDetailsForm;","map":{"version":3,"sources":["/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/containers/ContactDetailsPage/ContactDetailsForm/ContactDetailsForm.js"],"names":["React","Component","PropTypes","compose","isEqual","classNames","Form","FinalForm","FormattedMessage","injectIntl","intlShape","propTypes","validators","ensureCurrentUser","isChangeEmailTakenError","isChangeEmailWrongPassword","isTooManyEmailVerificationRequestsError","FieldPhoneNumberInput","PrimaryButton","FieldTextInput","css","SHOW_EMAIL_SENT_TIMEOUT","ContactDetailsFormComponent","constructor","props","state","showVerificationEmailSentMessage","showResetPasswordMessage","emailSentTimeoutId","handleResendVerificationEmail","bind","handleResetPassword","submittedValues","componentWillUnmount","window","clearTimeout","setState","onResendVerificationEmail","then","setTimeout","email","currentUser","attributes","onResetPassword","render","fieldRenderProps","rootClassName","className","saveEmailError","savePhoneNumberError","formId","handleSubmit","inProgress","intl","invalid","sendVerificationEmailError","sendVerificationEmailInProgress","resetPasswordInProgress","values","phoneNumber","user","id","currentEmail","emailVerified","pendingEmail","profile","emailChanged","emailLabel","formatMessage","emailPlaceholder","emailRequiredMessage","emailRequired","required","emailInvalidMessage","emailValid","emailFormatValid","tooManyVerificationRequests","emailTouched","emailTakenErrorText","resendEmailMessage","tooMany","emailSent","helperLink","emailVerifiedInfo","emailUnverified","pendingEmailStyled","emailStyle","pendingEmailCheckInbox","checkInbox","pendingEmailUnverified","protectedData","currentPhoneNumber","phoneNumberChanged","phonePlaceholder","phoneLabel","passwordLabel","passwordPlaceholder","passwordRequiredMessage","passwordRequired","requiredStringNoTrim","passwordMinLengthMessage","minLength","PASSWORD_MIN_LENGTH","passwordMinLength","passwordValidators","composeValidators","passwordFailedMessage","passwordTouched","currentPassword","passwordErrorText","confirmClasses","confirmChangesSection","confirmChangesSectionVisible","isGenericEmailError","genericError","error","sendPasswordLink","resendPasswordLink","resetPasswordLink","classes","root","submittedOnce","Object","keys","length","pristineSinceLastSubmit","submitDisabled","e","contactDetailsSection","phone","confirmChangesTitle","confirmChangesInfo","password","bottomWrapper","defaultProps","resetPasswordError","bool","func","string","isRequired","ready","ContactDetailsForm","displayName"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,IAAI,IAAIC,SAAjB,QAAkC,kBAAlC;AAEA,SAASC,gBAAT,EAA2BC,UAA3B,EAAuCC,SAAvC,QAAwD,yBAAxD;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,OAAO,KAAKC,UAAZ,MAA4B,0BAA5B;AACA,SAASC,iBAAT,QAAkC,oBAAlC;AACA,SACEC,uBADF,EAEEC,0BAFF,EAGEC,uCAHF,QAIO,sBAJP;AAMA,SAASC,qBAAT,EAAgCX,IAAhC,EAAsCY,aAAtC,EAAqDC,cAArD,QAA2E,qBAA3E;AAEA,OAAOC,GAAP,MAAgB,iCAAhB;AAEA,MAAMC,uBAAuB,GAAG,IAAhC;;AAEA,MAAMC,2BAAN,SAA0CrB,SAA1C,CAAoD;AAClDsB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,gCAAgC,EAAE,KAApC;AAA2CC,MAAAA,wBAAwB,EAAE;AAArE,KAAb;AACA,SAAKC,kBAAL,GAA0B,IAA1B;AACA,SAAKC,6BAAL,GAAqC,KAAKA,6BAAL,CAAmCC,IAAnC,CAAwC,IAAxC,CAArC;AACA,SAAKC,mBAAL,GAA2B,KAAKA,mBAAL,CAAyBD,IAAzB,CAA8B,IAA9B,CAA3B;AACA,SAAKE,eAAL,GAAuB,EAAvB;AACD;;AAEDC,EAAAA,oBAAoB,GAAG;AACrBC,IAAAA,MAAM,CAACC,YAAP,CAAoB,KAAKP,kBAAzB;AACD;;AAEDC,EAAAA,6BAA6B,GAAG;AAC9B,SAAKO,QAAL,CAAc;AAAEV,MAAAA,gCAAgC,EAAE;AAApC,KAAd;AAEA,SAAKF,KAAL,CAAWa,yBAAX,GAAuCC,IAAvC,CAA4C,MAAM;AAChD;AACA,WAAKV,kBAAL,GAA0BM,MAAM,CAACK,UAAP,CAAkB,MAAM;AAChD,aAAKH,QAAL,CAAc;AAAEV,UAAAA,gCAAgC,EAAE;AAApC,SAAd;AACD,OAFyB,EAEvBL,uBAFuB,CAA1B;AAGD,KALD;AAMD;;AAEDU,EAAAA,mBAAmB,GAAG;AACpB,SAAKK,QAAL,CAAc;AAAET,MAAAA,wBAAwB,EAAE;AAA5B,KAAd;AACA,UAAMa,KAAK,GAAG,KAAKhB,KAAL,CAAWiB,WAAX,CAAuBC,UAAvB,CAAkCF,KAAhD;AACA,SAAKhB,KAAL,CAAWmB,eAAX,CAA2BH,KAA3B;AACD;;AAEDI,EAAAA,MAAM,GAAG;AACP,wBACE,oBAAC,SAAD,oBACM,KAAKpB,KADX;AAEE,MAAA,MAAM,EAAEqB,gBAAgB,IAAI;AAC1B,cAAM;AACJC,UAAAA,aADI;AAEJC,UAAAA,SAFI;AAGJC,UAAAA,cAHI;AAIJC,UAAAA,oBAJI;AAKJR,UAAAA,WALI;AAMJS,UAAAA,MANI;AAOJC,UAAAA,YAPI;AAQJC,UAAAA,UARI;AASJC,UAAAA,IATI;AAUJC,UAAAA,OAVI;AAWJC,UAAAA,0BAXI;AAYJC,UAAAA,+BAZI;AAaJC,UAAAA,uBAbI;AAcJC,UAAAA;AAdI,YAeFb,gBAfJ;AAgBA,cAAM;AAAEL,UAAAA,KAAF;AAASmB,UAAAA;AAAT,YAAyBD,MAA/B;AAEA,cAAME,IAAI,GAAG/C,iBAAiB,CAAC4B,WAAD,CAA9B;;AAEA,YAAI,CAACmB,IAAI,CAACC,EAAV,EAAc;AACZ,iBAAO,IAAP;AACD;;AAED,cAAM;AAAErB,UAAAA,KAAK,EAAEsB,YAAT;AAAuBC,UAAAA,aAAvB;AAAsCC,UAAAA,YAAtC;AAAoDC,UAAAA;AAApD,YAAgEL,IAAI,CAAClB,UAA3E,CAzB0B,CA2B1B;AAEA;;AACA,cAAMwB,YAAY,GAAGJ,YAAY,KAAKtB,KAAtC;AAEA,cAAM2B,UAAU,GAAGd,IAAI,CAACe,aAAL,CAAmB;AACpCP,UAAAA,EAAE,EAAE;AADgC,SAAnB,CAAnB;AAIA,cAAMQ,gBAAgB,GAAGP,YAAY,IAAI,EAAzC;AAEA,cAAMQ,oBAAoB,GAAGjB,IAAI,CAACe,aAAL,CAAmB;AAC9CP,UAAAA,EAAE,EAAE;AAD0C,SAAnB,CAA7B;AAGA,cAAMU,aAAa,GAAG3D,UAAU,CAAC4D,QAAX,CAAoBF,oBAApB,CAAtB;AACA,cAAMG,mBAAmB,GAAGpB,IAAI,CAACe,aAAL,CAAmB;AAC7CP,UAAAA,EAAE,EAAE;AADyC,SAAnB,CAA5B;AAGA,cAAMa,UAAU,GAAG9D,UAAU,CAAC+D,gBAAX,CAA4BF,mBAA5B,CAAnB;AAEA,cAAMG,2BAA2B,GAAG5D,uCAAuC,CACzEuC,0BADyE,CAA3E;AAIA,cAAMsB,YAAY,GAAG,KAAK7C,eAAL,CAAqBQ,KAArB,KAA+BkB,MAAM,CAAClB,KAA3D;AACA,cAAMsC,mBAAmB,GAAGhE,uBAAuB,CAACkC,cAAD,CAAvB,GACxBK,IAAI,CAACe,aAAL,CAAmB;AAAEP,UAAAA,EAAE,EAAE;AAAN,SAAnB,CADwB,GAExB,IAFJ;AAIA,YAAIkB,kBAAkB,GAAG,IAAzB;;AACA,YAAIH,2BAAJ,EAAiC;AAC/BG,UAAAA,kBAAkB,gBAChB;AAAM,YAAA,SAAS,EAAE3D,GAAG,CAAC4D,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACE,oBAAC,gBAAD;AAAkB,YAAA,EAAE,EAAC,gDAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CADF;AAKD,SAND,MAMO,IACLxB,+BAA+B,IAC/B,KAAK/B,KAAL,CAAWC,gCAFN,EAGL;AACAqD,UAAAA,kBAAkB,gBAChB;AAAM,YAAA,SAAS,EAAE3D,GAAG,CAAC6D,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACE,oBAAC,gBAAD;AAAkB,YAAA,EAAE,EAAC,8BAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CADF;AAKD,SATM,MASA;AACLF,UAAAA,kBAAkB,gBAChB;AACE,YAAA,SAAS,EAAE3D,GAAG,CAAC8D,UADjB;AAEE,YAAA,OAAO,EAAE,KAAKrD,6BAFhB;AAGE,YAAA,IAAI,EAAC,QAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAKE,oBAAC,gBAAD;AAAkB,YAAA,EAAE,EAAC,gDAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,CADF;AASD,SAlFyB,CAoF1B;;;AACA,YAAIsD,iBAAiB,GAAG,IAAxB;;AAEA,YAAIpB,aAAa,IAAI,CAACC,YAAlB,IAAkC,CAACE,YAAvC,EAAqD;AACnD;AACAiB,UAAAA,iBAAiB,gBACf;AAAM,YAAA,SAAS,EAAE/D,GAAG,CAAC2C,aAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACE,oBAAC,gBAAD;AAAkB,YAAA,EAAE,EAAC,kCAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CADF;AAKD,SAPD,MAOO,IAAI,CAACA,aAAD,IAAkB,CAACC,YAAvB,EAAqC;AAC1C;AAEAmB,UAAAA,iBAAiB,gBACf;AAAM,YAAA,SAAS,EAAE/D,GAAG,CAACgE,eAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACE,oBAAC,gBAAD;AACE,YAAA,EAAE,EAAC,oCADL;AAEE,YAAA,MAAM,EAAE;AAAEL,cAAAA;AAAF,aAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CADF;AAQD,SAXM,MAWA,IAAIf,YAAJ,EAAkB;AACvB;AAEA,gBAAMqB,kBAAkB,gBAAG;AAAM,YAAA,SAAS,EAAEjE,GAAG,CAACkE,UAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAkCtB,YAAlC,CAA3B;AACA,gBAAMuB,sBAAsB,gBAC1B;AAAM,YAAA,SAAS,EAAEnE,GAAG,CAACoE,UAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACE,oBAAC,gBAAD;AACE,YAAA,EAAE,EAAC,2CADL;AAEE,YAAA,MAAM,EAAE;AAAExB,cAAAA,YAAY,EAAEqB;AAAhB,aAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CADF;AASAF,UAAAA,iBAAiB,gBACf;AAAM,YAAA,SAAS,EAAE/D,GAAG,CAACqE,sBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACE,oBAAC,gBAAD;AACE,YAAA,EAAE,EAAC,2CADL;AAEE,YAAA,MAAM,EAAE;AAAEF,cAAAA,sBAAF;AAA0BR,cAAAA;AAA1B,aAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CADF;AAQD,SA9HyB,CAgI1B;;;AACA,cAAMW,aAAa,GAAGzB,OAAO,CAACyB,aAAR,IAAyB,EAA/C;AACA,cAAMC,kBAAkB,GAAGD,aAAa,CAAC/B,WAAzC,CAlI0B,CAoI1B;;AACA,cAAMiC,kBAAkB,GAAGD,kBAAkB,KAAKhC,WAAlD;AAEA,cAAMkC,gBAAgB,GAAGxC,IAAI,CAACe,aAAL,CAAmB;AAC1CP,UAAAA,EAAE,EAAE;AADsC,SAAnB,CAAzB;AAGA,cAAMiC,UAAU,GAAGzC,IAAI,CAACe,aAAL,CAAmB;AAAEP,UAAAA,EAAE,EAAE;AAAN,SAAnB,CAAnB,CA1I0B,CA4I1B;;AACA,cAAMkC,aAAa,GAAG1C,IAAI,CAACe,aAAL,CAAmB;AACvCP,UAAAA,EAAE,EAAE;AADmC,SAAnB,CAAtB;AAGA,cAAMmC,mBAAmB,GAAG3C,IAAI,CAACe,aAAL,CAAmB;AAC7CP,UAAAA,EAAE,EAAE;AADyC,SAAnB,CAA5B;AAGA,cAAMoC,uBAAuB,GAAG5C,IAAI,CAACe,aAAL,CAAmB;AACjDP,UAAAA,EAAE,EAAE;AAD6C,SAAnB,CAAhC;AAIA,cAAMqC,gBAAgB,GAAGtF,UAAU,CAACuF,oBAAX,CAAgCF,uBAAhC,CAAzB;AAEA,cAAMG,wBAAwB,GAAG/C,IAAI,CAACe,aAAL,CAC/B;AACEP,UAAAA,EAAE,EAAE;AADN,SAD+B,EAI/B;AACEwC,UAAAA,SAAS,EAAEzF,UAAU,CAAC0F;AADxB,SAJ+B,CAAjC;AASA,cAAMC,iBAAiB,GAAG3F,UAAU,CAACyF,SAAX,CACxBD,wBADwB,EAExBxF,UAAU,CAAC0F,mBAFa,CAA1B;AAKA,cAAME,kBAAkB,GAAGtC,YAAY,GACnCtD,UAAU,CAAC6F,iBAAX,CAA6BP,gBAA7B,EAA+CK,iBAA/C,CADmC,GAEnC,IAFJ;AAIA,cAAMG,qBAAqB,GAAGrD,IAAI,CAACe,aAAL,CAAmB;AAC/CP,UAAAA,EAAE,EAAE;AAD2C,SAAnB,CAA9B;AAGA,cAAM8C,eAAe,GAAG,KAAK3E,eAAL,CAAqB4E,eAArB,KAAyClD,MAAM,CAACkD,eAAxE;AACA,cAAMC,iBAAiB,GAAG9F,0BAA0B,CAACiC,cAAD,CAA1B,GACtB0D,qBADsB,GAEtB,IAFJ;AAIA,cAAMI,cAAc,GAAGzG,UAAU,CAACe,GAAG,CAAC2F,qBAAL,EAA4B;AAC3D,WAAC3F,GAAG,CAAC4F,4BAAL,GAAoC9C;AADuB,SAA5B,CAAjC,CAnL0B,CAuL1B;;AACA,cAAM+C,mBAAmB,GAAGjE,cAAc,IAAI,EAAE8B,mBAAmB,IAAI+B,iBAAzB,CAA9C;AAEA,YAAIK,YAAY,GAAG,IAAnB;;AAEA,YAAID,mBAAmB,IAAIhE,oBAA3B,EAAiD;AAC/CiE,UAAAA,YAAY,gBACV;AAAM,YAAA,SAAS,EAAE9F,GAAG,CAAC+F,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACE,oBAAC,gBAAD;AAAkB,YAAA,EAAE,EAAC,mCAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CADF;AAKD,SAND,MAMO,IAAIF,mBAAJ,EAAyB;AAC9BC,UAAAA,YAAY,gBACV;AAAM,YAAA,SAAS,EAAE9F,GAAG,CAAC+F,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACE,oBAAC,gBAAD;AAAkB,YAAA,EAAE,EAAC,wCAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CADF;AAKD,SANM,MAMA,IAAIlE,oBAAJ,EAA0B;AAC/BiE,UAAAA,YAAY,gBACV;AAAM,YAAA,SAAS,EAAE9F,GAAG,CAAC+F,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACE,oBAAC,gBAAD;AAAkB,YAAA,EAAE,EAAC,8CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CADF;AAKD;;AAED,cAAMC,gBAAgB,gBACpB;AAAM,UAAA,SAAS,EAAEhG,GAAG,CAAC8D,UAArB;AAAiC,UAAA,OAAO,EAAE,KAAKnD,mBAA/C;AAAoE,UAAA,IAAI,EAAC,QAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE,oBAAC,gBAAD;AAAkB,UAAA,EAAE,EAAC,0CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF;AAMA,cAAMsF,kBAAkB,gBACtB;AAAM,UAAA,SAAS,EAAEjG,GAAG,CAAC8D,UAArB;AAAiC,UAAA,OAAO,EAAE,KAAKnD,mBAA/C;AAAoE,UAAA,IAAI,EAAC,QAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE,oBAAC,gBAAD;AAAkB,UAAA,EAAE,EAAC,2CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF;AAMA,cAAMuF,iBAAiB,GACrB,KAAK7F,KAAL,CAAWE,wBAAX,IAAuC8B,uBAAvC,gBACE,uDACE,oBAAC,gBAAD;AACE,UAAA,EAAE,EAAC,0CADL;AAEE,UAAA,MAAM,EAAE;AACNjB,YAAAA,KAAK,eAAE;AAAM,cAAA,SAAS,EAAEpB,GAAG,CAACkE,UAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAkC7C,WAAW,CAACC,UAAZ,CAAuBF,KAAzD;AADD,WAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,EAMK,GANL,EAOG6E,kBAPH,CADF,GAWED,gBAZJ;AAeA,cAAMG,OAAO,GAAGlH,UAAU,CAACyC,aAAa,IAAI1B,GAAG,CAACoG,IAAtB,EAA4BzE,SAA5B,CAA1B;AACA,cAAM0E,aAAa,GAAGC,MAAM,CAACC,IAAP,CAAY,KAAK3F,eAAjB,EAAkC4F,MAAlC,GAA2C,CAAjE;AACA,cAAMC,uBAAuB,GAAGJ,aAAa,IAAIrH,OAAO,CAACsD,MAAD,EAAS,KAAK1B,eAAd,CAAxD;AACA,cAAM8F,cAAc,GAClBxE,OAAO,IACPuE,uBADA,IAEAzE,UAFA,IAGA,EAAEc,YAAY,IAAI0B,kBAAlB,CAJF;AAMA,4BACE,oBAAC,IAAD;AACE,UAAA,SAAS,EAAE2B,OADb;AAEE,UAAA,QAAQ,EAAEQ,CAAC,IAAI;AACb,iBAAK/F,eAAL,GAAuB0B,MAAvB;AACAP,YAAAA,YAAY,CAAC4E,CAAD,CAAZ;AACD,WALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAOE;AAAK,UAAA,SAAS,EAAE3G,GAAG,CAAC4G,qBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE,oBAAC,cAAD;AACE,UAAA,IAAI,EAAC,OADP;AAEE,UAAA,IAAI,EAAC,OAFP;AAGE,UAAA,EAAE,EAAE9E,MAAM,GAAI,GAAEA,MAAO,QAAb,GAAuB,OAHnC;AAIE,UAAA,KAAK,EAAEiB,UAJT;AAKE,UAAA,WAAW,EAAEE,gBALf;AAME,UAAA,QAAQ,EAAEzD,UAAU,CAAC6F,iBAAX,CAA6BlC,aAA7B,EAA4CG,UAA5C,CANZ;AAOE,UAAA,eAAe,EAAEG,YAAY,GAAG,IAAH,GAAUC,mBAPzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,EAUGK,iBAVH,eAWE,oBAAC,qBAAD;AACE,UAAA,SAAS,EAAE/D,GAAG,CAAC6G,KADjB;AAEE,UAAA,IAAI,EAAC,aAFP;AAGE,UAAA,EAAE,EAAE/E,MAAM,GAAI,GAAEA,MAAO,cAAb,GAA6B,aAHzC;AAIE,UAAA,KAAK,EAAE4C,UAJT;AAKE,UAAA,WAAW,EAAED,gBALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAXF,CAPF,eA2BE;AAAK,UAAA,SAAS,EAAEiB,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE;AAAI,UAAA,SAAS,EAAE1F,GAAG,CAAC8G,mBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE,oBAAC,gBAAD;AAAkB,UAAA,EAAE,EAAC,wCAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF,eAIE;AAAG,UAAA,SAAS,EAAE9G,GAAG,CAAC+G,kBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE,oBAAC,gBAAD;AAAkB,UAAA,EAAE,EAAC,uCAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,eAGE,oBAAC,gBAAD;AACE,UAAA,EAAE,EAAC,sCADL;AAEE,UAAA,MAAM,EAAE;AAAEb,YAAAA;AAAF,WAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHF,CAJF,eAaE,oBAAC,cAAD;AACE,UAAA,SAAS,EAAElG,GAAG,CAACgH,QADjB;AAEE,UAAA,IAAI,EAAC,UAFP;AAGE,UAAA,IAAI,EAAC,iBAHP;AAIE,UAAA,EAAE,EAAElF,MAAM,GAAI,GAAEA,MAAO,kBAAb,GAAiC,iBAJ7C;AAKE,UAAA,YAAY,EAAC,kBALf;AAME,UAAA,KAAK,EAAE6C,aANT;AAOE,UAAA,WAAW,EAAEC,mBAPf;AAQE,UAAA,QAAQ,EAAEQ,kBARZ;AASE,UAAA,eAAe,EAAEG,eAAe,GAAG,IAAH,GAAUE,iBAT5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAbF,CA3BF,eAoDE;AAAK,UAAA,SAAS,EAAEzF,GAAG,CAACiH,aAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGnB,YADH,eAEE,oBAAC,aAAD;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,UAAU,EAAE9D,UAFd;AAGE,UAAA,KAAK,EAAEyE,uBAHT;AAIE,UAAA,QAAQ,EAAEC,cAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAME,oBAAC,gBAAD;AAAkB,UAAA,EAAE,EAAC,gCAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UANF,CAFF,CApDF,CADF;AAkED,OAxTH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF;AA4TD;;AA5ViD;;AA+VpDxG,2BAA2B,CAACgH,YAA5B,GAA2C;AACzCxF,EAAAA,aAAa,EAAE,IAD0B;AAEzCC,EAAAA,SAAS,EAAE,IAF8B;AAGzCG,EAAAA,MAAM,EAAE,IAHiC;AAIzCF,EAAAA,cAAc,EAAE,IAJyB;AAKzCC,EAAAA,oBAAoB,EAAE,IALmB;AAMzCG,EAAAA,UAAU,EAAE,KAN6B;AAOzCG,EAAAA,0BAA0B,EAAE,IAPa;AAQzCC,EAAAA,+BAA+B,EAAE,KARQ;AASzChB,EAAAA,KAAK,EAAE,IATkC;AAUzCmB,EAAAA,WAAW,EAAE,IAV4B;AAWzCF,EAAAA,uBAAuB,EAAE,KAXgB;AAYzC8E,EAAAA,kBAAkB,EAAE;AAZqB,CAA3C;AAeA,MAAM;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,IAAR;AAAcC,EAAAA;AAAd,IAAyBxI,SAA/B;AAEAoB,2BAA2B,CAACX,SAA5B,GAAwC;AACtCmC,EAAAA,aAAa,EAAE4F,MADuB;AAEtC3F,EAAAA,SAAS,EAAE2F,MAF2B;AAGtCxF,EAAAA,MAAM,EAAEwF,MAH8B;AAItC1F,EAAAA,cAAc,EAAErC,SAAS,CAACwG,KAJY;AAKtClE,EAAAA,oBAAoB,EAAEtC,SAAS,CAACwG,KALM;AAMtC/D,EAAAA,UAAU,EAAEoF,IAN0B;AAOtCnF,EAAAA,IAAI,EAAE3C,SAAS,CAACiI,UAPsB;AAQtCtG,EAAAA,yBAAyB,EAAEoG,IAAI,CAACE,UARM;AAStCC,EAAAA,KAAK,EAAEJ,IAAI,CAACG,UAT0B;AAUtCpF,EAAAA,0BAA0B,EAAE5C,SAAS,CAACwG,KAVA;AAWtC3D,EAAAA,+BAA+B,EAAEgF,IAXK;AAYtC/E,EAAAA,uBAAuB,EAAE+E,IAZa;AAatCD,EAAAA,kBAAkB,EAAE5H,SAAS,CAACwG;AAbQ,CAAxC;AAgBA,MAAM0B,kBAAkB,GAAG1I,OAAO,CAACM,UAAD,CAAP,CAAoBa,2BAApB,CAA3B;AAEAuH,kBAAkB,CAACC,WAAnB,GAAiC,oBAAjC;AAEA,eAAeD,kBAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport isEqual from 'lodash/isEqual';\nimport classNames from 'classnames';\nimport { Form as FinalForm } from 'react-final-form';\n\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\nimport { propTypes } from '../../../util/types';\nimport * as validators from '../../../util/validators';\nimport { ensureCurrentUser } from '../../../util/data';\nimport {\n  isChangeEmailTakenError,\n  isChangeEmailWrongPassword,\n  isTooManyEmailVerificationRequestsError,\n} from '../../../util/errors';\n\nimport { FieldPhoneNumberInput, Form, PrimaryButton, FieldTextInput } from '../../../components';\n\nimport css from './ContactDetailsForm.module.css';\n\nconst SHOW_EMAIL_SENT_TIMEOUT = 2000;\n\nclass ContactDetailsFormComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { showVerificationEmailSentMessage: false, showResetPasswordMessage: false };\n    this.emailSentTimeoutId = null;\n    this.handleResendVerificationEmail = this.handleResendVerificationEmail.bind(this);\n    this.handleResetPassword = this.handleResetPassword.bind(this);\n    this.submittedValues = {};\n  }\n\n  componentWillUnmount() {\n    window.clearTimeout(this.emailSentTimeoutId);\n  }\n\n  handleResendVerificationEmail() {\n    this.setState({ showVerificationEmailSentMessage: true });\n\n    this.props.onResendVerificationEmail().then(() => {\n      // show \"verification email sent\" text for a bit longer.\n      this.emailSentTimeoutId = window.setTimeout(() => {\n        this.setState({ showVerificationEmailSentMessage: false });\n      }, SHOW_EMAIL_SENT_TIMEOUT);\n    });\n  }\n\n  handleResetPassword() {\n    this.setState({ showResetPasswordMessage: true });\n    const email = this.props.currentUser.attributes.email;\n    this.props.onResetPassword(email);\n  }\n\n  render() {\n    return (\n      <FinalForm\n        {...this.props}\n        render={fieldRenderProps => {\n          const {\n            rootClassName,\n            className,\n            saveEmailError,\n            savePhoneNumberError,\n            currentUser,\n            formId,\n            handleSubmit,\n            inProgress,\n            intl,\n            invalid,\n            sendVerificationEmailError,\n            sendVerificationEmailInProgress,\n            resetPasswordInProgress,\n            values,\n          } = fieldRenderProps;\n          const { email, phoneNumber } = values;\n\n          const user = ensureCurrentUser(currentUser);\n\n          if (!user.id) {\n            return null;\n          }\n\n          const { email: currentEmail, emailVerified, pendingEmail, profile } = user.attributes;\n\n          // email\n\n          // has the email changed\n          const emailChanged = currentEmail !== email;\n\n          const emailLabel = intl.formatMessage({\n            id: 'ContactDetailsForm.emailLabel',\n          });\n\n          const emailPlaceholder = currentEmail || '';\n\n          const emailRequiredMessage = intl.formatMessage({\n            id: 'ContactDetailsForm.emailRequired',\n          });\n          const emailRequired = validators.required(emailRequiredMessage);\n          const emailInvalidMessage = intl.formatMessage({\n            id: 'ContactDetailsForm.emailInvalid',\n          });\n          const emailValid = validators.emailFormatValid(emailInvalidMessage);\n\n          const tooManyVerificationRequests = isTooManyEmailVerificationRequestsError(\n            sendVerificationEmailError\n          );\n\n          const emailTouched = this.submittedValues.email !== values.email;\n          const emailTakenErrorText = isChangeEmailTakenError(saveEmailError)\n            ? intl.formatMessage({ id: 'ContactDetailsForm.emailTakenError' })\n            : null;\n\n          let resendEmailMessage = null;\n          if (tooManyVerificationRequests) {\n            resendEmailMessage = (\n              <span className={css.tooMany}>\n                <FormattedMessage id=\"ContactDetailsForm.tooManyVerificationRequests\" />\n              </span>\n            );\n          } else if (\n            sendVerificationEmailInProgress ||\n            this.state.showVerificationEmailSentMessage\n          ) {\n            resendEmailMessage = (\n              <span className={css.emailSent}>\n                <FormattedMessage id=\"ContactDetailsForm.emailSent\" />\n              </span>\n            );\n          } else {\n            resendEmailMessage = (\n              <span\n                className={css.helperLink}\n                onClick={this.handleResendVerificationEmail}\n                role=\"button\"\n              >\n                <FormattedMessage id=\"ContactDetailsForm.resendEmailVerificationText\" />\n              </span>\n            );\n          }\n\n          // Email status info: unverified, verified and pending email (aka changed unverified email)\n          let emailVerifiedInfo = null;\n\n          if (emailVerified && !pendingEmail && !emailChanged) {\n            // Current email is verified and there's no pending unverified email\n            emailVerifiedInfo = (\n              <span className={css.emailVerified}>\n                <FormattedMessage id=\"ContactDetailsForm.emailVerified\" />\n              </span>\n            );\n          } else if (!emailVerified && !pendingEmail) {\n            // Current email is unverified. This is the email given in sign up form\n\n            emailVerifiedInfo = (\n              <span className={css.emailUnverified}>\n                <FormattedMessage\n                  id=\"ContactDetailsForm.emailUnverified\"\n                  values={{ resendEmailMessage }}\n                />\n              </span>\n            );\n          } else if (pendingEmail) {\n            // Current email has been tried to change, but the new address is not yet verified\n\n            const pendingEmailStyled = <span className={css.emailStyle}>{pendingEmail}</span>;\n            const pendingEmailCheckInbox = (\n              <span className={css.checkInbox}>\n                <FormattedMessage\n                  id=\"ContactDetailsForm.pendingEmailCheckInbox\"\n                  values={{ pendingEmail: pendingEmailStyled }}\n                />\n              </span>\n            );\n\n            emailVerifiedInfo = (\n              <span className={css.pendingEmailUnverified}>\n                <FormattedMessage\n                  id=\"ContactDetailsForm.pendingEmailUnverified\"\n                  values={{ pendingEmailCheckInbox, resendEmailMessage }}\n                />\n              </span>\n            );\n          }\n\n          // phone\n          const protectedData = profile.protectedData || {};\n          const currentPhoneNumber = protectedData.phoneNumber;\n\n          // has the phone number changed\n          const phoneNumberChanged = currentPhoneNumber !== phoneNumber;\n\n          const phonePlaceholder = intl.formatMessage({\n            id: 'ContactDetailsForm.phonePlaceholder',\n          });\n          const phoneLabel = intl.formatMessage({ id: 'ContactDetailsForm.phoneLabel' });\n\n          // password\n          const passwordLabel = intl.formatMessage({\n            id: 'ContactDetailsForm.passwordLabel',\n          });\n          const passwordPlaceholder = intl.formatMessage({\n            id: 'ContactDetailsForm.passwordPlaceholder',\n          });\n          const passwordRequiredMessage = intl.formatMessage({\n            id: 'ContactDetailsForm.passwordRequired',\n          });\n\n          const passwordRequired = validators.requiredStringNoTrim(passwordRequiredMessage);\n\n          const passwordMinLengthMessage = intl.formatMessage(\n            {\n              id: 'ContactDetailsForm.passwordTooShort',\n            },\n            {\n              minLength: validators.PASSWORD_MIN_LENGTH,\n            }\n          );\n\n          const passwordMinLength = validators.minLength(\n            passwordMinLengthMessage,\n            validators.PASSWORD_MIN_LENGTH\n          );\n\n          const passwordValidators = emailChanged\n            ? validators.composeValidators(passwordRequired, passwordMinLength)\n            : null;\n\n          const passwordFailedMessage = intl.formatMessage({\n            id: 'ContactDetailsForm.passwordFailed',\n          });\n          const passwordTouched = this.submittedValues.currentPassword !== values.currentPassword;\n          const passwordErrorText = isChangeEmailWrongPassword(saveEmailError)\n            ? passwordFailedMessage\n            : null;\n\n          const confirmClasses = classNames(css.confirmChangesSection, {\n            [css.confirmChangesSectionVisible]: emailChanged,\n          });\n\n          // generic error\n          const isGenericEmailError = saveEmailError && !(emailTakenErrorText || passwordErrorText);\n\n          let genericError = null;\n\n          if (isGenericEmailError && savePhoneNumberError) {\n            genericError = (\n              <span className={css.error}>\n                <FormattedMessage id=\"ContactDetailsForm.genericFailure\" />\n              </span>\n            );\n          } else if (isGenericEmailError) {\n            genericError = (\n              <span className={css.error}>\n                <FormattedMessage id=\"ContactDetailsForm.genericEmailFailure\" />\n              </span>\n            );\n          } else if (savePhoneNumberError) {\n            genericError = (\n              <span className={css.error}>\n                <FormattedMessage id=\"ContactDetailsForm.genericPhoneNumberFailure\" />\n              </span>\n            );\n          }\n\n          const sendPasswordLink = (\n            <span className={css.helperLink} onClick={this.handleResetPassword} role=\"button\">\n              <FormattedMessage id=\"ContactDetailsForm.resetPasswordLinkText\" />\n            </span>\n          );\n\n          const resendPasswordLink = (\n            <span className={css.helperLink} onClick={this.handleResetPassword} role=\"button\">\n              <FormattedMessage id=\"ContactDetailsForm.resendPasswordLinkText\" />\n            </span>\n          );\n\n          const resetPasswordLink =\n            this.state.showResetPasswordMessage || resetPasswordInProgress ? (\n              <>\n                <FormattedMessage\n                  id=\"ContactDetailsForm.resetPasswordLinkSent\"\n                  values={{\n                    email: <span className={css.emailStyle}>{currentUser.attributes.email}</span>,\n                  }}\n                />{' '}\n                {resendPasswordLink}\n              </>\n            ) : (\n              sendPasswordLink\n            );\n\n          const classes = classNames(rootClassName || css.root, className);\n          const submittedOnce = Object.keys(this.submittedValues).length > 0;\n          const pristineSinceLastSubmit = submittedOnce && isEqual(values, this.submittedValues);\n          const submitDisabled =\n            invalid ||\n            pristineSinceLastSubmit ||\n            inProgress ||\n            !(emailChanged || phoneNumberChanged);\n\n          return (\n            <Form\n              className={classes}\n              onSubmit={e => {\n                this.submittedValues = values;\n                handleSubmit(e);\n              }}\n            >\n              <div className={css.contactDetailsSection}>\n                <FieldTextInput\n                  type=\"email\"\n                  name=\"email\"\n                  id={formId ? `${formId}.email` : 'email'}\n                  label={emailLabel}\n                  placeholder={emailPlaceholder}\n                  validate={validators.composeValidators(emailRequired, emailValid)}\n                  customErrorText={emailTouched ? null : emailTakenErrorText}\n                />\n                {emailVerifiedInfo}\n                <FieldPhoneNumberInput\n                  className={css.phone}\n                  name=\"phoneNumber\"\n                  id={formId ? `${formId}.phoneNumber` : 'phoneNumber'}\n                  label={phoneLabel}\n                  placeholder={phonePlaceholder}\n                />\n              </div>\n\n              <div className={confirmClasses}>\n                <h3 className={css.confirmChangesTitle}>\n                  <FormattedMessage id=\"ContactDetailsForm.confirmChangesTitle\" />\n                </h3>\n                <p className={css.confirmChangesInfo}>\n                  <FormattedMessage id=\"ContactDetailsForm.confirmChangesInfo\" />\n                  <br />\n                  <FormattedMessage\n                    id=\"ContactDetailsForm.resetPasswordInfo\"\n                    values={{ resetPasswordLink }}\n                  />\n                </p>\n\n                <FieldTextInput\n                  className={css.password}\n                  type=\"password\"\n                  name=\"currentPassword\"\n                  id={formId ? `${formId}.currentPassword` : 'currentPassword'}\n                  autoComplete=\"current-password\"\n                  label={passwordLabel}\n                  placeholder={passwordPlaceholder}\n                  validate={passwordValidators}\n                  customErrorText={passwordTouched ? null : passwordErrorText}\n                />\n              </div>\n              <div className={css.bottomWrapper}>\n                {genericError}\n                <PrimaryButton\n                  type=\"submit\"\n                  inProgress={inProgress}\n                  ready={pristineSinceLastSubmit}\n                  disabled={submitDisabled}\n                >\n                  <FormattedMessage id=\"ContactDetailsForm.saveChanges\" />\n                </PrimaryButton>\n              </div>\n            </Form>\n          );\n        }}\n      />\n    );\n  }\n}\n\nContactDetailsFormComponent.defaultProps = {\n  rootClassName: null,\n  className: null,\n  formId: null,\n  saveEmailError: null,\n  savePhoneNumberError: null,\n  inProgress: false,\n  sendVerificationEmailError: null,\n  sendVerificationEmailInProgress: false,\n  email: null,\n  phoneNumber: null,\n  resetPasswordInProgress: false,\n  resetPasswordError: null,\n};\n\nconst { bool, func, string } = PropTypes;\n\nContactDetailsFormComponent.propTypes = {\n  rootClassName: string,\n  className: string,\n  formId: string,\n  saveEmailError: propTypes.error,\n  savePhoneNumberError: propTypes.error,\n  inProgress: bool,\n  intl: intlShape.isRequired,\n  onResendVerificationEmail: func.isRequired,\n  ready: bool.isRequired,\n  sendVerificationEmailError: propTypes.error,\n  sendVerificationEmailInProgress: bool,\n  resetPasswordInProgress: bool,\n  resetPasswordError: propTypes.error,\n};\n\nconst ContactDetailsForm = compose(injectIntl)(ContactDetailsFormComponent);\n\nContactDetailsForm.displayName = 'ContactDetailsForm';\n\nexport default ContactDetailsForm;\n"]},"metadata":{},"sourceType":"module"}