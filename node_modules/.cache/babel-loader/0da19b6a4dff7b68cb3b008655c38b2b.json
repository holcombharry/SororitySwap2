{"ast":null,"code":"var _jsxFileName = \"/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/containers/SearchPage/FilterPopup/FilterPopup.js\";\nimport React, { Component } from 'react';\nimport { bool, func, node, number, object, string } from 'prop-types';\nimport classNames from 'classnames';\nimport { injectIntl, intlShape } from '../../../util/reactIntl';\nimport { OutsideClickHandler } from '../../../components';\nimport FilterForm from '../FilterForm/FilterForm';\nimport css from './FilterPopup.module.css';\nconst KEY_CODE_ESCAPE = 27;\n\nclass FilterPopup extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n    this.filter = null;\n    this.filterContent = null;\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleClear = this.handleClear.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.toggleOpen = this.toggleOpen.bind(this);\n    this.positionStyleForContent = this.positionStyleForContent.bind(this);\n  }\n\n  handleSubmit(values) {\n    const {\n      onSubmit\n    } = this.props;\n    this.setState({\n      isOpen: false\n    });\n    onSubmit(values);\n  }\n\n  handleClear() {\n    const {\n      onSubmit,\n      onClear\n    } = this.props;\n    this.setState({\n      isOpen: false\n    });\n\n    if (onClear) {\n      onClear();\n    }\n\n    onSubmit(null);\n  }\n\n  handleCancel() {\n    const {\n      onSubmit,\n      onCancel,\n      initialValues\n    } = this.props;\n    this.setState({\n      isOpen: false\n    });\n\n    if (onCancel) {\n      onCancel();\n    }\n\n    onSubmit(initialValues);\n  }\n\n  handleBlur() {\n    this.setState({\n      isOpen: false\n    });\n  }\n\n  handleKeyDown(e) {\n    // Gather all escape presses to close menu\n    if (e.keyCode === KEY_CODE_ESCAPE) {\n      this.toggleOpen(false);\n    }\n  }\n\n  toggleOpen(enforcedState) {\n    if (enforcedState) {\n      this.setState({\n        isOpen: enforcedState\n      });\n    } else {\n      this.setState(prevState => ({\n        isOpen: !prevState.isOpen\n      }));\n    }\n  }\n\n  positionStyleForContent() {\n    if (this.filter && this.filterContent) {\n      // Render the filter content to the right from the menu\n      // unless there's no space in which case it is rendered\n      // to the left\n      const distanceToRight = window.innerWidth - this.filter.getBoundingClientRect().right;\n      const labelWidth = this.filter.offsetWidth;\n      const contentWidth = this.filterContent.offsetWidth;\n      const contentWidthBiggerThanLabel = contentWidth - labelWidth;\n      const renderToRight = distanceToRight > contentWidthBiggerThanLabel;\n      const contentPlacementOffset = this.props.contentPlacementOffset;\n      const offset = renderToRight ? {\n        left: contentPlacementOffset\n      } : {\n        right: contentPlacementOffset\n      }; // set a min-width if the content is narrower than the label\n\n      const minWidth = contentWidth < labelWidth ? {\n        minWidth: labelWidth\n      } : null;\n      return { ...offset,\n        ...minWidth\n      };\n    }\n\n    return {};\n  }\n\n  render() {\n    const {\n      rootClassName,\n      className,\n      popupClassName,\n      id,\n      label,\n      labelMaxWidth,\n      isSelected,\n      children,\n      initialValues,\n      keepDirtyOnReinitialize,\n      contentPlacementOffset\n    } = this.props;\n    const classes = classNames(rootClassName || css.root, className);\n    const popupClasses = classNames(css.popup, {\n      [css.isOpen]: this.state.isOpen\n    });\n    const popupSizeClasses = popupClassName || css.popupSize;\n    const labelStyles = isSelected ? css.labelSelected : css.label;\n    const labelMaxWidthMaybe = labelMaxWidth ? {\n      maxWidth: `${labelMaxWidth}px`\n    } : {};\n    const labelMaxWidthStyles = labelMaxWidth ? css.labelEllipsis : null;\n    const contentStyle = this.positionStyleForContent();\n    return /*#__PURE__*/React.createElement(OutsideClickHandler, {\n      onOutsideClick: this.handleBlur,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes,\n      onKeyDown: this.handleKeyDown,\n      ref: node => {\n        this.filter = node;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: classNames(labelStyles, labelMaxWidthStyles),\n      style: labelMaxWidthMaybe,\n      onClick: () => this.toggleOpen(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }\n    }, label), /*#__PURE__*/React.createElement(\"div\", {\n      id: id,\n      className: popupClasses,\n      ref: node => {\n        this.filterContent = node;\n      },\n      style: contentStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }\n    }, this.state.isOpen ? /*#__PURE__*/React.createElement(FilterForm, {\n      id: `${id}.form`,\n      paddingClasses: popupSizeClasses,\n      showAsPopup: true,\n      contentPlacementOffset: contentPlacementOffset,\n      initialValues: initialValues,\n      keepDirtyOnReinitialize: keepDirtyOnReinitialize,\n      onSubmit: this.handleSubmit,\n      onCancel: this.handleCancel,\n      onClear: this.handleClear,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 15\n      }\n    }, children) : null)));\n  }\n\n}\n\nFilterPopup.defaultProps = {\n  rootClassName: null,\n  className: null,\n  popupClassName: null,\n  initialValues: null,\n  keepDirtyOnReinitialize: false,\n  contentPlacementOffset: 0,\n  liveEdit: false,\n  label: null,\n  labelMaxWidth: null\n};\nFilterPopup.propTypes = {\n  rootClassName: string,\n  className: string,\n  popupClassName: string,\n  id: string.isRequired,\n  onSubmit: func.isRequired,\n  initialValues: object,\n  keepDirtyOnReinitialize: bool,\n  contentPlacementOffset: number,\n  label: string.isRequired,\n  labelMaxWidth: number,\n  isSelected: bool.isRequired,\n  children: node.isRequired,\n  // form injectIntl\n  intl: intlShape.isRequired\n};\nexport default _c = injectIntl(FilterPopup);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/containers/SearchPage/FilterPopup/FilterPopup.js"],"names":["React","Component","bool","func","node","number","object","string","classNames","injectIntl","intlShape","OutsideClickHandler","FilterForm","css","KEY_CODE_ESCAPE","FilterPopup","constructor","props","state","isOpen","filter","filterContent","handleSubmit","bind","handleClear","handleCancel","handleBlur","handleKeyDown","toggleOpen","positionStyleForContent","values","onSubmit","setState","onClear","onCancel","initialValues","e","keyCode","enforcedState","prevState","distanceToRight","window","innerWidth","getBoundingClientRect","right","labelWidth","offsetWidth","contentWidth","contentWidthBiggerThanLabel","renderToRight","contentPlacementOffset","offset","left","minWidth","render","rootClassName","className","popupClassName","id","label","labelMaxWidth","isSelected","children","keepDirtyOnReinitialize","classes","root","popupClasses","popup","popupSizeClasses","popupSize","labelStyles","labelSelected","labelMaxWidthMaybe","maxWidth","labelMaxWidthStyles","labelEllipsis","contentStyle","defaultProps","liveEdit","propTypes","isRequired","intl"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { bool, func, node, number, object, string } from 'prop-types';\nimport classNames from 'classnames';\n\nimport { injectIntl, intlShape } from '../../../util/reactIntl';\n\nimport { OutsideClickHandler } from '../../../components';\n\nimport FilterForm from '../FilterForm/FilterForm';\n\nimport css from './FilterPopup.module.css';\n\nconst KEY_CODE_ESCAPE = 27;\n\nclass FilterPopup extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { isOpen: false };\n    this.filter = null;\n    this.filterContent = null;\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleClear = this.handleClear.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.toggleOpen = this.toggleOpen.bind(this);\n    this.positionStyleForContent = this.positionStyleForContent.bind(this);\n  }\n\n  handleSubmit(values) {\n    const { onSubmit } = this.props;\n    this.setState({ isOpen: false });\n    onSubmit(values);\n  }\n\n  handleClear() {\n    const { onSubmit, onClear } = this.props;\n    this.setState({ isOpen: false });\n\n    if (onClear) {\n      onClear();\n    }\n\n    onSubmit(null);\n  }\n\n  handleCancel() {\n    const { onSubmit, onCancel, initialValues } = this.props;\n    this.setState({ isOpen: false });\n\n    if (onCancel) {\n      onCancel();\n    }\n\n    onSubmit(initialValues);\n  }\n\n  handleBlur() {\n    this.setState({ isOpen: false });\n  }\n\n  handleKeyDown(e) {\n    // Gather all escape presses to close menu\n    if (e.keyCode === KEY_CODE_ESCAPE) {\n      this.toggleOpen(false);\n    }\n  }\n\n  toggleOpen(enforcedState) {\n    if (enforcedState) {\n      this.setState({ isOpen: enforcedState });\n    } else {\n      this.setState(prevState => ({ isOpen: !prevState.isOpen }));\n    }\n  }\n\n  positionStyleForContent() {\n    if (this.filter && this.filterContent) {\n      // Render the filter content to the right from the menu\n      // unless there's no space in which case it is rendered\n      // to the left\n      const distanceToRight = window.innerWidth - this.filter.getBoundingClientRect().right;\n      const labelWidth = this.filter.offsetWidth;\n      const contentWidth = this.filterContent.offsetWidth;\n      const contentWidthBiggerThanLabel = contentWidth - labelWidth;\n      const renderToRight = distanceToRight > contentWidthBiggerThanLabel;\n      const contentPlacementOffset = this.props.contentPlacementOffset;\n\n      const offset = renderToRight\n        ? { left: contentPlacementOffset }\n        : { right: contentPlacementOffset };\n      // set a min-width if the content is narrower than the label\n      const minWidth = contentWidth < labelWidth ? { minWidth: labelWidth } : null;\n\n      return { ...offset, ...minWidth };\n    }\n    return {};\n  }\n\n  render() {\n    const {\n      rootClassName,\n      className,\n      popupClassName,\n      id,\n      label,\n      labelMaxWidth,\n      isSelected,\n      children,\n      initialValues,\n      keepDirtyOnReinitialize,\n      contentPlacementOffset,\n    } = this.props;\n\n    const classes = classNames(rootClassName || css.root, className);\n    const popupClasses = classNames(css.popup, { [css.isOpen]: this.state.isOpen });\n    const popupSizeClasses = popupClassName || css.popupSize;\n    const labelStyles = isSelected ? css.labelSelected : css.label;\n    const labelMaxWidthMaybe = labelMaxWidth ? { maxWidth: `${labelMaxWidth}px` } : {};\n    const labelMaxWidthStyles = labelMaxWidth ? css.labelEllipsis : null;\n    const contentStyle = this.positionStyleForContent();\n\n    return (\n      <OutsideClickHandler onOutsideClick={this.handleBlur}>\n        <div\n          className={classes}\n          onKeyDown={this.handleKeyDown}\n          ref={node => {\n            this.filter = node;\n          }}\n        >\n          <button\n            className={classNames(labelStyles, labelMaxWidthStyles)}\n            style={labelMaxWidthMaybe}\n            onClick={() => this.toggleOpen()}\n          >\n            {label}\n          </button>\n          <div\n            id={id}\n            className={popupClasses}\n            ref={node => {\n              this.filterContent = node;\n            }}\n            style={contentStyle}\n          >\n            {this.state.isOpen ? (\n              <FilterForm\n                id={`${id}.form`}\n                paddingClasses={popupSizeClasses}\n                showAsPopup\n                contentPlacementOffset={contentPlacementOffset}\n                initialValues={initialValues}\n                keepDirtyOnReinitialize={keepDirtyOnReinitialize}\n                onSubmit={this.handleSubmit}\n                onCancel={this.handleCancel}\n                onClear={this.handleClear}\n              >\n                {children}\n              </FilterForm>\n            ) : null}\n          </div>\n        </div>\n      </OutsideClickHandler>\n    );\n  }\n}\n\nFilterPopup.defaultProps = {\n  rootClassName: null,\n  className: null,\n  popupClassName: null,\n  initialValues: null,\n  keepDirtyOnReinitialize: false,\n  contentPlacementOffset: 0,\n  liveEdit: false,\n  label: null,\n  labelMaxWidth: null,\n};\n\nFilterPopup.propTypes = {\n  rootClassName: string,\n  className: string,\n  popupClassName: string,\n  id: string.isRequired,\n  onSubmit: func.isRequired,\n  initialValues: object,\n  keepDirtyOnReinitialize: bool,\n  contentPlacementOffset: number,\n  label: string.isRequired,\n  labelMaxWidth: number,\n  isSelected: bool.isRequired,\n  children: node.isRequired,\n\n  // form injectIntl\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(FilterPopup);\n"]},"metadata":{},"sourceType":"module"}