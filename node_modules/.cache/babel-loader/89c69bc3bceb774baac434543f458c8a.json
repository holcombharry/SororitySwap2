{"ast":null,"code":"var _jsxFileName = \"/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/containers/StripePayoutPage/StripePayoutPage.js\";\nimport React from 'react';\nimport { bool, func, oneOf, shape } from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport config from '../../config';\nimport routeConfiguration from '../../routing/routeConfiguration';\nimport { createResourceLocatorString } from '../../util/routes';\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\nimport { ensureCurrentUser } from '../../util/data';\nimport { propTypes } from '../../util/types';\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\nimport { stripeAccountClearError, getStripeConnectAccountLink } from '../../ducks/stripeConnectAccount.duck';\nimport { NamedRedirect, LayoutSideNavigation, LayoutWrapperMain, LayoutWrapperAccountSettingsSideNav, LayoutWrapperTopbar, LayoutWrapperFooter, Footer, Page, StripeConnectAccountStatusBox, StripeConnectAccountForm, UserNav } from '../../components';\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\nimport { savePayoutDetails } from './StripePayoutPage.duck';\nimport css from './StripePayoutPage.module.css';\nconst STRIPE_ONBOARDING_RETURN_URL_SUCCESS = 'success';\nconst STRIPE_ONBOARDING_RETURN_URL_FAILURE = 'failure';\nconst STRIPE_ONBOARDING_RETURN_URL_TYPES = [STRIPE_ONBOARDING_RETURN_URL_SUCCESS, STRIPE_ONBOARDING_RETURN_URL_FAILURE]; // Create return URL for the Stripe onboarding form\n\nconst createReturnURL = (returnURLType, rootURL, routes) => {\n  const path = createResourceLocatorString('StripePayoutOnboardingPage', routes, {\n    returnURLType\n  }, {});\n  const root = rootURL.replace(/\\/$/, '');\n  return `${root}${path}`;\n}; // Get attribute: stripeAccountData\n\n\nconst getStripeAccountData = stripeAccount => stripeAccount.attributes.stripeAccountData || null; // Get last 4 digits of bank account returned in Stripe account\n\n\nconst getBankAccountLast4Digits = stripeAccountData => stripeAccountData && stripeAccountData.external_accounts.data.length > 0 ? stripeAccountData.external_accounts.data[0].last4 : null; // Check if there's requirements on selected type: 'past_due', 'currently_due' etc.\n\n\nconst hasRequirements = (stripeAccountData, requirementType) => stripeAccountData != null && stripeAccountData.requirements && Array.isArray(stripeAccountData.requirements[requirementType]) && stripeAccountData.requirements[requirementType].length > 0; // Redirect user to Stripe's hosted Connect account onboarding form\n\n\nconst handleGetStripeConnectAccountLinkFn = (getLinkFn, commonParams) => type => () => {\n  getLinkFn({\n    type,\n    ...commonParams\n  }).then(url => {\n    window.location.href = url;\n  }).catch(err => console.error(err));\n};\n\nexport const StripePayoutPageComponent = props => {\n  const {\n    currentUser,\n    scrollingDisabled,\n    getAccountLinkInProgress,\n    getAccountLinkError,\n    createStripeAccountError,\n    updateStripeAccountError,\n    fetchStripeAccountError,\n    stripeAccountFetched,\n    stripeAccount,\n    onPayoutDetailsChange,\n    onPayoutDetailsSubmit,\n    onGetStripeConnectAccountLink,\n    payoutDetailsSaveInProgress,\n    payoutDetailsSaved,\n    params,\n    intl\n  } = props;\n  const {\n    returnURLType\n  } = params;\n  const ensuredCurrentUser = ensureCurrentUser(currentUser);\n  const currentUserLoaded = !!ensuredCurrentUser.id;\n  const stripeConnected = currentUserLoaded && !!stripeAccount && !!stripeAccount.id;\n  const title = intl.formatMessage({\n    id: 'StripePayoutPage.title'\n  });\n  const formDisabled = getAccountLinkInProgress;\n  const rootURL = config.canonicalRootURL;\n  const routes = routeConfiguration();\n  const successURL = createReturnURL(STRIPE_ONBOARDING_RETURN_URL_SUCCESS, rootURL, routes);\n  const failureURL = createReturnURL(STRIPE_ONBOARDING_RETURN_URL_FAILURE, rootURL, routes);\n  const accountId = stripeConnected ? stripeAccount.id : null;\n  const stripeAccountData = stripeConnected ? getStripeAccountData(stripeAccount) : null;\n  const requirementsMissing = stripeAccount && (hasRequirements(stripeAccountData, 'past_due') || hasRequirements(stripeAccountData, 'currently_due'));\n  const savedCountry = stripeAccountData ? stripeAccountData.country : null;\n  const handleGetStripeConnectAccountLink = handleGetStripeConnectAccountLinkFn(onGetStripeConnectAccountLink, {\n    accountId,\n    successURL,\n    failureURL\n  });\n  const returnedNormallyFromStripe = returnURLType === STRIPE_ONBOARDING_RETURN_URL_SUCCESS;\n  const returnedAbnormallyFromStripe = returnURLType === STRIPE_ONBOARDING_RETURN_URL_FAILURE;\n  const showVerificationNeeded = stripeConnected && requirementsMissing; // Redirect from success URL to basic path for StripePayoutPage\n\n  if (returnedNormallyFromStripe && stripeConnected && !requirementsMissing) {\n    return /*#__PURE__*/React.createElement(NamedRedirect, {\n      name: \"StripePayoutPage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 12\n      }\n    });\n  } // Failure url should redirect back to Stripe since it's most likely due to page reload\n  // Account link creation will fail if the account is the reason\n\n\n  if (returnedAbnormallyFromStripe && !getAccountLinkError) {\n    handleGetStripeConnectAccountLink('custom_account_verification')();\n  }\n\n  return /*#__PURE__*/React.createElement(Page, {\n    title: title,\n    scrollingDisabled: scrollingDisabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LayoutSideNavigation, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(LayoutWrapperTopbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TopbarContainer, {\n    currentPage: \"StripePayoutPage\",\n    desktopClassName: css.desktopTopbar,\n    mobileClassName: css.mobileTopbar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(UserNav, {\n    selectedPageName: \"StripePayoutPage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(LayoutWrapperAccountSettingsSideNav, {\n    currentTab: \"StripePayoutPage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(LayoutWrapperMain, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: css.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: css.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"StripePayoutPage.heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 15\n    }\n  })), !currentUserLoaded ? /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"StripePayoutPage.loadingData\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 15\n    }\n  }) : returnedAbnormallyFromStripe && !getAccountLinkError ? /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"StripePayoutPage.redirectingToStripe\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 15\n    }\n  }) : /*#__PURE__*/React.createElement(StripeConnectAccountForm, {\n    disabled: formDisabled,\n    inProgress: payoutDetailsSaveInProgress,\n    ready: payoutDetailsSaved,\n    currentUser: ensuredCurrentUser,\n    stripeBankAccountLastDigits: getBankAccountLast4Digits(stripeAccountData),\n    savedCountry: savedCountry,\n    submitButtonText: intl.formatMessage({\n      id: 'StripePayoutPage.submitButtonText'\n    }),\n    stripeAccountError: createStripeAccountError || updateStripeAccountError || fetchStripeAccountError,\n    stripeAccountLinkError: getAccountLinkError,\n    stripeAccountFetched: stripeAccountFetched,\n    onChange: onPayoutDetailsChange,\n    onSubmit: onPayoutDetailsSubmit,\n    onGetStripeConnectAccountLink: handleGetStripeConnectAccountLink,\n    stripeConnected: stripeConnected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 15\n    }\n  }, stripeConnected && !returnedAbnormallyFromStripe && showVerificationNeeded ? /*#__PURE__*/React.createElement(StripeConnectAccountStatusBox, {\n    type: \"verificationNeeded\",\n    inProgress: getAccountLinkInProgress,\n    onGetStripeConnectAccountLink: handleGetStripeConnectAccountLink('custom_account_verification'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 19\n    }\n  }) : stripeConnected && savedCountry && !returnedAbnormallyFromStripe ? /*#__PURE__*/React.createElement(StripeConnectAccountStatusBox, {\n    type: \"verificationSuccess\",\n    inProgress: getAccountLinkInProgress,\n    disabled: payoutDetailsSaveInProgress,\n    onGetStripeConnectAccountLink: handleGetStripeConnectAccountLink('custom_account_update'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 19\n    }\n  }) : null))), /*#__PURE__*/React.createElement(LayoutWrapperFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 11\n    }\n  }))));\n};\n_c = StripePayoutPageComponent;\nStripePayoutPageComponent.defaultProps = {\n  currentUser: null,\n  createStripeAccountError: null,\n  updateStripeAccountError: null,\n  fetchStripeAccountError: null,\n  getAccountLinkError: null,\n  stripeAccount: null,\n  params: {\n    returnURLType: null\n  }\n};\nStripePayoutPageComponent.propTypes = {\n  currentUser: propTypes.currentUser,\n  scrollingDisabled: bool.isRequired,\n  getAccountLinkInProgress: bool.isRequired,\n  payoutDetailsSaveInProgress: bool.isRequired,\n  createStripeAccountError: propTypes.error,\n  getAccountLinkError: propTypes.error,\n  updateStripeAccountError: propTypes.error,\n  fetchStripeAccountError: propTypes.error,\n  stripeAccount: propTypes.stripeAccount,\n  stripeAccountFetched: bool.isRequired,\n  payoutDetailsSaved: bool.isRequired,\n  onPayoutDetailsChange: func.isRequired,\n  onPayoutDetailsSubmit: func.isRequired,\n  onGetStripeConnectAccountLink: func.isRequired,\n  params: shape({\n    returnURLType: oneOf(STRIPE_ONBOARDING_RETURN_URL_TYPES)\n  }),\n  // from injectIntl\n  intl: intlShape.isRequired\n};\n\nconst mapStateToProps = state => {\n  const {\n    getAccountLinkInProgress,\n    getAccountLinkError,\n    createStripeAccountError,\n    updateStripeAccountError,\n    fetchStripeAccountError,\n    stripeAccount,\n    stripeAccountFetched\n  } = state.stripeConnectAccount;\n  const {\n    currentUser\n  } = state.user;\n  const {\n    payoutDetailsSaveInProgress,\n    payoutDetailsSaved\n  } = state.StripePayoutPage;\n  return {\n    currentUser,\n    getAccountLinkInProgress,\n    getAccountLinkError,\n    createStripeAccountError,\n    updateStripeAccountError,\n    fetchStripeAccountError,\n    stripeAccount,\n    stripeAccountFetched,\n    payoutDetailsSaveInProgress,\n    payoutDetailsSaved,\n    scrollingDisabled: isScrollingDisabled(state)\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onPayoutDetailsChange: () => dispatch(stripeAccountClearError()),\n  onPayoutDetailsSubmit: (values, isUpdateCall) => dispatch(savePayoutDetails(values, isUpdateCall)),\n  onGetStripeConnectAccountLink: params => dispatch(getStripeConnectAccountLink(params))\n});\n\nconst StripePayoutPage = compose(connect(mapStateToProps, mapDispatchToProps), injectIntl)(StripePayoutPageComponent);\nexport default StripePayoutPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"StripePayoutPageComponent\");","map":{"version":3,"sources":["/Users/harryholcomb/Desktop/React Native/GitHub/Sharetribe/ftw-product/src/containers/StripePayoutPage/StripePayoutPage.js"],"names":["React","bool","func","oneOf","shape","compose","connect","config","routeConfiguration","createResourceLocatorString","FormattedMessage","injectIntl","intlShape","ensureCurrentUser","propTypes","isScrollingDisabled","stripeAccountClearError","getStripeConnectAccountLink","NamedRedirect","LayoutSideNavigation","LayoutWrapperMain","LayoutWrapperAccountSettingsSideNav","LayoutWrapperTopbar","LayoutWrapperFooter","Footer","Page","StripeConnectAccountStatusBox","StripeConnectAccountForm","UserNav","TopbarContainer","savePayoutDetails","css","STRIPE_ONBOARDING_RETURN_URL_SUCCESS","STRIPE_ONBOARDING_RETURN_URL_FAILURE","STRIPE_ONBOARDING_RETURN_URL_TYPES","createReturnURL","returnURLType","rootURL","routes","path","root","replace","getStripeAccountData","stripeAccount","attributes","stripeAccountData","getBankAccountLast4Digits","external_accounts","data","length","last4","hasRequirements","requirementType","requirements","Array","isArray","handleGetStripeConnectAccountLinkFn","getLinkFn","commonParams","type","then","url","window","location","href","catch","err","console","error","StripePayoutPageComponent","props","currentUser","scrollingDisabled","getAccountLinkInProgress","getAccountLinkError","createStripeAccountError","updateStripeAccountError","fetchStripeAccountError","stripeAccountFetched","onPayoutDetailsChange","onPayoutDetailsSubmit","onGetStripeConnectAccountLink","payoutDetailsSaveInProgress","payoutDetailsSaved","params","intl","ensuredCurrentUser","currentUserLoaded","id","stripeConnected","title","formatMessage","formDisabled","canonicalRootURL","successURL","failureURL","accountId","requirementsMissing","savedCountry","country","handleGetStripeConnectAccountLink","returnedNormallyFromStripe","returnedAbnormallyFromStripe","showVerificationNeeded","desktopTopbar","mobileTopbar","content","defaultProps","isRequired","mapStateToProps","state","stripeConnectAccount","user","StripePayoutPage","mapDispatchToProps","dispatch","values","isUpdateCall"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { bool, func, oneOf, shape } from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\n\nimport config from '../../config';\nimport routeConfiguration from '../../routing/routeConfiguration';\nimport { createResourceLocatorString } from '../../util/routes';\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\nimport { ensureCurrentUser } from '../../util/data';\nimport { propTypes } from '../../util/types';\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\nimport {\n  stripeAccountClearError,\n  getStripeConnectAccountLink,\n} from '../../ducks/stripeConnectAccount.duck';\n\nimport {\n  NamedRedirect,\n  LayoutSideNavigation,\n  LayoutWrapperMain,\n  LayoutWrapperAccountSettingsSideNav,\n  LayoutWrapperTopbar,\n  LayoutWrapperFooter,\n  Footer,\n  Page,\n  StripeConnectAccountStatusBox,\n  StripeConnectAccountForm,\n  UserNav,\n} from '../../components';\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\n\nimport { savePayoutDetails } from './StripePayoutPage.duck';\n\nimport css from './StripePayoutPage.module.css';\n\nconst STRIPE_ONBOARDING_RETURN_URL_SUCCESS = 'success';\nconst STRIPE_ONBOARDING_RETURN_URL_FAILURE = 'failure';\nconst STRIPE_ONBOARDING_RETURN_URL_TYPES = [\n  STRIPE_ONBOARDING_RETURN_URL_SUCCESS,\n  STRIPE_ONBOARDING_RETURN_URL_FAILURE,\n];\n\n// Create return URL for the Stripe onboarding form\nconst createReturnURL = (returnURLType, rootURL, routes) => {\n  const path = createResourceLocatorString(\n    'StripePayoutOnboardingPage',\n    routes,\n    { returnURLType },\n    {}\n  );\n  const root = rootURL.replace(/\\/$/, '');\n  return `${root}${path}`;\n};\n\n// Get attribute: stripeAccountData\nconst getStripeAccountData = stripeAccount => stripeAccount.attributes.stripeAccountData || null;\n\n// Get last 4 digits of bank account returned in Stripe account\nconst getBankAccountLast4Digits = stripeAccountData =>\n  stripeAccountData && stripeAccountData.external_accounts.data.length > 0\n    ? stripeAccountData.external_accounts.data[0].last4\n    : null;\n\n// Check if there's requirements on selected type: 'past_due', 'currently_due' etc.\nconst hasRequirements = (stripeAccountData, requirementType) =>\n  stripeAccountData != null &&\n  stripeAccountData.requirements &&\n  Array.isArray(stripeAccountData.requirements[requirementType]) &&\n  stripeAccountData.requirements[requirementType].length > 0;\n\n// Redirect user to Stripe's hosted Connect account onboarding form\nconst handleGetStripeConnectAccountLinkFn = (getLinkFn, commonParams) => type => () => {\n  getLinkFn({ type, ...commonParams })\n    .then(url => {\n      window.location.href = url;\n    })\n    .catch(err => console.error(err));\n};\n\nexport const StripePayoutPageComponent = props => {\n  const {\n    currentUser,\n    scrollingDisabled,\n    getAccountLinkInProgress,\n    getAccountLinkError,\n    createStripeAccountError,\n    updateStripeAccountError,\n    fetchStripeAccountError,\n    stripeAccountFetched,\n    stripeAccount,\n    onPayoutDetailsChange,\n    onPayoutDetailsSubmit,\n    onGetStripeConnectAccountLink,\n    payoutDetailsSaveInProgress,\n    payoutDetailsSaved,\n    params,\n    intl,\n  } = props;\n\n  const { returnURLType } = params;\n  const ensuredCurrentUser = ensureCurrentUser(currentUser);\n  const currentUserLoaded = !!ensuredCurrentUser.id;\n  const stripeConnected = currentUserLoaded && !!stripeAccount && !!stripeAccount.id;\n\n  const title = intl.formatMessage({ id: 'StripePayoutPage.title' });\n\n  const formDisabled = getAccountLinkInProgress;\n\n  const rootURL = config.canonicalRootURL;\n  const routes = routeConfiguration();\n  const successURL = createReturnURL(STRIPE_ONBOARDING_RETURN_URL_SUCCESS, rootURL, routes);\n  const failureURL = createReturnURL(STRIPE_ONBOARDING_RETURN_URL_FAILURE, rootURL, routes);\n\n  const accountId = stripeConnected ? stripeAccount.id : null;\n  const stripeAccountData = stripeConnected ? getStripeAccountData(stripeAccount) : null;\n  const requirementsMissing =\n    stripeAccount &&\n    (hasRequirements(stripeAccountData, 'past_due') ||\n      hasRequirements(stripeAccountData, 'currently_due'));\n\n  const savedCountry = stripeAccountData ? stripeAccountData.country : null;\n\n  const handleGetStripeConnectAccountLink = handleGetStripeConnectAccountLinkFn(\n    onGetStripeConnectAccountLink,\n    {\n      accountId,\n      successURL,\n      failureURL,\n    }\n  );\n\n  const returnedNormallyFromStripe = returnURLType === STRIPE_ONBOARDING_RETURN_URL_SUCCESS;\n  const returnedAbnormallyFromStripe = returnURLType === STRIPE_ONBOARDING_RETURN_URL_FAILURE;\n  const showVerificationNeeded = stripeConnected && requirementsMissing;\n\n  // Redirect from success URL to basic path for StripePayoutPage\n  if (returnedNormallyFromStripe && stripeConnected && !requirementsMissing) {\n    return <NamedRedirect name=\"StripePayoutPage\" />;\n  }\n\n  // Failure url should redirect back to Stripe since it's most likely due to page reload\n  // Account link creation will fail if the account is the reason\n  if (returnedAbnormallyFromStripe && !getAccountLinkError) {\n    handleGetStripeConnectAccountLink('custom_account_verification')();\n  }\n\n  return (\n    <Page title={title} scrollingDisabled={scrollingDisabled}>\n      <LayoutSideNavigation>\n        <LayoutWrapperTopbar>\n          <TopbarContainer\n            currentPage=\"StripePayoutPage\"\n            desktopClassName={css.desktopTopbar}\n            mobileClassName={css.mobileTopbar}\n          />\n          <UserNav selectedPageName=\"StripePayoutPage\" />\n        </LayoutWrapperTopbar>\n        <LayoutWrapperAccountSettingsSideNav currentTab=\"StripePayoutPage\" />\n        <LayoutWrapperMain>\n          <div className={css.content}>\n            <h1 className={css.title}>\n              <FormattedMessage id=\"StripePayoutPage.heading\" />\n            </h1>\n            {!currentUserLoaded ? (\n              <FormattedMessage id=\"StripePayoutPage.loadingData\" />\n            ) : returnedAbnormallyFromStripe && !getAccountLinkError ? (\n              <FormattedMessage id=\"StripePayoutPage.redirectingToStripe\" />\n            ) : (\n              <StripeConnectAccountForm\n                disabled={formDisabled}\n                inProgress={payoutDetailsSaveInProgress}\n                ready={payoutDetailsSaved}\n                currentUser={ensuredCurrentUser}\n                stripeBankAccountLastDigits={getBankAccountLast4Digits(stripeAccountData)}\n                savedCountry={savedCountry}\n                submitButtonText={intl.formatMessage({\n                  id: 'StripePayoutPage.submitButtonText',\n                })}\n                stripeAccountError={\n                  createStripeAccountError || updateStripeAccountError || fetchStripeAccountError\n                }\n                stripeAccountLinkError={getAccountLinkError}\n                stripeAccountFetched={stripeAccountFetched}\n                onChange={onPayoutDetailsChange}\n                onSubmit={onPayoutDetailsSubmit}\n                onGetStripeConnectAccountLink={handleGetStripeConnectAccountLink}\n                stripeConnected={stripeConnected}\n              >\n                {stripeConnected && !returnedAbnormallyFromStripe && showVerificationNeeded ? (\n                  <StripeConnectAccountStatusBox\n                    type=\"verificationNeeded\"\n                    inProgress={getAccountLinkInProgress}\n                    onGetStripeConnectAccountLink={handleGetStripeConnectAccountLink(\n                      'custom_account_verification'\n                    )}\n                  />\n                ) : stripeConnected && savedCountry && !returnedAbnormallyFromStripe ? (\n                  <StripeConnectAccountStatusBox\n                    type=\"verificationSuccess\"\n                    inProgress={getAccountLinkInProgress}\n                    disabled={payoutDetailsSaveInProgress}\n                    onGetStripeConnectAccountLink={handleGetStripeConnectAccountLink(\n                      'custom_account_update'\n                    )}\n                  />\n                ) : null}\n              </StripeConnectAccountForm>\n            )}\n          </div>\n        </LayoutWrapperMain>\n        <LayoutWrapperFooter>\n          <Footer />\n        </LayoutWrapperFooter>\n      </LayoutSideNavigation>\n    </Page>\n  );\n};\n\nStripePayoutPageComponent.defaultProps = {\n  currentUser: null,\n  createStripeAccountError: null,\n  updateStripeAccountError: null,\n  fetchStripeAccountError: null,\n  getAccountLinkError: null,\n  stripeAccount: null,\n  params: {\n    returnURLType: null,\n  },\n};\n\nStripePayoutPageComponent.propTypes = {\n  currentUser: propTypes.currentUser,\n  scrollingDisabled: bool.isRequired,\n  getAccountLinkInProgress: bool.isRequired,\n  payoutDetailsSaveInProgress: bool.isRequired,\n  createStripeAccountError: propTypes.error,\n  getAccountLinkError: propTypes.error,\n  updateStripeAccountError: propTypes.error,\n  fetchStripeAccountError: propTypes.error,\n  stripeAccount: propTypes.stripeAccount,\n  stripeAccountFetched: bool.isRequired,\n  payoutDetailsSaved: bool.isRequired,\n\n  onPayoutDetailsChange: func.isRequired,\n  onPayoutDetailsSubmit: func.isRequired,\n  onGetStripeConnectAccountLink: func.isRequired,\n  params: shape({\n    returnURLType: oneOf(STRIPE_ONBOARDING_RETURN_URL_TYPES),\n  }),\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst mapStateToProps = state => {\n  const {\n    getAccountLinkInProgress,\n    getAccountLinkError,\n    createStripeAccountError,\n    updateStripeAccountError,\n    fetchStripeAccountError,\n    stripeAccount,\n    stripeAccountFetched,\n  } = state.stripeConnectAccount;\n  const { currentUser } = state.user;\n  const { payoutDetailsSaveInProgress, payoutDetailsSaved } = state.StripePayoutPage;\n  return {\n    currentUser,\n    getAccountLinkInProgress,\n    getAccountLinkError,\n    createStripeAccountError,\n    updateStripeAccountError,\n    fetchStripeAccountError,\n    stripeAccount,\n    stripeAccountFetched,\n    payoutDetailsSaveInProgress,\n    payoutDetailsSaved,\n    scrollingDisabled: isScrollingDisabled(state),\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onPayoutDetailsChange: () => dispatch(stripeAccountClearError()),\n  onPayoutDetailsSubmit: (values, isUpdateCall) =>\n    dispatch(savePayoutDetails(values, isUpdateCall)),\n  onGetStripeConnectAccountLink: params => dispatch(getStripeConnectAccountLink(params)),\n});\n\nconst StripePayoutPage = compose(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  ),\n  injectIntl\n)(StripePayoutPageComponent);\n\nexport default StripePayoutPage;\n"]},"metadata":{},"sourceType":"module"}